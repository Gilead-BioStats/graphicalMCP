// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// power_bonferroni.cpp
writable::integers bonferroni_sequential_cpp(writable::doubles hypotheses, writable::doubles_matrix<> transitions, doubles p, double alpha);
extern "C" SEXP _graphicalMCP_bonferroni_sequential_cpp(SEXP hypotheses, SEXP transitions, SEXP p, SEXP alpha) {
  BEGIN_CPP11
    return cpp11::as_sexp(bonferroni_sequential_cpp(cpp11::as_cpp<cpp11::decay_t<writable::doubles>>(hypotheses), cpp11::as_cpp<cpp11::decay_t<writable::doubles_matrix<>>>(transitions), cpp11::as_cpp<cpp11::decay_t<doubles>>(p), cpp11::as_cpp<cpp11::decay_t<double>>(alpha)));
  END_CPP11
}
// power_bonferroni.cpp
integers_matrix<> bonferroni_sequential_power(writable::doubles hypotheses, writable::doubles_matrix<> transitions, doubles_matrix<> p_mat, double alpha);
extern "C" SEXP _graphicalMCP_bonferroni_sequential_power(SEXP hypotheses, SEXP transitions, SEXP p_mat, SEXP alpha) {
  BEGIN_CPP11
    return cpp11::as_sexp(bonferroni_sequential_power(cpp11::as_cpp<cpp11::decay_t<writable::doubles>>(hypotheses), cpp11::as_cpp<cpp11::decay_t<writable::doubles_matrix<>>>(transitions), cpp11::as_cpp<cpp11::decay_t<doubles_matrix<>>>(p_mat), cpp11::as_cpp<cpp11::decay_t<double>>(alpha)));
  END_CPP11
}
// power_simes.cpp
double p_adjust_simes_cpp(writable::doubles p, writable::doubles weights);
extern "C" SEXP _graphicalMCP_p_adjust_simes_cpp(SEXP p, SEXP weights) {
  BEGIN_CPP11
    return cpp11::as_sexp(p_adjust_simes_cpp(cpp11::as_cpp<cpp11::decay_t<writable::doubles>>(p), cpp11::as_cpp<cpp11::decay_t<writable::doubles>>(weights)));
  END_CPP11
}
// power_simes.cpp
doubles test_graph_fast_simes_cpp(doubles hypotheses, doubles transitions, doubles p);
extern "C" SEXP _graphicalMCP_test_graph_fast_simes_cpp(SEXP hypotheses, SEXP transitions, SEXP p) {
  BEGIN_CPP11
    return cpp11::as_sexp(test_graph_fast_simes_cpp(cpp11::as_cpp<cpp11::decay_t<doubles>>(hypotheses), cpp11::as_cpp<cpp11::decay_t<doubles>>(transitions), cpp11::as_cpp<cpp11::decay_t<doubles>>(p)));
  END_CPP11
}
// zero_node.cpp
list zero_node_cpp(list graph, int remove);
extern "C" SEXP _graphicalMCP_zero_node_cpp(SEXP graph, SEXP remove) {
  BEGIN_CPP11
    return cpp11::as_sexp(zero_node_cpp(cpp11::as_cpp<cpp11::decay_t<list>>(graph), cpp11::as_cpp<cpp11::decay_t<int>>(remove)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_graphicalMCP_bonferroni_sequential_cpp",   (DL_FUNC) &_graphicalMCP_bonferroni_sequential_cpp,   4},
    {"_graphicalMCP_bonferroni_sequential_power", (DL_FUNC) &_graphicalMCP_bonferroni_sequential_power, 4},
    {"_graphicalMCP_p_adjust_simes_cpp",          (DL_FUNC) &_graphicalMCP_p_adjust_simes_cpp,          2},
    {"_graphicalMCP_test_graph_fast_simes_cpp",   (DL_FUNC) &_graphicalMCP_test_graph_fast_simes_cpp,   3},
    {"_graphicalMCP_zero_node_cpp",               (DL_FUNC) &_graphicalMCP_zero_node_cpp,               2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_graphicalMCP(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
