[{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Commonly-used graph examples","text":"valid graph can made graph_create(), patterns established time. demonstrate run patterns graphicalMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"bonferroni-holm","dir":"Articles","previous_headings":"","what":"Bonferroni-Holm","title":"Commonly-used graph examples","text":"","code":"transitions <- matrix(1 / 4, 5, 5) diag(transitions) <- 0  bonferroni_holm_graph <- graph_create(rep(1 / 5, 5), transitions)  plot(bonferroni_holm_graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"fixed-sequence","dir":"Articles","previous_headings":"","what":"Fixed sequence","title":"Commonly-used graph examples","text":"","code":"fixed_sequence_graph <- graph_create(   c(1, 0, 0, 0),   rbind(     c(0, 1, 0, 0),     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 0, 0, 0)   ) )  plot(fixed_sequence_graph, layout = \"grid\", nrow = 1, asp = .1)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"simple-successive","dir":"Articles","previous_headings":"","what":"Simple successive","title":"Commonly-used graph examples","text":"General successive graphs good example multiple variations may useful slight differences starting edge weights. Variable edge weights currently supported, can done particular graph light wrapper. multiple variations can created compared easily.","code":"simple_successive_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   ) )  plot(simple_successive_graph, layout = \"grid\", nrow = 2) simple_successive_var <- function(gamma) {   graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, gamma, 1 - gamma, 0),     c(gamma, 0, 0, 1 - gamma),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   )   ) } plot(   simple_successive_var(.75),   layout = \"grid\",   nrow = 2,   vertex.label.cex = .7,   edge.label.cex = .7 )  plot(   simple_successive_var(.9),   layout = \"grid\",   nrow = 2,   vertex.label.cex = .7,   edge.label.cex = .7 )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"huque-alosh-bhore-2011","dir":"Articles","previous_headings":"","what":"Huque-Alosh-Bhore (2011)","title":"Commonly-used graph examples","text":"","code":"hab_2011_graph <- graph_create(     c(1, 0, 0, 0),     rbind(       c(0, .5, .5,  0),       c(0,  0,  0,  1),       c(0, .5,  0, .5),       c(0,  1,  0,  0)   ) )  plot(hab_2011_graph, layout = \"grid\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"wiens-dmitrienko-2005","dir":"Articles","previous_headings":"","what":"Wiens-Dmitrienko (2005)","title":"Commonly-used graph examples","text":"","code":"wd_2005_graph <- graph_create(     c(1 / 3, 1 / 3, 1 / 3),     rbind(       c(0, 1, 0),       c(0, 0, 1),       c(.5, .5, 0)     )   )  plot(wd_2005_graph, layout = \"grid\", nrow = 1, asp = .1, edge_curves = c(pairs = -6, \"H3|H1\" = -6))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"parallel-gate-keeping","dir":"Articles","previous_headings":"","what":"Parallel gate-keeping","title":"Commonly-used graph examples","text":"","code":"par_gate_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, .5, .5),     c(0, 0, .5, .5),     c(0, 0, 0, 1),     c(0, 0, 1, 0)   ) )   plot(par_gate_graph, layout = \"grid\", nrow = 2)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"improved-parallel-gate-keeping","dir":"Articles","previous_headings":"","what":"Improved parallel gate-keeping","title":"Commonly-used graph examples","text":"","code":"imp_par_gate_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, .5, .5),     c(0, 0, .5, .5),     c(.0001, 0, 0, .9999),     c(0, .0001, .9999, 0)   ) )   plot(imp_par_gate_graph, layout = \"grid\", nrow = 2)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started","text":"graphicalMCP CRAN, install GitHub ","code":"# install.packages(\"pak\") pak::pak(\"Gilead-BioStats/graphicalMCP@dev\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"testing-a-graph","dir":"Articles","previous_headings":"","what":"Testing a graph","title":"Get started","text":"Start testing simple successive graph two primary two secondary hypotheses.","code":"ss_graph <- simple_successive_2(c(\"A1\", \"B1\", \"A2\", \"B2\"))  p_values <- c(.012, .005, .013, .0135)  ss_graph #> Initial graph #>  #> --- Hypothesis weights --- #> A1: 0.5 #> B1: 0.5 #> A2: 0.0 #> B2: 0.0 #>  #> --- Transition weights --- #>      A1  B1  A2  B2 #>  A1 0.0 0.5 0.5 0.0 #>  B1 0.5 0.0 0.0 0.5 #>  A2 0.0 1.0 0.0 0.0 #>  B2 1.0 0.0 0.0 0.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"bonferroni","dir":"Articles","previous_headings":"Testing a graph","what":"Bonferroni","title":"Get started","text":"graph can tested simply default weighted Bonferroni test. testing global alpha level 0.025, can reject hypotheses A1 B1, A2 B2.","code":"graph_test_closure(ss_graph, p = p_values, alpha = .025) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Test types #>   bonferroni: (A1, B1, A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1        0.016   TRUE #>           B1        0.010   TRUE #>           A2        0.026  FALSE #>           B2        0.026  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1:  NA #>   B1:  NA #>   A2: 0.5 #>   B2: 0.5 #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA  0  1 #>   B2 NA NA  1  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"simes","dir":"Articles","previous_headings":"Testing a graph","what":"Simes","title":"Get started","text":"[don’t like paragraph, ’m sure ] Simes testing relies non-negative dependency hypotheses increase weights hypotheses. strength Simes test apparent multiple p-values fall global alpha level, local alpha intersection(s). following case, B1 & B2 rejected Bonferroni testing procedure intersection B1 ∩ B2 p-value greater alpha * w hypothesis case. However, Simes test rejects B1 ∩ B2 weight B1 added weight B2.","code":"graph_test_closure(ss_graph, p = p_values, alpha = .025, test_types = \"s\") #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Test types #>   simes: (A1, B1, A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1       0.0135   TRUE #>           B1       0.0100   TRUE #>           A2       0.0135   TRUE #>           B2       0.0135   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1: NA #>   B1: NA #>   A2: NA #>   B2: NA #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA NA NA #>   B2 NA NA NA NA"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"parametric","dir":"Articles","previous_headings":"Testing a graph","what":"Parametric","title":"Get started","text":"correlation matrix test statistics partially fully known, parametric test can used subsets whose correlation matrix fully known. B1 & B2 get c value calculated boosts testing threshold slightly higher. also demonstrates use different test types different groups hypotheses.","code":"corr1 <- list(NA, rbind(c(1, .5), c(.5, 1)))  graph_test_closure(ss_graph,   p = p_values,   alpha = .025,   groups = list(1:2, 3:4),   test_types = c(\"b\", \"p\"),   corr = corr1 ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Correlation matrix:     A2  B2 #>                       A2 1.0 0.5 #>                       B2 0.5 1.0 #>  #>   Test types #>   bonferroni: (A1, B1) #>   parametric: (A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1      0.01600   TRUE #>           B1      0.01000   TRUE #>           A2      0.02414   TRUE #>           B2      0.02414   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1: NA #>   B1: NA #>   A2: NA #>   B2: NA #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA NA NA #>   B2 NA NA NA NA"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"adjusted-significance-vs-adjusted-p-values","dir":"Articles","previous_headings":"Testing a graph","what":"Adjusted significance vs adjusted p-values","title":"Get started","text":"two different testing methods - one uses weights adjust significance level, another adjusts p-values. adjusted p-values method sometimes efficient, standard method. Additional details adjusted p-values calculation can seen setting verbose = TRUE. adjusted weights method tests every hypothesis closure, rather summarizing adjusted p-values testing. Setting test_values = TRUE displays values used tests. can provide detailed information caused hypothesis fail adjusted p-values. However, comes cost computation time. Note Intersection columns adjusted p-value adjusted weights sections serve persistent index datasets.","code":"graph_test_closure(   ss_graph,   p = p_values,   alpha = .025,   corr = corr1,   groups = list(1:2, 3:4),   test_types = c(\"s\", \"p\"),   verbose = TRUE ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Correlation matrix:     A2  B2 #>                       A2 1.0 0.5 #>                       B2 0.5 1.0 #>  #>   Test types #>        simes: (A1, B1) #>   parametric: (A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1      0.01600   TRUE #>           B1      0.01000   TRUE #>           A2      0.02414   TRUE #>           B2      0.02414   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1: NA #>   B1: NA #>   A2: NA #>   B2: NA #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA NA NA #>   B2 NA NA NA NA #>  #> Adjusted p details ($details) -------------------------------------------------- #>   Intersection       A1       B1       A2       B2 adj_p_grp1 adj_p_grp2 #>              1 0.500000 0.500000 0.000000 0.000000   0.010000   1.000000 #>              2 0.500000 0.500000 0.000000       NA   0.010000   1.000000 #>              3 0.500000 0.500000       NA 0.000000   0.010000   1.000000 #>              4 0.500000 0.500000       NA       NA   0.010000   1.000000 #>              5 0.750000       NA 0.000000 0.250000   0.016000   0.054000 #>              6 1.000000       NA 0.000000       NA   0.012000   1.000000 #>              7 0.750000       NA       NA 0.250000   0.016000   0.054000 #>              8 1.000000       NA       NA       NA   0.012000   1.000000 #>              9       NA 0.750000 0.250000 0.000000   0.006667   0.052000 #>             10       NA 0.750000 0.250000       NA   0.006667   0.052000 #>   adj_p_inter reject_intersection #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.006667                TRUE #>      0.006667                TRUE #>   ... (Use `print(x, rows = <nn>)` for more) graph_test_closure(   ss_graph,   p = p_values,   alpha = .025,   corr = corr1,   groups = list(1:2, 3:4),   test_types = c(\"s\", \"p\"),   verbose = TRUE,   test_values = TRUE ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Correlation matrix:     A2  B2 #>                       A2 1.0 0.5 #>                       B2 0.5 1.0 #>  #>   Test types #>        simes: (A1, B1) #>   parametric: (A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1      0.01600   TRUE #>           B1      0.01000   TRUE #>           A2      0.02414   TRUE #>           B2      0.02414   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1: NA #>   B1: NA #>   A2: NA #>   B2: NA #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA NA NA #>   B2 NA NA NA NA #>  #> Adjusted p details ($details) -------------------------------------------------- #>   Intersection       A1       B1       A2       B2 adj_p_grp1 adj_p_grp2 #>              1 0.500000 0.500000 0.000000 0.000000   0.010000   1.000000 #>              2 0.500000 0.500000 0.000000       NA   0.010000   1.000000 #>              3 0.500000 0.500000       NA 0.000000   0.010000   1.000000 #>              4 0.500000 0.500000       NA       NA   0.010000   1.000000 #>              5 0.750000       NA 0.000000 0.250000   0.016000   0.054000 #>              6 1.000000       NA 0.000000       NA   0.012000   1.000000 #>              7 0.750000       NA       NA 0.250000   0.016000   0.054000 #>              8 1.000000       NA       NA       NA   0.012000   1.000000 #>              9       NA 0.750000 0.250000 0.000000   0.006667   0.052000 #>             10       NA 0.750000 0.250000       NA   0.006667   0.052000 #>   adj_p_inter reject_intersection #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.006667                TRUE #>      0.006667                TRUE #>   ... (Use `print(x, rows = <nn>)` for more) #>  #> Detailed test values ($test_values) -------------------------------------------- #>   Intersection Hypothesis       Test      p <= c_value * Weight * Alpha #>              1         A1      simes 0.0120 <=             1.00 * 0.025 #>              1         B1      simes 0.0050 <=             0.50 * 0.025 #>              1         A2 parametric 0.0130 <=   1.000 *   0.00 * 0.025 #>              1         B2 parametric 0.0135 <=   1.000 *   0.00 * 0.025 #>              2         A1      simes 0.0120 <=             1.00 * 0.025 #>              2         B1      simes 0.0050 <=             0.50 * 0.025 #>              2         A2 parametric 0.0130 <=   1.000 *   0.00 * 0.025 #>              3         A1      simes 0.0120 <=             1.00 * 0.025 #>              3         B1      simes 0.0050 <=             0.50 * 0.025 #>              3         B2 parametric 0.0135 <=   1.000 *   0.00 * 0.025 #>   Inequality_holds #>               TRUE #>               TRUE #>              FALSE #>              FALSE #>               TRUE #>               TRUE #>              FALSE #>               TRUE #>               TRUE #>              FALSE #>   ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"bonferroni-shortcut","dir":"Articles","previous_headings":"Testing a graph","what":"Bonferroni shortcut","title":"Get started","text":"Exclusive Bonferroni testing admits shortcut allows us test full closure graph. Use [graph_test_shortcut()] call shortcut method. case, verbose = TRUE adds intermediate graphs deletion, test_values = TRUE gives test details order hypotheses deleted. Overall hypothesis rejection results can found Test summary section.","code":"graph_test_shortcut(   graph = ss_graph,   p = p_values,   alpha = .025,   verbose = TRUE,   test_values = TRUE ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Test types #>   bonferroni: (A1, B1, A2, B2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1        0.016   TRUE #>           B1        0.010   TRUE #>           A2        0.026  FALSE #>           B2        0.026  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1:  NA #>   B1:  NA #>   A2: 0.5 #>   B2: 0.5 #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA  0  1 #>   B2 NA NA  1  0 #>  #> Rejection sequence details ($details) ------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>     Step 1: Updated graph after removing hypothesis B1 #>  #>     --- Hypothesis weights --- #>     A1: 0.75 #>     B1:   NA #>     A2: 0.00 #>     B2: 0.25 #>  #>     --- Transition weights --- #>            A1     B1     A2     B2 #>     A1 0.0000     NA 0.6667 0.3333 #>     B1     NA     NA     NA     NA #>     A2 0.5000     NA 0.0000 0.5000 #>     B2 1.0000     NA 0.0000 0.0000 #>  #>       Step 2: Updated graph after removing hypotheses B1, A1 #>  #>       --- Hypothesis weights --- #>       A1:  NA #>       B1:  NA #>       A2: 0.5 #>       B2: 0.5 #>  #>       --- Transition weights --- #>          A1 B1 A2 B2 #>       A1 NA NA NA NA #>       B1 NA NA NA NA #>       A2 NA NA  0  1 #>       B2 NA NA  1  0 #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1:  NA #>   B1:  NA #>   A2: 0.5 #>   B2: 0.5 #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA  0  1 #>   B2 NA NA  1  0 #>  #> Detailed test values ($test_values) -------------------------------------------- #>   Step Hypothesis      p <= Weight * Alpha Inequality_holds #>      1         B1 0.0050 <=   0.50 * 0.025             TRUE #>      2         A1 0.0120 <=   0.75 * 0.025             TRUE #>      3         A2 0.0130 <=   0.50 * 0.025            FALSE #>      3         B2 0.0135 <=   0.50 * 0.025            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"test-print-options","dir":"Articles","previous_headings":"","what":"Test print options","title":"Get started","text":"print generic test results includes couple additional options. section within results indented 2 spaces default readability, can adjusted indent (Note portions output can indented minimum 1 space - pieces ignore indent 0). Numeric values rounded 6 significant figures control amount space used, can set using precision argument. printing format impacted, underlying values.","code":"mix_test <- graph_test_closure(   ss_graph,   p = p_values,   alpha = .025,   groups = list(c(1, 4), 2:3),   test_types = c(\"b\", \"s\"),   verbose = TRUE,   test_values = TRUE )  print(mix_test) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                            A1     B1     A2     B2 #>   Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>   Test types #>   bonferroni: (A1, B2) #>        simes: (B1, A2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           A1        0.016   TRUE #>           B1        0.010   TRUE #>           A2        0.026  FALSE #>           B2        0.026  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   A1:  NA #>   B1:  NA #>   A2: 0.5 #>   B2: 0.5 #>  #>   --- Transition weights --- #>      A1 B1 A2 B2 #>   A1 NA NA NA NA #>   B1 NA NA NA NA #>   A2 NA NA  0  1 #>   B2 NA NA  1  0 #>  #> Adjusted p details ($details) -------------------------------------------------- #>   Intersection       A1       B1       A2       B2 adj_p_grp1 adj_p_grp2 #>              1 0.500000 0.500000 0.000000 0.000000   0.024000   0.010000 #>              2 0.500000 0.500000 0.000000       NA   0.024000   0.010000 #>              3 0.500000 0.500000       NA 0.000000   0.024000   0.010000 #>              4 0.500000 0.500000       NA       NA   0.024000   0.010000 #>              5 0.750000       NA 0.000000 0.250000   0.016000   1.000000 #>              6 1.000000       NA 0.000000       NA   0.012000   1.000000 #>              7 0.750000       NA       NA 0.250000   0.016000   1.000000 #>              8 1.000000       NA       NA       NA   0.012000   1.000000 #>              9       NA 0.750000 0.250000 0.000000   1.000000   0.006667 #>             10       NA 0.750000 0.250000       NA   1.000000   0.006667 #>   adj_p_inter reject_intersection #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.010000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.016000                TRUE #>      0.012000                TRUE #>      0.006667                TRUE #>      0.006667                TRUE #>   ... (Use `print(x, rows = <nn>)` for more) #>  #> Detailed test values ($test_values) -------------------------------------------- #>   Intersection Hypothesis       Test      p <= Weight * Alpha Inequality_holds #>              1         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>              1         B2 bonferroni 0.0135 <=   0.00 * 0.025            FALSE #>              1         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>              1         A2      simes 0.0130 <=   0.50 * 0.025            FALSE #>              2         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>              2         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>              2         A2      simes 0.0130 <=   0.50 * 0.025            FALSE #>              3         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>              3         B2 bonferroni 0.0135 <=   0.00 * 0.025            FALSE #>              3         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>   ... (Use `print(x, rows = <nn>)` for more)  print(mix_test, indent = 6, precision = 10) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>       Initial graph #>  #>       --- Hypothesis weights --- #>       A1: 0.5 #>       B1: 0.5 #>       A2: 0.0 #>       B2: 0.0 #>  #>       --- Transition weights --- #>           A1  B1  A2  B2 #>       A1 0.0 0.5 0.5 0.0 #>       B1 0.5 0.0 0.0 0.5 #>       A2 0.0 1.0 0.0 0.0 #>       B2 1.0 0.0 0.0 0.0 #>  #>       Alpha = 0.025 #>  #>                                A1     B1     A2     B2 #>       Unadjusted p-values: 0.0120 0.0050 0.0130 0.0135 #>  #>       Test types #>       bonferroni: (A1, B2) #>            simes: (B1, A2) #>  #> Test summary ($outputs) -------------------------------------------------------- #>       Hypothesis Adj. P-value Reject #>               A1        0.016   TRUE #>               B1        0.010   TRUE #>               A2        0.026  FALSE #>               B2        0.026  FALSE #>  #>       Final updated graph after removing rejected hypotheses #>  #>       --- Hypothesis weights --- #>       A1:  NA #>       B1:  NA #>       A2: 0.5 #>       B2: 0.5 #>  #>       --- Transition weights --- #>          A1 B1 A2 B2 #>       A1 NA NA NA NA #>       B1 NA NA NA NA #>       A2 NA NA  0  1 #>       B2 NA NA  1  0 #>  #> Adjusted p details ($details) -------------------------------------------------- #>       Intersection           A1           B1           A2           B2   adj_p_grp1 #>                  1 0.5000000000 0.5000000000 0.0000000000 0.0000000000 0.0240000000 #>                  2 0.5000000000 0.5000000000 0.0000000000           NA 0.0240000000 #>                  3 0.5000000000 0.5000000000           NA 0.0000000000 0.0240000000 #>                  4 0.5000000000 0.5000000000           NA           NA 0.0240000000 #>                  5 0.7500000000           NA 0.0000000000 0.2500000000 0.0160000000 #>                  6 1.0000000000           NA 0.0000000000           NA 0.0120000000 #>                  7 0.7500000000           NA           NA 0.2500000000 0.0160000000 #>                  8 1.0000000000           NA           NA           NA 0.0120000000 #>                  9           NA 0.7500000000 0.2500000000 0.0000000000 1.0000000000 #>                 10           NA 0.7500000000 0.2500000000           NA 1.0000000000 #>         adj_p_grp2  adj_p_inter reject_intersection #>       0.0100000000 0.0100000000                TRUE #>       0.0100000000 0.0100000000                TRUE #>       0.0100000000 0.0100000000                TRUE #>       0.0100000000 0.0100000000                TRUE #>       1.0000000000 0.0160000000                TRUE #>       1.0000000000 0.0120000000                TRUE #>       1.0000000000 0.0160000000                TRUE #>       1.0000000000 0.0120000000                TRUE #>       0.0066666667 0.0066666667                TRUE #>       0.0066666667 0.0066666667                TRUE #>       ... (Use `print(x, rows = <nn>)` for more) #>  #> Detailed test values ($test_values) -------------------------------------------- #>       Intersection Hypothesis       Test      p <= Weight * Alpha Inequality_holds #>                  1         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>                  1         B2 bonferroni 0.0135 <=   0.00 * 0.025            FALSE #>                  1         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>                  1         A2      simes 0.0130 <=   0.50 * 0.025            FALSE #>                  2         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>                  2         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>                  2         A2      simes 0.0130 <=   0.50 * 0.025            FALSE #>                  3         A1 bonferroni 0.0120 <=   0.50 * 0.025             TRUE #>                  3         B2 bonferroni 0.0135 <=   0.00 * 0.025            FALSE #>                  3         B1      simes 0.0050 <=   0.50 * 0.025             TRUE #>       ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"power-simulations","dir":"Articles","previous_headings":"","what":"Power simulations","title":"Get started","text":"’s always obvious given graph easy difficult reject hypothesis. One way understand better run power simulation. essence power simulation generate many different p-values using chosen distribution, test graph set p-values see performs.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"bonferroni-shortcut-1","dir":"Articles","previous_headings":"Power simulations","what":"Bonferroni (Shortcut)","title":"Get started","text":"default power simulations, like testing, test graph alpha level .025 Bonferroni testing. default number simulations (100) typically need increased meaningful results. order run efficiently possible, Bonferroni power calculations use custom shortcut method highly optimized using vectorization early exit.","code":"graph_calculate_power(ss_graph, sim_n = 1e5) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      A1    B1    A2    B2 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    A1 B1 A2 B2 #>                A1  1  0  0  0 #>                B1  0  1  0  0 #>                A2  0  0  1  0 #>                B2  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    A1      B1      A2      B2 #>                  Local power: 0.01238 0.01340 0.00005 0.00011 #>  #>   Expected no. of rejections: 0.02594 #>    Power to reject 1 or more: 0.02542 #>          Power to reject all: 0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"other-tests-closure","dir":"Articles","previous_headings":"Power simulations","what":"Other tests (Closure)","title":"Get started","text":"valid testing strategies available power calculations well - Simes, parametric, Bonferroni, combination three. Note groups consisting single hypothesis silently converted Bonferroni. Furthermore, testing strategy comprised Bonferroni groups silently converted shortcut testing optimal performance.","code":"corr2 <- matrix(.5, nrow = 4, ncol = 4) diag(corr2) <- 1 corr2 <- list(corr2)  graph_calculate_power(   ss_graph,   test_groups = list(1:4),   test_types = \"p\",   test_corr = corr2,   sim_n = 1e5 ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     A1  B1  A2  B2 #>                                   A1 1.0 0.5 0.5 0.5 #>                                   B1 0.5 1.0 0.5 0.5 #>                                   A2 0.5 0.5 1.0 0.5 #>                                   B2 0.5 0.5 0.5 1.0 #>  #>   Test types #>   parametric: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      A1    B1    A2    B2 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    A1 B1 A2 B2 #>                A1  1  0  0  0 #>                B1  0  1  0  0 #>                A2  0  0  1  0 #>                B2  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    A1      B1      A2      B2 #>                  Local power: 0.01329 0.01394 0.00009 0.00010 #>  #>   Expected no. of rejections: 0.02742 #>    Power to reject 1 or more: 0.02688 #>          Power to reject all: 0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"simulation-options","dir":"Articles","previous_headings":"Power simulations","what":"Simulation options","title":"Get started","text":"addition testing-related options, options control p-values simulated multivariate normal distribution. parameters control (estimated) “true” distribution hypotheses.","code":"s_corr1 <- rbind(   c(1, .5, .5, .25),   c(.5, 1, .25, .5),   c(.5, .25, 1, .5),   c(.25, .5, .5, 1) )  graph_calculate_power(   ss_graph,   test_groups = list(1:4),   test_types = \"p\",   test_corr = corr2,   marginal_power = c(.4, .4, .9, .9),   sim_corr = s_corr1,   sim_seed = 52423, # Set a seed if you need consistent p-values   sim_n = 1e5 ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     A1  B1  A2  B2 #>                                   A1 1.0 0.5 0.5 0.5 #>                                   B1 0.5 1.0 0.5 0.5 #>                                   A2 0.5 0.5 1.0 0.5 #>                                   B2 0.5 0.5 0.5 1.0 #>  #>   Test types #>   parametric: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 52423 & multivariate normal params: #>  #>                    A1  B1  A2  B2 #>   Marginal power: 0.4 0.4 0.9 0.9 #>  #>   Correlation:      A1   B1   A2   B2 #>                A1 1.00 0.50 0.50 0.25 #>                B1 0.50 1.00 0.25 0.50 #>                A2 0.50 0.25 1.00 0.50 #>                B2 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   A1     B1     A2     B2 #>                  Local power: 0.3422 0.3431 0.3269 0.3282 #>  #>   Expected no. of rejections: 1.34 #>    Power to reject 1 or more: 0.4541 #>          Power to reject all: 0.222"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"power-output","dir":"Articles","previous_headings":"Power simulations","what":"Power output","title":"Get started","text":"four standard power calculations : - Local power - rate individual hypothesis rejected power simulation - Expected . rejections - average rejections per simulation - Power reject 1 - Proportion simulations reject least 1 hypothesis - Power reject - Proportion simulations reject every hypothesis addition standard calculations, user can define arbitrary “success” power calculations. instance, simple successive example, perhaps clinical trial considered success primary hypotheses rejected. success functions anything, parameter limitations. user understand meaning functions. user defined function applied simulation’s test results, resulting vector averaged. success function examples, imitate standard calculations. using logical operators, make sure use vectorized operators (|, &), rather single-value operators (||, &&). Hypotheses can weighted well.","code":"graph_calculate_power(   ss_graph,   test_groups = list(1:4),   test_types = \"p\",   test_corr = corr2,   marginal_power = c(.4, .4, .9, .9),   sim_corr = s_corr1,   sim_seed = 52423,   sim_n = 1e5,   sim_success = function(x) x[1] & x[2] ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     A1  B1  A2  B2 #>                                   A1 1.0 0.5 0.5 0.5 #>                                   B1 0.5 1.0 0.5 0.5 #>                                   A2 0.5 0.5 1.0 0.5 #>                                   B2 0.5 0.5 0.5 1.0 #>  #>   Test types #>   parametric: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 52423 & multivariate normal params: #>  #>                    A1  B1  A2  B2 #>   Marginal power: 0.4 0.4 0.9 0.9 #>  #>   Correlation:      A1   B1   A2   B2 #>                A1 1.00 0.50 0.50 0.25 #>                B1 0.50 1.00 0.25 0.50 #>                A2 0.50 0.25 1.00 0.50 #>                B2 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   A1     B1     A2     B2 #>                  Local power: 0.3422 0.3431 0.3269 0.3282 #>  #>   Expected no. of rejections: 1.34 #>    Power to reject 1 or more: 0.4541 #>          Power to reject all: 0.222 #>  #>              Power to reject:    x[1] & x[2] #>                                       0.2311 graph_calculate_power(   ss_graph,   test_groups = list(1:4),   test_types = \"p\",   test_corr = corr2,   marginal_power = c(.4, .4, .9, .9),   sim_corr = s_corr1,   sim_seed = 52423, # Set a seed if you need consistent p-values   sim_n = 1e5,   sim_success = list(     A1 = function(x) x[1],     B1 = function(x) x[2],     `Expected no. of rejections` = function(x) x[1] + x[2] + x[3] + x[4],     `1 or more` = function(x) x[1] | x[2] | x[3] | x[4],     `All` = function(x) x[1] & x[2] & x[3] & x[4],     `All 'A' or all 'B'` = function(x) (x[1] & x[3]) | (x[2] & x[4]),     `Weighted` = function(x) .75 * (x[1] & x[3]) + .25 * (x[2] & x[4])   ) ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     A1  B1  A2  B2 #>                                   A1 1.0 0.5 0.5 0.5 #>                                   B1 0.5 1.0 0.5 0.5 #>                                   A2 0.5 0.5 1.0 0.5 #>                                   B2 0.5 0.5 0.5 1.0 #>  #>   Test types #>   parametric: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 52423 & multivariate normal params: #>  #>                    A1  B1  A2  B2 #>   Marginal power: 0.4 0.4 0.9 0.9 #>  #>   Correlation:      A1   B1   A2   B2 #>                A1 1.00 0.50 0.50 0.25 #>                B1 0.50 1.00 0.25 0.50 #>                A2 0.50 0.25 1.00 0.50 #>                B2 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   A1     B1     A2     B2 #>                  Local power: 0.3422 0.3431 0.3269 0.3282 #>  #>   Expected no. of rejections: 1.34 #>    Power to reject 1 or more: 0.4541 #>          Power to reject all: 0.222 #>  #>              Power to reject:      A1     B1   Expected no. of rejections #>                                0.3422 0.3431                       1.3403 #>    1 or more    All   All 'A' or all 'B'   Weighted #>       0.4541 0.2220               0.4331     0.3272"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"verbose-simulation-details","dir":"Articles","previous_headings":"Power simulations","what":"Verbose simulation details","title":"Get started","text":"Finally, power output verbose option, opts include full simulation test results matrices.","code":"graph_calculate_power(   ss_graph,   test_groups = list(1:4),   test_types = \"p\",   test_corr = corr2,   marginal_power = c(.4, .4, .9, .9),   sim_corr = s_corr1,   sim_seed = 52423, # Set a seed if you need consistent p-values   sim_n = 1e5,   sim_success = list(     A1 = function(x) x[1],     B1 = function(x) x[2],     `Expected no. of rejections` = function(x) x[1] + x[2] + x[3] + x[4],     `1 or more` = function(x) x[1] | x[2] | x[3] | x[4],     `All` = function(x) x[1] & x[2] & x[3] & x[4],     `All 'A' or all 'B'` = function(x) (x[1] & x[3]) | (x[2] & x[4]),     `Weighted` = function(x) .75 * (x[1] & x[3]) + .25 * (x[2] & x[4])   ),   verbose = TRUE ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   A1: 0.5 #>   B1: 0.5 #>   A2: 0.0 #>   B2: 0.0 #>  #>   --- Transition weights --- #>       A1  B1  A2  B2 #>   A1 0.0 0.5 0.5 0.0 #>   B1 0.5 0.0 0.0 0.5 #>   A2 0.0 1.0 0.0 0.0 #>   B2 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     A1  B1  A2  B2 #>                                   A1 1.0 0.5 0.5 0.5 #>                                   B1 0.5 1.0 0.5 0.5 #>                                   A2 0.5 0.5 1.0 0.5 #>                                   B2 0.5 0.5 0.5 1.0 #>  #>   Test types #>   parametric: (A1, B1, A2, B2) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 52423 & multivariate normal params: #>  #>                    A1  B1  A2  B2 #>   Marginal power: 0.4 0.4 0.9 0.9 #>  #>   Correlation:      A1   B1   A2   B2 #>                A1 1.00 0.50 0.50 0.25 #>                B1 0.50 1.00 0.25 0.50 #>                A2 0.50 0.25 1.00 0.50 #>                B2 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   A1     B1     A2     B2 #>                  Local power: 0.3422 0.3431 0.3269 0.3282 #>  #>   Expected no. of rejections: 1.34 #>    Power to reject 1 or more: 0.4541 #>          Power to reject all: 0.222 #>  #>              Power to reject:      A1     B1   Expected no. of rejections #>                                0.3422 0.3431                       1.3403 #>    1 or more    All   All 'A' or all 'B'   Weighted #>       0.4541 0.2220               0.4331     0.3272 #>  #> Simulation details ($details) -------------------------------------------------- #>     p_sim_A1  p_sim_B1  p_sim_A2  p_sim_B2 rej_A1 rej_B1 rej_A2 rej_B2 #>    2.746e-01 3.836e-02 5.868e-05 4.275e-03  FALSE  FALSE  FALSE  FALSE #>    1.331e-02 3.501e-02 1.712e-02 2.017e-02   TRUE  FALSE  FALSE  FALSE #>    8.221e-02 2.626e-03 6.903e-06 1.652e-06  FALSE   TRUE  FALSE   TRUE #>    6.087e-02 2.157e-01 9.007e-05 9.386e-06  FALSE  FALSE  FALSE  FALSE #>    1.552e-01 1.026e-01 8.276e-03 4.360e-02  FALSE  FALSE  FALSE  FALSE #>    3.960e-01 1.613e-01 2.975e-02 6.355e-04  FALSE  FALSE  FALSE  FALSE #>    3.053e-02 2.147e-02 6.007e-04 6.425e-04  FALSE  FALSE  FALSE  FALSE #>    2.216e-03 1.650e-01 2.481e-04 7.847e-03   TRUE  FALSE   TRUE  FALSE #>    6.326e-01 4.070e-01 1.221e-02 5.699e-04  FALSE  FALSE  FALSE  FALSE #>    1.857e-01 2.079e-01 4.602e-03 9.197e-04  FALSE  FALSE  FALSE  FALSE #>   ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"power-print-options","dir":"Articles","previous_headings":"","what":"Power print options","title":"Get started","text":"Like testing, print() method power output uses indent precision arguments.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"multiple-comparison-problem","dir":"Articles","previous_headings":"","what":"Multiple comparison problem","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Consider confirmatory clinical trial comparing test treatment (treatment) control treatment (control) disease. two doses treatment: low dose high dose. two endpoints included multiplicity adjustment strategy, primary endpoint (PE) secondary endpoint (SE). total, four null hypotheses: \\(H_1\\) \\(H_3\\) primary secondary hypotheses respectively low dose versus control; \\(H_2\\) \\(H_4\\) primary secondary hypotheses respectively high dose versus control. discussing appropriate multiple comparison procedures, clinical considerations, adds structure multiple comparison procedures, can flexibly incorporated using graphical approaches. First, low high doses considered equally important, means rejecting primary hypothesis either dose versus control leads successful trial. Regarding secondary hypotheses, one tested corresponding primary hypothesis rejected. means \\(H_3\\) tested \\(H_1\\) rejected; \\(H_4\\) tested \\(H_2\\) rejected. addition, statistical considerations complete graph. primary hypotheses \\(H_1\\) \\(H_2\\) equal hypothesis weight 0.5. secondary hypotheses hypothesis weight 0. primary hypothesis rejected, weight propagate along two outgoing edges: one primary hypothesis one descendant secondary hypothesis. two edges equal transition weight 0.5. primary secondary hypotheses rejected dose-control comparison, hypothesis weights propagated primary hypothesis dose-control comparison. specifications, can create following graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"create-a-graph","dir":"Articles","previous_headings":"","what":"Create a graph","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0.5, 0.5, 0),   c(0.5, 0, 0, 0.5),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\")  g <- graph_create(hypotheses, transitions, hyp_names)  plot(g, layout = \"grid\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"perform-the-graphical-multiple-comparison-procedure","dir":"Articles","previous_headings":"","what":"Perform the graphical multiple comparison procedure","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given set p-values \\(H_1, \\ldots, H_4\\), graphical multiple comparison procedure can performed control familywise error rate (FWER) significance level alpha. graph_test_shortcut function agnostic one-sided two-sided tests. one-sided p-values, alpha often set 0.025 (default); two-sided p-values, alpha often set 0.05. consider one-sided tests . running procedure, hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\) rejected.","code":"p_values <- c(.013, .012, .105, .005) test_results <- graph_test_shortcut(g, p = p_values, alpha = 0.025) test_results #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.013 0.012 0.105 0.005 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1        0.024   TRUE #>           H2        0.024   TRUE #>           H3        0.105  FALSE #>           H4        0.024   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"obtain-final-and-intermediate-graphs-after-rejections","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain final and intermediate graphs after rejections","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"results, can obtain adjusted p-values rejections. hypothesis rejected adjusted p-value less equal alpha. addition, two graphs provided: one initial graph one final graph removing rejected hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\). also interested intermediate graphs - example, graph \\(H_1\\) \\(H_2\\) rejected - can specify verbose = TRUE obtain via test_results_verbose$details$results. # sure can retrieved easily","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"i-am-not-sure-if-intermediate-graphs-can-be-retrieved-easily","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"I am not sure if intermediate graphs can be retrieved easily","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"order intermediate graphs determined deleting hypothesis lowest adjusted p-values step (smaller hypothesis sequentially case adjusted p-value ties). cases, order valid order deletion. example, minimum adjusted p-value method results deleting order \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\). \\(H_2 \\rightarrow H_4 \\rightarrow H_1\\) also valid deletion order. Deletion order can customized using [custom_order_function_once_it_is_written()].","code":"test_results$outputs # Adjusted p-values and rejections #> $adjusted_p #>    H1    H2    H3    H4  #> 0.024 0.024 0.105 0.024  #>  #> $rejected #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE  TRUE  #>  #> $graph #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0 #> H2: 0 #> H3: 1 #> H4: 0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  0  0 #>  H2  0  0  0  0 #>  H3  0  0  0  0 #>  H4  0  0  0  0  test_results_verbose <- graph_test_shortcut(g, p = p_values, alpha = 0.025, verbose = TRUE) test_results_verbose$details$results # To be discussed #> [[1]] #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>      H1  H2  H3  H4 #>  H1 0.0 0.5 0.5 0.0 #>  H2 0.5 0.0 0.0 0.5 #>  H3 0.0 1.0 0.0 0.0 #>  H4 1.0 0.0 0.0 0.0 #>  #> [[2]] #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.75 #> H2: 0.00 #> H3: 0.00 #> H4: 0.25 #>  #> --- Transition weights --- #>         H1     H2     H3     H4 #>  H1 0.0000 0.0000 0.6667 0.3333 #>  H2 0.0000 0.0000 0.0000 0.0000 #>  H3 0.5000 0.0000 0.0000 0.5000 #>  H4 1.0000 0.0000 0.0000 0.0000 #>  #> [[3]] #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.0 #> H2: 0.0 #> H3: 0.5 #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  0  0 #>  H2  0  0  0  0 #>  H3  0  0  0  1 #>  H4  0  0  1  0 #>  #> [[4]] #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0 #> H2: 0 #> H3: 1 #> H4: 0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  0  0 #>  H2  0  0  0  0 #>  H3  0  0  0  0 #>  H4  0  0  0  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"obtain-adjusted-significance-levels","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain adjusted significance levels","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"equivalent way obtain rejections adjusting significance levels. hypothesis rejected p-value less equal adjusted significance level. adjusted significance levels calculated order adjusted p-values: \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\), four steps checking rejections. First, \\(H_2\\) rejected adjusted significance level 0.5 * alpha. Second, \\(H_1\\) rejected adjusted significance level 0.75 * alpha, \\(H_2\\) rejected. Third, \\(H_4\\) rejected adjusted significance level 0.5 * alpha, \\(H_1\\) \\(H_2\\) rejected. Fourth finally, \\(H_3\\) rejected adjusted significance level alpha, \\(H_1\\), \\(H_2\\) \\(H_4\\) rejected. results can obtained specifying test_values = TRUE.","code":"test_results_test_values <- graph_test_shortcut(g, p = p_values, alpha = 0.025, test_values = TRUE) test_results_test_values$test_values$results #>    Step Hypothesis     p <= Weight * Alpha Inequality_holds #> H2    1         H2 0.012 <=   0.50 * 0.025             TRUE #> H1    2         H1 0.013 <=   0.75 * 0.025             TRUE #> H4    3         H4 0.005 <=   0.50 * 0.025             TRUE #> H3    4         H3 0.105 <=   1.00 * 0.025            FALSE"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"power-calculation","dir":"Articles","previous_headings":"","what":"Power calculation","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given graph, trial team often interested power trial. single null hypothesis, power probability reject null hypothesis significance level alpha alternative hypothesis true. multiple null hypotheses, multiple versions power. example, power reject least one hypothesis power reject hypotheses, given alternative hypotheses true. graphical multiple comparison procedures, also important understand power reject hypothesis, given multiplicity adjustment. Sometimes, team may want customize definitions power define success. Thus power calculation important aspect trial design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-marginal-power-for-primary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for primary hypotheses","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Assume primary endpoint occurrence unfavorable clinical event. evaluate treatment effect, proportion patients event calculated, lower proportion preferred. Assume proportions 0.181 low high doses, 0.3 control. Using equal randomization among three treatment groups, clinical trial team chooses total sample size 600 200 per group. leads marginal power 80% \\(H_1\\) \\(H_2\\), respectively, using two-sample test difference proportions unpooled variance one-sided significance level 0.025. calculation, use marginal power combine information treatment effect, nuisance parameter, sample sizes hypothesis. Note significance level used marginal power calculation must alpha, used power calculation significance level FWER control. addition, marginal power one--one relationship noncentrality parameter, illustrated .","code":"alpha <- 0.025 prop <- c(0.3, 0.181, 0.181) sample_size <- rep(200, 3) unpooled_variance <- prop[-1] * (1 - prop[-1]) / sample_size[-1] +    prop[1] * (1 - prop[1]) / sample_size[1] noncentrality_parameter_primary <- -(prop[-1] - prop[1]) / sqrt(unpooled_variance) marginal_power_primary <- pnorm(qnorm(alpha, lower.tail = FALSE),                         noncentrality_parameter_primary, 1, lower.tail = FALSE) names(marginal_power_primary) <- c(\"H1\", \"H2\") marginal_power_primary #>        H1        H2  #> 0.8028315 0.8028315"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-marginal-power-for-secondary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for secondary hypotheses","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Assume secondary endpoint change total medication score baseline, continuous outcome. evaluate treatment effect, mean change calculated, greater reduction preferred. Assume mean change baseline reduction 7.5 8.25, respectively low high doses, 5 control. assume known common standard deviation 10. Given sample size 200 per treatment group, marginal power 71% 90% \\(H_3\\) \\(H_4\\), respectively, using two-sample \\(z\\)-test difference means one-sided significance level 0.025.","code":"mean_change <- c(5, 7.5, 8.25) sd <- rep(10, 3) variance <- sd[-1]^2 / sample_size[-1] + sd[1]^2 / sample_size[1] noncentrality_parameter_secondary <- (mean_change[-1] - mean_change[1]) /    sqrt(variance) marginal_power_secondary <- pnorm(qnorm(alpha, lower.tail = FALSE),                         noncentrality_parameter_secondary, 1, lower.tail = FALSE) names(marginal_power_secondary) <- c(\"H3\", \"H4\") marginal_power_secondary #>        H3        H4  #> 0.7054139 0.9014809"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-correlation-structure-to-simulate-test-statistics","dir":"Articles","previous_headings":"Power calculation","what":"Input: Correlation structure to simulate test statistics","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"addition marginal power, also need make assumptions joint distribution test statistics. example, assume follow multivariate normal distribution means defined noncentrality parameters correlation matrix \\(R\\). obtain correlations, helpful understand two types correlations example. correlation two dose-control comparisons endpoint correlation endpoints. former correlation can calculated function sample size. example, correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_3+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. correlation test statistics \\(H_3\\) \\(H_4\\) . hand, correlation endpoints dose-control comparison often estimated based prior knowledge previous trials. Without information, assume \\(\\rho_{13}=\\rho_{24}=0.5\\). practice, one set correlation parameter try multiple values assess sensitivity assumption. Regarding correlation test statistics \\(H_1\\) \\(H_4\\) \\(H_2\\) \\(H_3\\), even difficult estimate. use simple product rule, means correlation product correlations two previously assumed correlations. example, \\(\\rho_{14}=\\rho_{12}*\\rho_{24}\\) \\(\\rho_{23}=\\rho_{12}*\\rho_{13}\\). practice, one may make assumptions instead using product rule.","code":"corr <- matrix(0, nrow = 4, ncol = 4) corr[1, 2] <- corr[3, 4] <- sqrt(sample_size[2] / sum(sample_size[1:2]) *                                     sample_size[3] / sum(sample_size[c(1, 3)])) rho <- 0.5 corr[1, 3] <- corr[2, 4] <- rho corr[1, 4] <- corr[2, 3] <- corr[1, 2] * rho corr <- corr + t(corr) diag(corr) <- 1 colnames(corr) <- hyp_names rownames(corr) <- hyp_names corr #>      H1   H2   H3   H4 #> H1 1.00 0.50 0.50 0.25 #> H2 0.50 1.00 0.25 0.50 #> H3 0.50 0.25 1.00 0.50 #> H4 0.25 0.50 0.50 1.00"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"user-defined-success-criteria","dir":"Articles","previous_headings":"Power calculation","what":"User-defined success criteria","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"mentioned earlier, multiple versions “power” multiple hypotheses. Commonly used “power” definitions include: Local power: probability hypothesis rejected (multiplicity adjustment) Expected . rejections: expected number rejections Power reject 1 : probability reject least one hypothesis Power reject : probability reject hypotheses default outputs graph_calculate_power function. addition, user can customize success criteria define versions “power”.","code":"# Probability to reject H1 H1 <- function(x) x[1] # Expected number of rejections `Expected no. of rejections` <- function(x) x[1] + x[2] + x[3] + x[4] # Probability to reject at least one hypothesis `AtLeast1` <- function(x) x[1] | x[2] | x[3] | x[4] # Probability to reject all hypotheses `All` <- function(x) x[1] & x[2] & x[3] & x[4] # Probability to reject both H1 and H2 `H1andH2` <- function(x) x[1] & x[2] # Probability to reject both hypotheses for the low dose or the high dose `(H1andH3)or(H2andH4)` <- function(x) (x[1] & x[3]) | (x[2] & x[4]) succ <- list(H1, `Expected no. of rejections`, `AtLeast1`, `All`, `H1andH2`,               `(H1andH3)or(H2andH4)`)  succ <- setNames(   succ,   c(\"H1\", \"Expected no. of rejections\", \"AtLeast1\", \"All\", \"H1andH2\",     \"(H1andH3)or(H2andH4)\") )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"output-calculate-power","dir":"Articles","previous_headings":"Power calculation","what":"Output: Calculate power","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given inputs, can calculate power via simulation graphical multiple comparison procedure one-sided significance level alpha=0.025 using sim_n = 1e5 simulations seed sim_seed = 1234. local power 0.758, 0.765, 0.689, 0.570, respectively \\(H_1, \\ldots, H_4\\). Note local power lower marginal power former adjusted multiplicity. power reject least one hypothesis 0.856 power reject hypotheses 0.512. expected number rejections 2.782. last two user-defined success criteria, probability reject \\(H_1\\) \\(H_2\\) 0.667, probability reject least one pair \\((H_1\\) \\(H_3)\\) \\((H_2\\) \\(H_4)\\) 0.747. see detailed outputs simulated p-values rejection decisions hypotheses, specify verbose = TRUE. produce lot outputs. allow flexible printing functions, user can change following: indented space default setting indent = 2 precision numeric values (.e., number significant digits) default setting precision = 4","code":"output <- graph_calculate_power(g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   marginal_power = c(marginal_power_primary, marginal_power_secondary),   sim_success = succ,   sim_seed = 1234 ) output #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                       H1     H2     H3     H4 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 #>  #>   Correlation:      H1   H2   H3   H4 #>                H1 1.00 0.50 0.50 0.25 #>                H2 0.50 1.00 0.25 0.50 #>                H3 0.50 0.25 1.00 0.50 #>                H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4 #>                  Local power: 0.7640 0.7589 0.5677 0.6913 #>  #>   Expected no. of rejections: 2.782 #>    Power to reject 1 or more: 0.8556 #>          Power to reject all: 0.5121 #>  #>              Power to reject:      H1   Expected no. of rejections   AtLeast1 #>                                0.7640                       2.7818     0.8556 #>     All   H1andH2   (H1andH3)or(H2andH4) #>  0.5121    0.6673                 0.7470 verbose_output <- graph_calculate_power(g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   marginal_power = c(marginal_power_primary, marginal_power_secondary),   sim_success = succ,   sim_seed = 1234,   verbose = TRUE )  print(verbose_output) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                       H1     H2     H3     H4 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 #>  #>   Correlation:      H1   H2   H3   H4 #>                H1 1.00 0.50 0.50 0.25 #>                H2 0.50 1.00 0.25 0.50 #>                H3 0.50 0.25 1.00 0.50 #>                H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4 #>                  Local power: 0.7640 0.7589 0.5677 0.6913 #>  #>   Expected no. of rejections: 2.782 #>    Power to reject 1 or more: 0.8556 #>          Power to reject all: 0.5121 #>  #>              Power to reject:      H1   Expected no. of rejections   AtLeast1 #>                                0.7640                       2.7818     0.8556 #>     All   H1andH2   (H1andH3)or(H2andH4) #>  0.5121    0.6673                 0.7470 #>  #> Simulation details ($details) -------------------------------------------------- #>     p_sim_H1  p_sim_H2  p_sim_H3  p_sim_H4 rej_H1 rej_H2 rej_H3 rej_H4 #>    3.082e-02 1.207e-02 4.119e-03 9.324e-02  FALSE   TRUE  FALSE  FALSE #>    7.934e-04 6.499e-04 2.452e-02 2.966e-03   TRUE   TRUE   TRUE   TRUE #>    3.030e-02 5.954e-02 5.431e-02 2.626e-02  FALSE  FALSE  FALSE  FALSE #>    9.743e-03 3.319e-03 7.417e-04 4.025e-04   TRUE   TRUE   TRUE   TRUE #>    1.971e-02 8.616e-03 1.642e-02 2.418e-07   TRUE   TRUE   TRUE   TRUE #>    3.121e-03 6.702e-03 1.374e-02 2.752e-04   TRUE   TRUE   TRUE   TRUE #>    3.022e-02 1.424e-01 6.038e-03 2.117e-02  FALSE  FALSE  FALSE  FALSE #>    2.498e-03 2.940e-02 4.143e-04 2.208e-03   TRUE  FALSE   TRUE  FALSE #>    6.190e-02 3.873e-02 3.166e-01 5.700e-02  FALSE  FALSE  FALSE  FALSE #>    3.678e-01 1.896e-01 7.023e-02 1.190e-02  FALSE  FALSE  FALSE  FALSE #>   ... (Use `print(x, rows = <nn>)` for more)  print(verbose_output, indent = 4, precision = 6) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>     Initial graph #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2: 0.5 #>     H3: 0.0 #>     H4: 0.0 #>  #>     --- Transition weights --- #>         H1  H2  H3  H4 #>     H1 0.0 0.5 0.5 0.0 #>     H2 0.5 0.0 0.0 0.5 #>     H3 0.0 1.0 0.0 0.0 #>     H4 1.0 0.0 0.0 0.0 #>  #>     Alpha = 0.025 #>  #>     Test types #>     bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>     Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                           H1       H2       H3       H4 #>     Marginal power: 0.802831 0.802831 0.705414 0.901481 #>  #>     Correlation:      H1   H2   H3   H4 #>                  H1 1.00 0.50 0.50 0.25 #>                  H2 0.50 1.00 0.25 0.50 #>                  H3 0.50 0.25 1.00 0.50 #>                  H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                      H1      H2      H3      H4 #>                    Local power: 0.76396 0.75887 0.56767 0.69133 #>  #>     Expected no. of rejections: 2.78183 #>      Power to reject 1 or more: 0.85557 #>            Power to reject all: 0.51205 #>  #>                Power to reject:       H1   Expected no. of rejections #>                                  0.76396                      2.78183 #>    AtLeast1     All   H1andH2   (H1andH3)or(H2andH4) #>     0.85557 0.51205   0.66726                0.74695 #>  #> Simulation details ($details) -------------------------------------------------- #>         p_sim_H1    p_sim_H2    p_sim_H3    p_sim_H4 rej_H1 rej_H2 rej_H3 rej_H4 #>      3.08204e-02 1.20654e-02 4.11858e-03 9.32434e-02  FALSE   TRUE  FALSE  FALSE #>      7.93372e-04 6.49905e-04 2.45178e-02 2.96560e-03   TRUE   TRUE   TRUE   TRUE #>      3.02992e-02 5.95396e-02 5.43083e-02 2.62583e-02  FALSE  FALSE  FALSE  FALSE #>      9.74332e-03 3.31857e-03 7.41721e-04 4.02469e-04   TRUE   TRUE   TRUE   TRUE #>      1.97135e-02 8.61618e-03 1.64183e-02 2.41833e-07   TRUE   TRUE   TRUE   TRUE #>      3.12066e-03 6.70231e-03 1.37441e-02 2.75170e-04   TRUE   TRUE   TRUE   TRUE #>      3.02208e-02 1.42376e-01 6.03828e-03 2.11740e-02  FALSE  FALSE  FALSE  FALSE #>      2.49757e-03 2.94026e-02 4.14273e-04 2.20779e-03   TRUE  FALSE   TRUE  FALSE #>      6.18994e-02 3.87257e-02 3.16613e-01 5.69979e-02  FALSE  FALSE  FALSE  FALSE #>      3.67792e-01 1.89598e-01 7.02265e-02 1.18965e-02  FALSE  FALSE  FALSE  FALSE #>     ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dong Xi. Author, maintainer. Ethan Brockmann. Author. Gilead Biostatistics. Copyright holder, funder. Atorus Research LLC. Copyright holder.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xi, D.; Brockmann, E. (2023). graphicalMCP: Graph-based multiple comparison procedures. version 0.1.0. Gilead Sciences, Inc. Foster City, California. https://github.com/Gilead-BioStats/graphicalMCP Frank Bretz, Martin Posch, Ekkehard Glimm, Florian Klinglmueller, Willi Maurer, Kornelius Rohmeyer (2011), Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes parametric tests. Biometrical Journal 53 (6), pages 894--913, Wiley.","code":"@Manual{,   title = {{graphicalMCP}: Graph-based multiple comparison procedures.},   author = {Dong Xi and Ethan Brockmann},   organization = {Gilead Sciences, Inc},   note = {version 0.1.0},   year = {2023},   url = {https://github.com/Gilead-BioStats/graphicalMCP}, } @Article{,   title = {Graphical approaches for multiple comparison procedures using weighted Bonferroni, Simes or parametric tests},   author = {Frank Bretz and Martin Posch and Ekkehard Glimm and Florian Klinglmueller and Willi Maurer and Kornelius Rohmeyer},   journal = {Biometrical Journal},   year = {2011},   publisher = {Wiley},   volume = {53},   number = {6},   pages = {894--913},   url = {http://onlinelibrary.wiley.com/doi/10.1002/bimj.201000239/full}, }"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Graphical Approach for Multiple Comparison Procedures","text":"multiple comparison procedure (MCP) statistical analysis method allows assessing efficacy multiple endpoints, dependent , single clinical trial. Endpoints can different doses, treatment different conditions, combined superiority & non-inferiority testing, many others. key feature MCPs strongly control type-error rate level alpha. Bretz et al (2011), graphical method MCPs described, separates weighting clinical endpoints particular statistical test used assess endpoint. graphical approach can also helpful communicating study design clinical teams. package low-dependency implementation methods.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphical Approach for Multiple Comparison Procedures","text":"graphicalMCP CRAN, install GitHub ","code":"# install.packages(\"pak\") pak::pak(\"Gilead-BioStats/graphicalMCP@dev\")"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"initial-graph","dir":"","previous_headings":"Basic usage","what":"Initial graph","title":"Graphical Approach for Multiple Comparison Procedures","text":"base object graphicalMCP initial_graph, weighted, directed graph represented matrix transition (edge) weights, vector hypothesis (vertex) weights.","code":"library(graphicalMCP)  # A graphical multiple comparison procedure with two primary hypotheses (H1 # and H2) and two secondary hypotheses (H3 and H4) # See Figure 1 in Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, # W., & Rohmeyer, K. (2011). Graphical approaches for multiple comparison # procedures using weighted Bonferroni, Simes, or parametric tests. Biometrical # Journal, 53(6), 894-913. hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\") example_graph <- graph_create(hypotheses, transitions, hyp_names)  plot(example_graph, layout = \"grid\", asp = .7)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"update-graph","dir":"","previous_headings":"Basic usage","what":"Update graph","title":"Graphical Approach for Multiple Comparison Procedures","text":"Hypotheses can deleted MCP using graph_update(). Updated weights transitions calculated according weighting strategy Algorithm 1 Bretz et al (2011). distinguish deleting rejecting glossary.","code":"graph_update(example_graph, keep = c(TRUE, FALSE, FALSE, TRUE))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"generate-weights","dir":"","previous_headings":"Basic usage","what":"Generate weights","title":"Graphical Approach for Multiple Comparison Procedures","text":"weights sub-graphs can calculated graph_generate_weights(). uses efficient code hood graph_update() order performant larger graphs. information closure can found [Link closure vignette].","code":"graph_generate_weights(example_graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"test-hypotheses","dir":"","previous_headings":"Basic usage","what":"Test hypotheses","title":"Graphical Approach for Multiple Comparison Procedures","text":"Bonferroni testing via shortcut method supported graphicalMCP. test can performed graph_test_shortcut(), generates report showing graph & test results. See insight hypothesis rejected setting verbose test_values flags. details shortcut testing can found [link shortcut vignette]. graph can also tested using Simes- parametric-based testing using closure test. types tests added time, combination tests can used groups hypotheses. Additional details closure testing can found [link closed test vignette].","code":"graph_test_shortcut(example_graph, p = c(.01, .03, .02, .01), alpha = .025) graph_test_closure(   example_graph,   p = c(.01, .03, .02, .01),   alpha = .025,   test_types = c(\"bonferroni\", \"simes\"),   groups = list(1:2, 3:4) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"power-simulations","dir":"","previous_headings":"Basic usage","what":"Power simulations","title":"Graphical Approach for Multiple Comparison Procedures","text":"’s always obvious graph structure easy difficult reject hypothesis. One way understand better run power simulation, many p-values simulated, graph tested . valid test types & hypothesis groupings valid power simulations well. Power simulations discussed [shortcut testing vignette] [closure testing vignette].","code":"graph_calculate_power(   example_graph,   sim_n = 1e5,   marginal_power = c(.9, .9, .8, .8) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Graphical Approach for Multiple Comparison Procedures","text":"methods originally implemented gMCP package, still available CRAN today. also lighter version gMCP implemented gMCPmini successor, gMCPLite. two contain subset original functionality, remove rJava dependency add plotting functionality based ggplot2. However, development ceased original package, hope re-implement methods general testing framework; fewer dependencies, particular shedding Java dependency; simpler, transparent S3 classes; improvements accuracy parametric Simes test methods. portion Simes testing also implemented lrstat package (install.packages(\"lrstat\")).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Graphical Approach for Multiple Comparison Procedures","text":"","code":"citation(\"graphicalMCP\")"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"glossary-of-terms","dir":"","previous_headings":"","what":"Glossary of terms","title":"Graphical Approach for Multiple Comparison Procedures","text":"package seeks accurate performant, course. beyond , much thought put readability code. Whether read user validating methods, developer extending package new uses, contributor helping enhance core functionality, hope code contained can serve educational document grow people’s understanding graphical approach multiple comparison procedures. end, several entities encountered world graphical MCPs define . used internal code package, inputs output one exported functions. believe definitions clarified improved, please contact package authors submit issue GitHub repository. set weights, adjusted according testing algorithm: Bonferroni: change Simes: Sum weights hypotheses smaller p-values Parametric: Multiply weights c-value, based joint distribution power reject null hypothesis full alpha. Closely related non-centrality parameter, mean null hypothesis underlying multivariate normal distribution: ncp = qnorm(1 - alpha) - qnorm(1 - marginal_power)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate adjusted p-values — adjust_p_bonferroni","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Calculate adjusted p-values","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"adjust_p_bonferroni(p, hypotheses)  adjust_p_parametric(p, hypotheses, corr = NULL)  adjust_p_simes(p, hypotheses)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"p named numeric vector p-values hypotheses named numeric vector hypothesis weights corr (Optional) numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"single adjusted p-value given group","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"set.seed(22723)  w <- c(\"H1\" = .75, \"H2\" = .25, \"H3\" = 0) p <- c(\"H1\" = .019, \"H2\" = .025, \"H3\" = .05)  graphicalMCP:::adjust_p_bonferroni(p, w) #> [1] 0.02533333 graphicalMCP:::adjust_p_simes(p, w) #> [1] 0.025  corr1 <- diag(3) corr2 <- corr1 corr2[lower.tri(corr2)] <- corr2[upper.tri(corr2)] <- runif(3, -1, 1)  # No correlation graphicalMCP:::adjust_p_parametric(p, w, corr1) #> [1] 0.025213  # Uniform random pairwise correlations graphicalMCP:::adjust_p_parametric(p, w, corr2) #> [1] 0.02196006"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"weights created graph_generate_weights() work immediately Bonferroni testing, parametric Simes testing require additional calculations. adjust_weights_*() functions apply parametric Simes weight increases get updated weights testing. also subset weights columns appropriate groups","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"adjust_weights_parametric(weighting_strategy, corr, alpha, groups)  adjust_weights_simes(weighting_strategy, p, groups)  c_value_function(x, hypotheses, corr, alpha)  solve_c_parametric(hypotheses, corr, alpha)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"weighting_strategy parametric, compact representation graph_generate_weights() output, missing hypotheses get missing value weights, h-vectors dropped. Simes, just weights graph_generate_weights() output corr numeric matrix correlations hypotheses' test statistics alpha numeric scalar specifying global significance level testing groups list numeric vectors specifying hypotheses test together p numeric vector p-values x root solve stats::uniroot() hypotheses numeric vector hypothesis weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Outputs: adjust_weights_*(), matrix shape weighting_strategy, weights adjusted according specified adjustment method c_value_function(), \\(c_{J_h}\\) value given group, according Formula 6 Xi et al. (2017).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"p <- 1:6 / 200  g <- bonferroni_holm(6) gw_large <- graph_generate_weights(g)  gw_0 <- gw_large[, 7:12] gw <- ifelse(gw_large[, 1:6], gw_0, NA)  graphicalMCP:::adjust_weights_parametric(gw, diag(6), .05, list(1:3)) #>           H1        H2        H3 #> 1  0.1680752 0.1680752 0.1680752 #> 2  0.2020340 0.2020340 0.2020340 #> 3  0.2020340 0.2020340 0.2020340 #> 4  0.2531918 0.2531918 0.2531918 #> 5  0.2020340 0.2020340 0.2020340 #> 6  0.2531918 0.2531918 0.2531918 #> 7  0.2531918 0.2531918 0.2531918 #> 8  0.3390485 0.3390485 0.3390485 #> 9  0.2010082 0.2010082        NA #> 10 0.2515823 0.2515823        NA #> 11 0.2515823 0.2515823        NA #> 12 0.3361584 0.3361584        NA #> 13 0.2515823 0.2515823        NA #> 14 0.3361584 0.3361584        NA #> 15 0.3361584 0.3361584        NA #> 16 0.5064113 0.5064113        NA #> 17 0.2010082        NA 0.2010082 #> 18 0.2515823        NA 0.2515823 #> 19 0.2515823        NA 0.2515823 #> 20 0.3361584        NA 0.3361584 #> 21 0.2515823        NA 0.2515823 #> 22 0.3361584        NA 0.3361584 #> 23 0.3361584        NA 0.3361584 #> 24 0.5064113        NA 0.5064113 #> 25 0.2500000        NA        NA #> 26 0.3333333        NA        NA #> 27 0.3333333        NA        NA #> 28 0.5000000        NA        NA #> 29 0.3333333        NA        NA #> 30 0.5000000        NA        NA #> 31 0.5000000        NA        NA #> 32 1.0000000        NA        NA #> 33        NA 0.2010082 0.2010082 #> 34        NA 0.2515823 0.2515823 #> 35        NA 0.2515823 0.2515823 #> 36        NA 0.3361584 0.3361584 #> 37        NA 0.2515823 0.2515823 #> 38        NA 0.3361584 0.3361584 #> 39        NA 0.3361584 0.3361584 #> 40        NA 0.5064113 0.5064113 #> 41        NA 0.2500000        NA #> 42        NA 0.3333333        NA #> 43        NA 0.3333333        NA #> 44        NA 0.5000000        NA #> 45        NA 0.3333333        NA #> 46        NA 0.5000000        NA #> 47        NA 0.5000000        NA #> 48        NA 1.0000000        NA #> 49        NA        NA 0.2500000 #> 50        NA        NA 0.3333333 #> 51        NA        NA 0.3333333 #> 52        NA        NA 0.5000000 #> 53        NA        NA 0.3333333 #> 54        NA        NA 0.5000000 #> 55        NA        NA 0.5000000 #> 56        NA        NA 1.0000000 #> 57        NA        NA        NA #> 58        NA        NA        NA #> 59        NA        NA        NA #> 60        NA        NA        NA #> 61        NA        NA        NA #> 62        NA        NA        NA #> 63        NA        NA        NA graphicalMCP:::adjust_weights_simes(gw_0, p, list(4:6)) #>           H4        H5        H6 #> 1  0.1666667 0.3333333 0.5000000 #> 2  0.2000000 0.4000000 0.4000000 #> 3  0.2000000 0.2000000 0.4000000 #> 4  0.2500000 0.2500000 0.2500000 #> 5  0.0000000 0.2000000 0.4000000 #> 6  0.0000000 0.2500000 0.2500000 #> 7  0.0000000 0.0000000 0.2500000 #> 8  0.0000000 0.0000000 0.0000000 #> 9  0.2000000 0.4000000 0.6000000 #> 10 0.2500000 0.5000000 0.5000000 #> 11 0.2500000 0.2500000 0.5000000 #> 12 0.3333333 0.3333333 0.3333333 #> 13 0.0000000 0.2500000 0.5000000 #> 14 0.0000000 0.3333333 0.3333333 #> 15 0.0000000 0.0000000 0.3333333 #> 16 0.0000000 0.0000000 0.0000000 #> 17 0.2000000 0.4000000 0.6000000 #> 18 0.2500000 0.5000000 0.5000000 #> 19 0.2500000 0.2500000 0.5000000 #> 20 0.3333333 0.3333333 0.3333333 #> 21 0.0000000 0.2500000 0.5000000 #> 22 0.0000000 0.3333333 0.3333333 #> 23 0.0000000 0.0000000 0.3333333 #> 24 0.0000000 0.0000000 0.0000000 #> 25 0.2500000 0.5000000 0.7500000 #> 26 0.3333333 0.6666667 0.6666667 #> 27 0.3333333 0.3333333 0.6666667 #> 28 0.5000000 0.5000000 0.5000000 #> 29 0.0000000 0.3333333 0.6666667 #> 30 0.0000000 0.5000000 0.5000000 #> 31 0.0000000 0.0000000 0.5000000 #> 32 0.0000000 0.0000000 0.0000000 #> 33 0.2000000 0.4000000 0.6000000 #> 34 0.2500000 0.5000000 0.5000000 #> 35 0.2500000 0.2500000 0.5000000 #> 36 0.3333333 0.3333333 0.3333333 #> 37 0.0000000 0.2500000 0.5000000 #> 38 0.0000000 0.3333333 0.3333333 #> 39 0.0000000 0.0000000 0.3333333 #> 40 0.0000000 0.0000000 0.0000000 #> 41 0.2500000 0.5000000 0.7500000 #> 42 0.3333333 0.6666667 0.6666667 #> 43 0.3333333 0.3333333 0.6666667 #> 44 0.5000000 0.5000000 0.5000000 #> 45 0.0000000 0.3333333 0.6666667 #> 46 0.0000000 0.5000000 0.5000000 #> 47 0.0000000 0.0000000 0.5000000 #> 48 0.0000000 0.0000000 0.0000000 #> 49 0.2500000 0.5000000 0.7500000 #> 50 0.3333333 0.6666667 0.6666667 #> 51 0.3333333 0.3333333 0.6666667 #> 52 0.5000000 0.5000000 0.5000000 #> 53 0.0000000 0.3333333 0.6666667 #> 54 0.0000000 0.5000000 0.5000000 #> 55 0.0000000 0.0000000 0.5000000 #> 56 0.0000000 0.0000000 0.0000000 #> 57 0.3333333 0.6666667 1.0000000 #> 58 0.5000000 1.0000000 1.0000000 #> 59 0.5000000 0.5000000 1.0000000 #> 60 1.0000000 1.0000000 1.0000000 #> 61 0.0000000 0.5000000 1.0000000 #> 62 0.0000000 1.0000000 1.0000000 #> 63 0.0000000 0.0000000 1.0000000"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"Convert gMCP graphicalMCP graph classes","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"","code":"as_initial_graph(graph)  # S3 method for graphMCP as_initial_graph(graph)  # S3 method for igraph as_initial_graph(graph)  as_graphMCP(graph)  # S3 method for initial_graph as_graphMCP(graph)  as_igraph(graph)  # S3 method for initial_graph as_igraph(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"graph initial_graph object graphicalMCP, graphMCP object gMCP, igraph object igraph, depending direction converting","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"as_graphMCP(), gMCP graph object, as_igraph(), igraph object, as_initial_graph(), graphicalMCP graph object","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"","code":"g1 <- random_graph(5)  if (requireNamespace(\"gMCP\", quietly = TRUE)) {   g2 <- as_graphMCP(g1)    all.equal(g1, as_initial_graph(g2)) } #> [1] TRUE  if (requireNamespace(\"igraph\", quietly = TRUE)) {   g3 <- as_igraph(g1)    all.equal(g1, as_initial_graph(g3)) } #> igraph method #>  [1] \"names for target but not for current\"                              #>  [2] \"Attributes: < Component “class”: 1 string mismatch >\"              #>  [3] \"Length mismatch: comparison on first 2 components\"                 #>  [4] \"Component 1: names for target but not for current\"                 #>  [5] \"Component 1: Numeric: lengths (5, 1) differ\"                       #>  [6] \"Component 2: Modes: numeric, logical\"                              #>  [7] \"Component 2: Lengths: 25, 1\"                                       #>  [8] \"Component 2: Attributes: < Modes: list, NULL >\"                    #>  [9] \"Component 2: Attributes: < Lengths: 2, 0 >\"                        #> [10] \"Component 2: Attributes: < names for target but not for current >\" #> [11] \"Component 2: Attributes: < current is not list-like >\"             #> [12] \"Component 2: target is matrix, current is logical\""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Test hypotheses with the adjusted significance method — test_values_bonferroni","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Test hypotheses adjusted significance method","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"test_values_bonferroni(p, hypotheses, alpha, intersection = NA)  test_values_parametric(p, hypotheses, alpha, intersection = NA, corr)  test_values_simes(p, hypotheses, alpha, intersection = NA)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"p numeric vector p-values hypotheses numeric vector hypothesis hypotheses alpha numeric scalar specifying global significance level testing intersection numeric scalar used track intersection test values corr numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"data frame columns specifying values used calculate hypothesis test","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"w <- c(H1 = .5, H2 = .5, H3 = 0, H4 = 0)  p <- c(.024, .01, .026, .027)  graphicalMCP:::test_values_bonferroni(p, w, .05) #>    Intersection Hypothesis       Test     p <= c_value * Weight * Alpha #> H1           NA         H1 bonferroni 0.024 <=              0.5 *  0.05 #> H2           NA         H2 bonferroni 0.010 <=              0.5 *  0.05 #> H3           NA         H3 bonferroni 0.026 <=              0.0 *  0.05 #> H4           NA         H4 bonferroni 0.027 <=              0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_parametric(p, w, .05, corr = diag(4)) #>    Intersection Hypothesis       Test     p <=  c_value * Weight * Alpha #> H1           NA         H1 parametric 0.024 <= 1.012823 *    0.5 *  0.05 #> H2           NA         H2 parametric 0.010 <= 1.012823 *    0.5 *  0.05 #> H3           NA         H3 parametric 0.026 <= 1.012823 *    0.0 *  0.05 #> H4           NA         H4 parametric 0.027 <= 1.012823 *    0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_simes(p, w, .05) #>   Intersection Hypothesis  Test     p <= c_value * Weight * Alpha #> 1           NA         H1 simes 0.024 <=              1.0 *  0.05 #> 2           NA         H2 simes 0.010 <=              0.5 *  0.05 #> 3           NA         H3 simes 0.026 <=              1.0 *  0.05 #> 4           NA         H4 simes 0.027 <=              1.0 *  0.05 #>   Inequality_holds #> 1             TRUE #> 2             TRUE #> 3             TRUE #> 4             TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example graphs from a selection of papers — bonferroni_holm","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Example graphs selection papers","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(num_hyps, hyp_names = NULL)  huque_alosh_bhore_2011(hyp_names = NULL)  wiens_dmitrienko_2005(hyp_names = NULL)  fixed_sequence(num_hyps = 3, hyp_names = NULL)  fallback(hypotheses = c(1, 0, 0), hyp_names = NULL)  simple_successive_1(hyp_names = NULL)  simple_successive_2(hyp_names = NULL)  random_graph(num_hyps, hyp_names = NULL)  complex_example_1(hyp_names = NULL)  complex_example_2(hyp_names = NULL)  complex_example_2(hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example graphs from a selection of papers — bonferroni_holm","text":"num_hyps Number vertices graph hyp_names Optional names hypotheses (Must length num_hyps NULL) hypotheses Hypothesis weights fallback procedure","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example graphs from a selection of papers — bonferroni_holm","text":"S3 object returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(3, hyp_names = paste(\"dose\", letters[1:3])) #> Initial graph #>  #> --- Hypothesis weights --- #> dose a: 0.3333 #> dose b: 0.3333 #> dose c: 0.3333 #>  #> --- Transition weights --- #>         dose a dose b dose c #>  dose a    0.0    0.5    0.5 #>  dose b    0.5    0.0    0.5 #>  dose c    0.5    0.5    0.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain hypothesis rejection probabilities — graph_calculate_power","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"often difficult tell likely given hypothesis rejected. power simulations useful. set distribution parameters, many p-values generated, graph tested one. testing strategy can used. probabilities calculated hypothesis rejected, well additional probabilities expected rejections probability rejecting hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"graph_calculate_power(   graph,   alpha = 0.025,   test_groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   test_corr = rep(list(NA), length(test_types)),   sim_n = 100,   marginal_power = rep(alpha, length(graph$hypotheses)),   sim_corr = diag(length(graph$hypotheses)),   sim_success = NULL,   sim_seed = NULL,   force_closure = FALSE,   verbose = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"graph initial graph returned graph_create() alpha numeric scalar specifying global significance level testing test_groups list numeric vectors specifying hypotheses test together test_types character vector tests apply given groups test_corr Optional test_types parametric. numeric matrix correlations hypotheses' test statistics sim_n integer scalar specifying many simulations run marginal_power numeric vector mean values use simulating p-values. Exactly one mean per hypothesis needed, p-values sampled multivariate normal distribution. See Details sim_corr numeric matrix correlations hypotheses used sample multivariate normal distribution generate p-values sim_success list user-defined functions apply power results. Functions must take one simulation's logical vector results input, return length-one logical vector. instance, \"success\" means rejecting hypotheses 1 2, use sim_success = list(\"1 2\" = function(x) x[1] && x[2]). list named, function body used name. Lambda functions also work, e.g. sim_success = list(\\(x) x[3] || x[4]) sim_seed (Optional) Random seed set simulating p-values. Set use consistent set p simulations across power calculations force_closure logical scalar used determine whether full closure test used Bonferroni testing. Ignored tests non-Bonferroni verbose logical scalar specifying whether full matrix simulations test results included output ","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"list five elements power_local - rejection proportion hypothesis individually power_expected - average number hypotheses rejected single simulation power_at_least_1 - proportion simulations reject hypothesis power_all - proportion simulations reject hypotheses power_success - proportion simulations reject hypotheses specified sim_success","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"parameters normal distribution set marginal_power (means) sim_corr (correlation test statistics). mean hypothesis set marginal power $$d_i=P_{\\xi_i}(p_i\\leq\\alpha)$$ \\(\\xi_i\\) non-centrality parameter. correlation test statistics induced study design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"success","dir":"Reference","previous_headings":"","what":"Success","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Success mean something different trial, lot flexibility sim_success parameter. However, flexibility means little validation inputs. user make sure function(s) passed mean think. implementation perspective, function applied row-wise matrix test results simulation, resulting sim_n length vector. mean vector returned \"Probability success\"","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"par_gate <- simple_successive_1()  # The default is to test all hypotheses with: Bonferroni testing at alpha # level .025, 0 mean under the alternative, and 0 correlation between # hypotheses under the alternative # The default of 100 simulations will usually need to be increased graph_calculate_power(par_gate, sim_n = 1e5) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01201 0.01166 0.00016 0.00019 #>  #>   Expected no. of rejections: 0.02402 #>    Power to reject 1 or more: 0.02349 #>          Power to reject all: 0 #>   # But any test group/type combination that works for [graph_test_closure()] # can be used graph_calculate_power(   par_gate,   alpha = .025,   test_groups = list(1:2, 3:4),   test_types = c(\"s\", \"p\"),   test_corr = list(NA, diag(2)),   sim_n = 1e5,   sim_success = list(     function(.) .[1] || .[2],     function(.) .[1] && .[2]   ) ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:    H3 H4 #>                                   H3  1  0 #>                                   H4  0  1 #>  #>   Test types #>        simes: (H1, H2) #>   parametric: (H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01203 0.01215 0.00018 0.00021 #>  #>   Expected no. of rejections: 0.02457 #>    Power to reject 1 or more: 0.02403 #>          Power to reject all: 0 #>  #>              Power to reject:    .[1] || .[2]   .[1] && .[2] #>                                       0.02403        0.00015 #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a graph representing a multiple comparison procedure — graph_create","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"multiple comparison procedure graph can represented 1) vector initial hypothesis weights, 2) matrix initial transition weights. function creates initial graph object using vector matrix. also validates inputs make sure combine form valid graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"graph_create(hypotheses, transitions, hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"hypotheses numeric vector hypothesis weights initial graphical multiple comparison procedure. Must vector values 0 & 1 (inclusive). length match row column lengths transitions. sum hypothesis weights exceed 1 transitions numeric matrix transition weights hypotheses initial graphical multiple comparison procedure. Must square matrix values 0 & 1 (inclusive). row column lengths match length hypotheses. row (Transition weights leaving hypothesis) can sum 1. diagonal (Transition weights hypothesis ) must 0s hyp_names (Optional) character vector hypothesis names. provided, names hypotheses transitions used. names specified, hypotheses named sequentially H1, H2, ...","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"S3 object class initial_graph. underlying structure list elements hypotheses transitions","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"validations performed : Weights numeric Length hypotheses dimensions transitions Explicit hyp_names override names hypotheses transitions Hypothesis weights must non-negative sum 1 Transition weights matrix: Diagonal must 1 Rows must sum 1 Values must non-negative","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"# A graphical multiple comparison procedure with two primary hypotheses (H1 # and H2) and two secondary hypotheses (H3 and H4) # See Figure 1 in Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, # W., & Rohmeyer, K. (2011). Graphical approaches for multiple comparison # procedures using weighted Bonferroni, Simes, or parametric tests. # Biometrical Journal, 53(6), 894-913. hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\") g <- graph_create(hypotheses, transitions, hyp_names) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Explicit names override names in `hypotheses` (with a warning) hypotheses <- c(h1 = 0.5, h2 = 0.5, h3 = 0, h4 = 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions, hyp_names) #> Warning: Hypothesis names specified - overriding names in #>                     `hypotheses` and `transitions` g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Explicit names override names in `transitions` (with a warning) hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   h1 = c(0, 0, 1, 0),   h2 = c(0, 0, 0, 1),   h3 = c(0, 1, 0, 0),   h4 = c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions, hyp_names) #> Warning: Hypothesis names specified - overriding names in #>                     `hypotheses` and `transitions` g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Use names in `hypotheses` hypotheses <- c(H1 = 0.5, H2 = 0.5, H3 = 0, H4 = 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Use names in `transitions` hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   H1 = c(0, 0, 1, 0),   H2 = c(0, 0, 0, 1),   H3 = c(0, 1, 0, 0),   H4 = c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # When names are not specified, hypotheses are numbered sequentially as # H1, H2, ... hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weights for the closure of a graph — graph_generate_weights","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"closure graph set sub-graphs, intersections hypotheses, graph. Weights sub-graph calculated using weighting strategy defined Bretz et al (2011).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"graph_generate_weights(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"graph initial graph returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"numeric matrix intersection hypothesis weights. row corresponds single intersection hypothesis. first half columns indicate hypotheses included given intersection hypothesis, second half columns weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Much thought given performance code, memory time usage can grow quickly graph size grows. systems used testing, size 10 graph median run time 20-60 ms. Run time increases rate O(2 ^ n), e.g. size 5 graph takes approximately twice long run size 4 graph. See vignette(\"generate-weights-performance\") detailed analysis explanation","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"par_gate <- graph_create(   hypotheses = c(.5, .5, 0, 0),   transitions = rbind(     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   ) )  graph_generate_weights(par_gate) #>    H1 H2 H3 H4  H1  H2  H3  H4 #> 1   1  1  1  1 0.5 0.5 0.0 0.0 #> 2   1  1  1  0 0.5 0.5 0.0 0.0 #> 3   1  1  0  1 0.5 0.5 0.0 0.0 #> 4   1  1  0  0 0.5 0.5 0.0 0.0 #> 5   1  0  1  1 0.5 0.0 0.0 0.5 #> 6   1  0  1  0 1.0 0.0 0.0 0.0 #> 7   1  0  0  1 0.5 0.0 0.0 0.5 #> 8   1  0  0  0 1.0 0.0 0.0 0.0 #> 9   0  1  1  1 0.0 0.5 0.5 0.0 #> 10  0  1  1  0 0.0 0.5 0.5 0.0 #> 11  0  1  0  1 0.0 1.0 0.0 0.0 #> 12  0  1  0  0 0.0 1.0 0.0 0.0 #> 13  0  0  1  1 0.0 0.0 0.5 0.5 #> 14  0  0  1  0 0.0 0.0 1.0 0.0 #> 15  0  0  0  1 0.0 0.0 0.0 1.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete hypotheses from a graph — graph_update","title":"Delete hypotheses from a graph — graph_update","text":"always obvious graph's weights look like deleting one hypotheses. graph_generate_weights() calculates sub-graphs' hypothesis weights, graph_update() gives detailed view single set deletions, including transition weights well.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete hypotheses from a graph — graph_update","text":"","code":"graph_update(graph, keep)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete hypotheses from a graph — graph_update","text":"graph initial graph returned graph_create() keep logical integer vector, denoting hypotheses keep/delete. entry FALSE (0) corresponds deletion, TRUE (1) corresponds keeping hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete hypotheses from a graph — graph_update","text":"object class updated_graph 3 elements initial graph object Boolean vector indicating hypotheses kept/deleted updated graph object specific hypotheses deleted","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete hypotheses from a graph — graph_update","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete hypotheses from a graph — graph_update","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions)  # Delete the second hypothesis graph_update(g, c(TRUE, FALSE, TRUE, TRUE)) #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0 #>  #> -------------------------------------------------------------------------------- #>  #> --- Hypotheses kept --- #>    H1    H2   H3   H4 #>  TRUE FALSE TRUE TRUE #>  #> -------------------------------------------------------------------------------- #>  #> Updated graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.0 #> H3: 0.0 #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  0 #>  H3  0  0  0  1 #>  H4  1  0  0  0 # Equivalent # graph_update(g, c(1, 0, 1, 1))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"multiple comparison procedure (multiple test procedure) statistical analysis method determining efficacy multiple drugs, multiple doses drug, single clinical trial. (Bretz et al., 2011) laid graph-based approach multiple comparison procedures, weights vertices edges graph determined independently particular statistical test used assess results. low-dependency implementation methods described subsequent papers.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"Maintainer: Dong Xi dong.xi@gilead.com Authors: Ethan Brockmann ethan.brockmann@atorusresearch.com contributors: Gilead Biostatistics [copyright holder, funder] Atorus Research LLC [copyright holder]","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 plot method for the class initial_graph — plot.initial_graph","title":"S3 plot method for the class initial_graph — plot.initial_graph","text":"S3 plot method class initial_graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 plot method for the class initial_graph — plot.initial_graph","text":"","code":"# S3 method for initial_graph plot(   x,   ...,   layout = igraph::layout_nicely,   nrow = NULL,   ncol = NULL,   edge_curves = NULL,   precision = 4,   eps = 0.001,   background_color = \"white\",   margins = c(0, 0, 0, 0) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 plot method for the class initial_graph — plot.initial_graph","text":"x initial graph returned graph_create() ... arguments passed igraph::plot.igraph() layout igraph layout specification (See ?igraph.plotting), \"grid\", lays hypotheses left--right, top--bottom nrow rows ncol columns. nrow integer scalar specifying number rows vertex grid. row columns counts specified, vertices laid close square possible. ncol integer scalar specifying number columns vertex grid. row columns counts specified, vertices laid close square possible. edge_curves named numeric vector specifying curvature edges. Edge pairs (two vertices share edge possible direction) detected automatically get 0.25 curvature. Adjust edges adding entry name \"vertex1|vertex2. Adjust default edge pairs curvature adding entry name \"pairs\". precision integer scalar specifying many decimal places displayed weights eps numeric scalar. Edge weights 0 eps displayed \\(\\epsilon\\), edge weights 1 - eps 1 displayed \\(1 - \\epsilon\\) background_color character scalar specifying background color whole plotting area. Passed directly graphics::par() (bg) margins length 4 numeric vector specifying margins plot. Defaults 0, since igraph plots tend large margins. passed directly graphics::par() (mar)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 plot method for the class initial_graph — plot.initial_graph","text":"NULL, plotting graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 plot method for the class initial_graph — plot.initial_graph","text":"","code":"plot(simple_successive_2(), layout = \"grid\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class graph_report — print.graph_report","title":"S3 print method for class graph_report — print.graph_report","text":"graph report displays initial graph tested, p-values & alpha used tests, hypotheses can rejected, Detailed test results matrix, including results graph_generate_weights() & test results intersection hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class graph_report — print.graph_report","text":"","code":"# S3 method for graph_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class graph_report — print.graph_report","text":"x object class graph_report print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose test values output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for the class initial_graph — print.initial_graph","title":"S3 print method for the class initial_graph — print.initial_graph","text":"printed initial_graph displays header stating object , hypothesis weights, transition weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for the class initial_graph — print.initial_graph","text":"","code":"# S3 method for initial_graph print(x, ..., precision = 4, indent = 0, title = \"Initial graph\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for the class initial_graph — print.initial_graph","text":"x object class initial_graph print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results title First line printing, used internally distinguish initial graphs updated graphs","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class power_report — print.power_report","title":"S3 print method for class power_report — print.power_report","text":"power report displays initial graph tested, Testing simulation options, Final power calculations, (Partial) Detailed p-values test results - underlying object contains full tables","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class power_report — print.power_report","text":"","code":"# S3 method for power_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class power_report — print.power_report","text":"x object class power_report print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class updated_graph — print.updated_graph","title":"S3 print method for class updated_graph — print.updated_graph","text":"printed updated_graph displays initial graph, vector keep/delete hypotheses, updated graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class updated_graph — print.updated_graph","text":"","code":"# S3 method for updated_graph print(x, ...)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class updated_graph — print.updated_graph","text":"x object class updated_graph print ... values passed methods (currently unused)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"insight nice reporting, prefer graph_test_closure() graph_test_shortcut() options. reasonably fast interactive use. However order minimize power run time, efficient testing functions available. power simulation can segmented certain parts, like generating weights calculating adjusted weights, can done single time. closure testing function stripped just vectorized lines efficiency. separate optimized function available testing graph Bonferroni sequential shortcut.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"graph_test_closure_fast(p, alpha, adjusted_weights, intersections)  graph_test_shortcut_fast(   p,   adjusted_weights,   num_hyps,   bin_slots,   nrow_critical )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"p numeric vector p-values alpha numeric scalar specifying global significance level testing adjusted_weights weights (second half columns) graph_generate_weights() output, adjusted appropriate testing algorithm (Bonferroni, Simes, parametric) intersections first half columns graph_generate_weights() output, indicating hypotheses contained intersection graph initial graph returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"logical integer vector results indicating whether hypothesis can accepted rejected globally.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"par_gate <- simple_successive_1() num_hyps <- length(par_gate$hypotheses)  p <- c(.001, .02, .002, .03)  weighting_strategy <- graph_generate_weights(par_gate) intersections <- weighting_strategy[, seq_len(num_hyps), drop = FALSE] adjusted_weights <-   weighting_strategy[, seq_len(num_hyps) + num_hyps, drop = FALSE]  graphicalMCP:::graph_test_closure_fast(   p,   .025,   adjusted_weights,   intersections ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE  graphicalMCP:::graph_test_shortcut_fast(   p,   adjusted_weights * .025,   length(par_gate$hypotheses),   2^(length(par_gate$hypotheses):1 - 1),   2^length(par_gate$hypotheses) - 1 ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Report details of hypothesis rejections — graph_test_closure","title":"Report details of hypothesis rejections — graph_test_closure","text":"slower graph testing functions design choices made favor ease interpreting results speed. Results include hypothesis rejection decisions, also test values led final result. functions include options reporting details using adjusted p-value method adjusted weight method.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"graph_test_closure(   graph,   p,   alpha = 0.025,   groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   corr = rep(list(NA), length(test_types)),   verbose = FALSE,   test_values = FALSE )  graph_test_shortcut(   graph,   p,   alpha = 0.025,   verbose = FALSE,   test_values = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph initial graph returned graph_create() p numeric vector p-values alpha numeric scalar specifying global significance level testing groups list numeric vectors specifying hypotheses test together test_types character vector tests apply given groups corr (Optional) numeric matrix correlations hypotheses' test statistics verbose logical scalar specifying whether results intersection hypothesis included test_values logical scalar specifying whether hypothesis-level detail included results, including calculating adjusted weights parametric tests","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph_report object, list 4 elements: inputs, outputs, details, test_values Inputs - list input parameters used run test Outputs - list global test results Details - matrix detailed adjusted p-value results (graph deletion sequence shortcut testing) Test values - data frame hypothesis-level test details intersection (step shortcut testing)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Report details of hypothesis rejections — graph_test_closure","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions) p <- c(.01, .005, .015, .022)  corr <- list(NA, matrix(c(1, .5, .5, 1), nrow = 2, byrow = TRUE))  # The default is all Bonferroni with alpha = .025 graph_test_closure(g, p) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1         0.02   TRUE #>           H2         0.01   TRUE #>           H3         0.03  FALSE #>           H4         0.03  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>   # But tests can be specified at the hypothesis-level graph_test_closure(   graph = g,   p = p,   alpha = .025,   groups = list(1:2, 3:4),   test_types = c(\"bonferroni\", \"parametric\"),   corr = corr ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Correlation matrix:     H3  H4 #>                       H3 1.0 0.5 #>                       H4 0.5 1.0 #>  #>   Test types #>   bonferroni: (H1, H2) #>   parametric: (H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1      0.02000   TRUE #>           H2      0.01000   TRUE #>           H3      0.02773  FALSE #>           H4      0.02773  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>"}]
