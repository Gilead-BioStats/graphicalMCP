[{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"multiple-comparison-problem","dir":"Articles","previous_headings":"","what":"Multiple comparison problem","title":"Graphical approaches based on the closure principle","text":"Consider confirmatory clinical trial comparing test treatment (treatment) control treatment (control) disease. two doses treatment: low dose high dose. three endpoints included multiplicity adjustment strategy, primary endpoint (PE) two secondary endpoints (SE1 SE2). total, six null hypotheses: \\(H_1\\), \\(H_3\\) \\(H_5\\) primary hypothesis two secondary hypotheses respectively low dose versus control; \\(H_2\\), \\(H_4\\) \\(H_6\\) primary hypothesis two secondary hypotheses respectively high dose versus control. discussing appropriate multiple comparison procedures, clinical considerations, add structures multiple comparison procedures, can flexibly incorporated using graphical approaches. First, low high doses considered equally important, means rejecting primary hypothesis either dose versus control leads successful trial. Regarding secondary hypotheses, tested corresponding primary hypothesis rejected. means \\(H_3\\) \\(H_5\\) tested \\(H_1\\) rejected; \\(H_4\\) \\(H_6\\) tested \\(H_2\\) rejected. addition, statistical considerations complete graph. primary hypotheses \\(H_1\\) \\(H_2\\) equal hypothesis weight 0.5. secondary hypotheses hypothesis weight 0. primary hypothesis rejected, three outgoing edges: one primary hypothesis two descendant secondary hypotheses. edge primary hypothesis transition weight 0.5; two edges descendant secondary hypotheses equal transition weight 0.25. secondary hypotheses dose-control comparison, edge transition weight 1 (close 1 allow \\(\\epsilon\\) edges). hypothesis weights dose-control comparison group propagated primary hypothesis dose-control comparison, hypotheses first dose-control comparison group deleted. specifications, can create following graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"create-a-graph","dir":"Articles","previous_headings":"","what":"Create a graph","title":"Graphical approaches based on the closure principle","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0, 0, 0)  epsilon <- 1e-5 transitions <- rbind(   c(0,       0.5,     0.25,        0,    0.25, 0),   c(0.5,     0,       0,           0.25, 0,    0.25),   c(0,       0,       0,           0,    1,    0),   c(epsilon, 0,       0,           0,    0,    1 - epsilon),   c(0,       epsilon, 1 - epsilon, 0,    0,    0),   c(0,       0,       0,           1,    0,    0) )  hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\") g <- graph_create(hypotheses, transitions, hyp_names)  plot_layout <- rbind(   c(.15, .5),   c(.65, .5),   c(  0,  0),   c( .5,  0),   c( .3,  0),   c( .8,  0) )  plot(g, layout = plot_layout, eps = epsilon, edge_curves = c(pairs = .5))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"perform-the-graphical-multiple-comparison-procedure-based-on-bonferroni-tests","dir":"Articles","previous_headings":"","what":"Perform the graphical multiple comparison procedure based on Bonferroni tests","title":"Graphical approaches based on the closure principle","text":"Given set p-values \\(H_1, \\ldots, H_6\\), graphical multiple comparison procedure can performed control familywise error rate (FWER) significance level alpha. one-sided p-values, alpha often set 0.025 (default). First, perform Bonferroni-based procedure. running procedure, none hypotheses rejected. [names] showed [year] paper shortcut graphical procedure equivalent closed graphical approach using Bonferroni tests , results identical using [graph_test_shortcut()].","code":"p_values <- c(0.015, 0.013, 0.01, 0.007, 0.1, 0.0124) test_results <- graph_test_closure(g, p = p_values, alpha = 0.025)  test_results$outputs$adjusted_p #>    H1    H2    H3    H4    H5    H6  #> 0.026 0.026 0.028 0.028 0.100 0.028  test_results$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #> FALSE FALSE FALSE FALSE FALSE FALSE # Same testing results as 'graph_test_shortcut(g, p = p_values, alpha = 0.025)'"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"obtain-the-closure","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure based on Bonferroni tests","what":"Obtain the closure","title":"Graphical approaches based on the closure principle","text":"investigate closure every intersection hypothesis rejected, one obtain detailed output specifying verbose = T. hypotheses tested using Bonferroni tests, adjusted p-value every intersection hypothesis adjusted p-value group 1 (meaning hypotheses group Bonferroni tests). intersection hypothesis rejected adjusted p-value less equal alpha. Adjusted p-values initially calculated groups hypotheses. case one group, includes hypotheses, can . adjusted p-value intersection hypothesis minimum across groups within intersection. Finally, adjusted p-value individual hypothesis whole procedure equal max adjusted p-value across intersections containing hypothesis.","code":"test_results_verbose <-   graph_test_closure(g, p = p_values, alpha = 0.025, verbose = TRUE)  head(test_results_verbose$details) # Print fewer rows, e.g., 5 #> $results #>           H1        H2        H3        H4        H5        H6 adj_p_grp1 #> 1  0.5000000 0.5000000 0.0000000 0.0000000 0.0000000 0.0000000 0.02600000 #> 2  0.5000000 0.5000000 0.0000000 0.0000000 0.0000000        NA 0.02600000 #> 3  0.5000000 0.5000000 0.0000000 0.0000000        NA 0.0000000 0.02600000 #> 4  0.5000000 0.5000000 0.0000000 0.0000000        NA        NA 0.02600000 #> 5  0.5000000 0.5000000 0.0000000        NA 0.0000000 0.0000000 0.02600000 #> 6  0.5000000 0.5000000 0.0000000        NA 0.0000000        NA 0.02600000 #> 7  0.5000000 0.5000000 0.0000000        NA        NA 0.0000000 0.02600000 #> 8  0.5000000 0.5000000 0.0000000        NA        NA        NA 0.02600000 #> 9  0.5000000 0.5000000        NA 0.0000000 0.0000000 0.0000000 0.02600000 #> 10 0.5000000 0.5000000        NA 0.0000000 0.0000000        NA 0.02600000 #> 11 0.5000000 0.5000000        NA 0.0000000        NA 0.0000000 0.02600000 #> 12 0.5000000 0.5000000        NA 0.0000000        NA        NA 0.02600000 #> 13 0.5000000 0.5000000        NA        NA 0.0000000 0.0000000 0.02600000 #> 14 0.5000000 0.5000000        NA        NA 0.0000000        NA 0.02600000 #> 15 0.5000000 0.5000000        NA        NA        NA 0.0000000 0.02600000 #> 16 0.5000000 0.5000000        NA        NA        NA        NA 0.02600000 #> 17 0.7500000        NA 0.0000000 0.1250000 0.0000000 0.1250000 0.02000000 #> 18 0.7500000        NA 0.0000000 0.2500000 0.0000000        NA 0.02000000 #> 19 0.7500000        NA 0.0000000 0.1250000        NA 0.1250000 0.02000000 #> 20 0.7500000        NA 0.0000000 0.2500000        NA        NA 0.02000000 #> 21 0.7500012        NA 0.0000000        NA 0.0000000 0.2499987 0.01999997 #> 22 1.0000000        NA 0.0000000        NA 0.0000000        NA 0.01500000 #> 23 0.7500012        NA 0.0000000        NA        NA 0.2499987 0.01999997 #> 24 1.0000000        NA 0.0000000        NA        NA        NA 0.01500000 #> 25 0.7500000        NA        NA 0.1250000 0.0000000 0.1250000 0.02000000 #> 26 0.7500000        NA        NA 0.2500000 0.0000000        NA 0.02000000 #> 27 0.7500000        NA        NA 0.1250000        NA 0.1250000 0.02000000 #> 28 0.7500000        NA        NA 0.2500000        NA        NA 0.02000000 #> 29 0.7500012        NA        NA        NA 0.0000000 0.2499987 0.01999997 #> 30 1.0000000        NA        NA        NA 0.0000000        NA 0.01500000 #> 31 0.7500012        NA        NA        NA        NA 0.2499987 0.01999997 #> 32 1.0000000        NA        NA        NA        NA        NA 0.01500000 #> 33        NA 0.7500000 0.1250000 0.0000000 0.1250000 0.0000000 0.01733333 #> 34        NA 0.7500000 0.1250000 0.0000000 0.1250000        NA 0.01733333 #> 35        NA 0.7500012 0.2499987 0.0000000        NA 0.0000000 0.01733330 #> 36        NA 0.7500012 0.2499987 0.0000000        NA        NA 0.01733330 #> 37        NA 0.7500000 0.1250000        NA 0.1250000 0.0000000 0.01733333 #> 38        NA 0.7500000 0.1250000        NA 0.1250000        NA 0.01733333 #> 39        NA 0.7500012 0.2499987        NA        NA 0.0000000 0.01733330 #> 40        NA 0.7500012 0.2499987        NA        NA        NA 0.01733330 #> 41        NA 0.7500000        NA 0.0000000 0.2500000 0.0000000 0.01733333 #> 42        NA 0.7500000        NA 0.0000000 0.2500000        NA 0.01733333 #> 43        NA 1.0000000        NA 0.0000000        NA 0.0000000 0.01300000 #> 44        NA 1.0000000        NA 0.0000000        NA        NA 0.01300000 #> 45        NA 0.7500000        NA        NA 0.2500000 0.0000000 0.01733333 #> 46        NA 0.7500000        NA        NA 0.2500000        NA 0.01733333 #> 47        NA 1.0000000        NA        NA        NA 0.0000000 0.01300000 #> 48        NA 1.0000000        NA        NA        NA        NA 0.01300000 #> 49        NA        NA 0.2500000 0.2500000 0.2500000 0.2500000 0.02800000 #> 50        NA        NA 0.2500000 0.5000000 0.2500000        NA 0.01400000 #> 51        NA        NA 0.4999983 0.2500008        NA 0.2500008 0.02000007 #> 52        NA        NA 0.4999983 0.5000017        NA        NA 0.01399995 #> 53        NA        NA 0.2500008        NA 0.2500008 0.4999983 0.02480008 #> 54        NA        NA 0.5000000        NA 0.5000000        NA 0.02000000 #> 55        NA        NA 0.5000000        NA        NA 0.5000000 0.02000000 #> 56        NA        NA 1.0000000        NA        NA        NA 0.01000000 #> 57        NA        NA        NA 0.2500000 0.5000000 0.2500000 0.02800000 #> 58        NA        NA        NA 0.5000000 0.5000000        NA 0.01400000 #> 59        NA        NA        NA 0.5000000        NA 0.5000000 0.01400000 #> 60        NA        NA        NA 1.0000000        NA        NA 0.00700000 #> 61        NA        NA        NA        NA 0.5000017 0.4999983 0.02480008 #> 62        NA        NA        NA        NA 1.0000000        NA 0.10000000 #> 63        NA        NA        NA        NA        NA 1.0000000 0.01240000 #>    adj_p_inter reject_intersection #> 1   0.02600000                   0 #> 2   0.02600000                   0 #> 3   0.02600000                   0 #> 4   0.02600000                   0 #> 5   0.02600000                   0 #> 6   0.02600000                   0 #> 7   0.02600000                   0 #> 8   0.02600000                   0 #> 9   0.02600000                   0 #> 10  0.02600000                   0 #> 11  0.02600000                   0 #> 12  0.02600000                   0 #> 13  0.02600000                   0 #> 14  0.02600000                   0 #> 15  0.02600000                   0 #> 16  0.02600000                   0 #> 17  0.02000000                   1 #> 18  0.02000000                   1 #> 19  0.02000000                   1 #> 20  0.02000000                   1 #> 21  0.01999997                   1 #> 22  0.01500000                   1 #> 23  0.01999997                   1 #> 24  0.01500000                   1 #> 25  0.02000000                   1 #> 26  0.02000000                   1 #> 27  0.02000000                   1 #> 28  0.02000000                   1 #> 29  0.01999997                   1 #> 30  0.01500000                   1 #> 31  0.01999997                   1 #> 32  0.01500000                   1 #> 33  0.01733333                   1 #> 34  0.01733333                   1 #> 35  0.01733330                   1 #> 36  0.01733330                   1 #> 37  0.01733333                   1 #> 38  0.01733333                   1 #> 39  0.01733330                   1 #> 40  0.01733330                   1 #> 41  0.01733333                   1 #> 42  0.01733333                   1 #> 43  0.01300000                   1 #> 44  0.01300000                   1 #> 45  0.01733333                   1 #> 46  0.01733333                   1 #> 47  0.01300000                   1 #> 48  0.01300000                   1 #> 49  0.02800000                   0 #> 50  0.01400000                   1 #> 51  0.02000007                   1 #> 52  0.01399995                   1 #> 53  0.02480008                   1 #> 54  0.02000000                   1 #> 55  0.02000000                   1 #> 56  0.01000000                   1 #> 57  0.02800000                   0 #> 58  0.01400000                   1 #> 59  0.01400000                   1 #> 60  0.00700000                   1 #> 61  0.02480008                   1 #> 62  0.10000000                   0 #> 63  0.01240000                   1"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"obtain-adjusted-significance-levels","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure based on Bonferroni tests","what":"Obtain adjusted significance levels","title":"Graphical approaches based on the closure principle","text":"equivalent way obtain rejections via adjusting significance levels. hypothesis rejected p-value less equal adjusted significance level. One can obtain adjusted significance levels every hypothesis every intersection hypothesis closure specifying test_values = TRUE. hypothesis rejected closed testing procedure intersection hypotheses involving rejected. intersection hypothesis rejected null hypotheses within rejected.","code":"test_results_test_values <- graph_test_closure(g, p = p_values, alpha = 0.025,                                                 test_values = TRUE) test_results_test_values$test_values$results #>      Intersection Hypothesis       Test      p <=    Weight * Alpha #> H1              1         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H2              1         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H3              1         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H4              1         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H5              1         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H6              1         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H11             2         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H21             2         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H31             2         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H41             2         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H51             2         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H12             3         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H22             3         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H32             3         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H42             3         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H61             3         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H13             4         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H23             4         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H33             4         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H43             4         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H14             5         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H24             5         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H34             5         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H52             5         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H62             5         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H15             6         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H25             6         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H35             6         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H53             6         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H16             7         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H26             7         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H36             7         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H63             7         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H17             8         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H27             8         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H37             8         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H18             9         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H28             9         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H44             9         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H54             9         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H64             9         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H19            10         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H29            10         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H45            10         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H55            10         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H110           11         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H210           11         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H46            11         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H65            11         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H111           12         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H211           12         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H47            12         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H112           13         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H212           13         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H56            13         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H66            13         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H113           14         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H213           14         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H57            14         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H114           15         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H214           15         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H67            15         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H115           16         H1 bonferroni 0.0150 <= 0.5000000 * 0.025 #> H215           16         H2 bonferroni 0.0130 <= 0.5000000 * 0.025 #> H116           17         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H38            17         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H48            17         H4 bonferroni 0.0070 <= 0.1250000 * 0.025 #> H58            17         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H68            17         H6 bonferroni 0.0124 <= 0.1250000 * 0.025 #> H117           18         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H39            18         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H49            18         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H59            18         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H118           19         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H310           19         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H410           19         H4 bonferroni 0.0070 <= 0.1250000 * 0.025 #> H69            19         H6 bonferroni 0.0124 <= 0.1250000 * 0.025 #> H119           20         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H311           20         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H411           20         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H120           21         H1 bonferroni 0.0150 <= 0.7500012 * 0.025 #> H312           21         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H510           21         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H610           21         H6 bonferroni 0.0124 <= 0.2499987 * 0.025 #> H121           22         H1 bonferroni 0.0150 <= 1.0000000 * 0.025 #> H313           22         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H511           22         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H122           23         H1 bonferroni 0.0150 <= 0.7500012 * 0.025 #> H314           23         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H611           23         H6 bonferroni 0.0124 <= 0.2499987 * 0.025 #> H123           24         H1 bonferroni 0.0150 <= 1.0000000 * 0.025 #> H315           24         H3 bonferroni 0.0100 <= 0.0000000 * 0.025 #> H124           25         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H412           25         H4 bonferroni 0.0070 <= 0.1250000 * 0.025 #> H512           25         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H612           25         H6 bonferroni 0.0124 <= 0.1250000 * 0.025 #> H125           26         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H413           26         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H513           26         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H126           27         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H414           27         H4 bonferroni 0.0070 <= 0.1250000 * 0.025 #> H613           27         H6 bonferroni 0.0124 <= 0.1250000 * 0.025 #> H127           28         H1 bonferroni 0.0150 <= 0.7500000 * 0.025 #> H415           28         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H128           29         H1 bonferroni 0.0150 <= 0.7500012 * 0.025 #> H514           29         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H614           29         H6 bonferroni 0.0124 <= 0.2499987 * 0.025 #> H129           30         H1 bonferroni 0.0150 <= 1.0000000 * 0.025 #> H515           30         H5 bonferroni 0.1000 <= 0.0000000 * 0.025 #> H130           31         H1 bonferroni 0.0150 <= 0.7500012 * 0.025 #> H615           31         H6 bonferroni 0.0124 <= 0.2499987 * 0.025 #> H131           32         H1 bonferroni 0.0150 <= 1.0000000 * 0.025 #> H216           33         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H316           33         H3 bonferroni 0.0100 <= 0.1250000 * 0.025 #> H416           33         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H516           33         H5 bonferroni 0.1000 <= 0.1250000 * 0.025 #> H616           33         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H217           34         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H317           34         H3 bonferroni 0.0100 <= 0.1250000 * 0.025 #> H417           34         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H517           34         H5 bonferroni 0.1000 <= 0.1250000 * 0.025 #> H218           35         H2 bonferroni 0.0130 <= 0.7500012 * 0.025 #> H318           35         H3 bonferroni 0.0100 <= 0.2499987 * 0.025 #> H418           35         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H617           35         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H219           36         H2 bonferroni 0.0130 <= 0.7500012 * 0.025 #> H319           36         H3 bonferroni 0.0100 <= 0.2499987 * 0.025 #> H419           36         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H220           37         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H320           37         H3 bonferroni 0.0100 <= 0.1250000 * 0.025 #> H518           37         H5 bonferroni 0.1000 <= 0.1250000 * 0.025 #> H618           37         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H221           38         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H321           38         H3 bonferroni 0.0100 <= 0.1250000 * 0.025 #> H519           38         H5 bonferroni 0.1000 <= 0.1250000 * 0.025 #> H222           39         H2 bonferroni 0.0130 <= 0.7500012 * 0.025 #> H322           39         H3 bonferroni 0.0100 <= 0.2499987 * 0.025 #> H619           39         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H223           40         H2 bonferroni 0.0130 <= 0.7500012 * 0.025 #> H323           40         H3 bonferroni 0.0100 <= 0.2499987 * 0.025 #> H224           41         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H420           41         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H520           41         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H620           41         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H225           42         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H421           42         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H521           42         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H226           43         H2 bonferroni 0.0130 <= 1.0000000 * 0.025 #> H422           43         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H621           43         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H227           44         H2 bonferroni 0.0130 <= 1.0000000 * 0.025 #> H423           44         H4 bonferroni 0.0070 <= 0.0000000 * 0.025 #> H228           45         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H522           45         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H622           45         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H229           46         H2 bonferroni 0.0130 <= 0.7500000 * 0.025 #> H523           46         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H230           47         H2 bonferroni 0.0130 <= 1.0000000 * 0.025 #> H623           47         H6 bonferroni 0.0124 <= 0.0000000 * 0.025 #> H231           48         H2 bonferroni 0.0130 <= 1.0000000 * 0.025 #> H324           49         H3 bonferroni 0.0100 <= 0.2500000 * 0.025 #> H424           49         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H524           49         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H624           49         H6 bonferroni 0.0124 <= 0.2500000 * 0.025 #> H325           50         H3 bonferroni 0.0100 <= 0.2500000 * 0.025 #> H425           50         H4 bonferroni 0.0070 <= 0.5000000 * 0.025 #> H525           50         H5 bonferroni 0.1000 <= 0.2500000 * 0.025 #> H326           51         H3 bonferroni 0.0100 <= 0.4999983 * 0.025 #> H426           51         H4 bonferroni 0.0070 <= 0.2500008 * 0.025 #> H625           51         H6 bonferroni 0.0124 <= 0.2500008 * 0.025 #> H327           52         H3 bonferroni 0.0100 <= 0.4999983 * 0.025 #> H427           52         H4 bonferroni 0.0070 <= 0.5000017 * 0.025 #> H328           53         H3 bonferroni 0.0100 <= 0.2500008 * 0.025 #> H526           53         H5 bonferroni 0.1000 <= 0.2500008 * 0.025 #> H626           53         H6 bonferroni 0.0124 <= 0.4999983 * 0.025 #> H329           54         H3 bonferroni 0.0100 <= 0.5000000 * 0.025 #> H527           54         H5 bonferroni 0.1000 <= 0.5000000 * 0.025 #> H330           55         H3 bonferroni 0.0100 <= 0.5000000 * 0.025 #> H627           55         H6 bonferroni 0.0124 <= 0.5000000 * 0.025 #> H331           56         H3 bonferroni 0.0100 <= 1.0000000 * 0.025 #> H428           57         H4 bonferroni 0.0070 <= 0.2500000 * 0.025 #> H528           57         H5 bonferroni 0.1000 <= 0.5000000 * 0.025 #> H628           57         H6 bonferroni 0.0124 <= 0.2500000 * 0.025 #> H429           58         H4 bonferroni 0.0070 <= 0.5000000 * 0.025 #> H529           58         H5 bonferroni 0.1000 <= 0.5000000 * 0.025 #> H430           59         H4 bonferroni 0.0070 <= 0.5000000 * 0.025 #> H629           59         H6 bonferroni 0.0124 <= 0.5000000 * 0.025 #> H431           60         H4 bonferroni 0.0070 <= 1.0000000 * 0.025 #> H530           61         H5 bonferroni 0.1000 <= 0.5000017 * 0.025 #> H630           61         H6 bonferroni 0.0124 <= 0.4999983 * 0.025 #> H531           62         H5 bonferroni 0.1000 <= 1.0000000 * 0.025 #> H631           63         H6 bonferroni 0.0124 <= 1.0000000 * 0.025 #>      Inequality_holds #> H1              FALSE #> H2              FALSE #> H3              FALSE #> H4              FALSE #> H5              FALSE #> H6              FALSE #> H11             FALSE #> H21             FALSE #> H31             FALSE #> H41             FALSE #> H51             FALSE #> H12             FALSE #> H22             FALSE #> H32             FALSE #> H42             FALSE #> H61             FALSE #> H13             FALSE #> H23             FALSE #> H33             FALSE #> H43             FALSE #> H14             FALSE #> H24             FALSE #> H34             FALSE #> H52             FALSE #> H62             FALSE #> H15             FALSE #> H25             FALSE #> H35             FALSE #> H53             FALSE #> H16             FALSE #> H26             FALSE #> H36             FALSE #> H63             FALSE #> H17             FALSE #> H27             FALSE #> H37             FALSE #> H18             FALSE #> H28             FALSE #> H44             FALSE #> H54             FALSE #> H64             FALSE #> H19             FALSE #> H29             FALSE #> H45             FALSE #> H55             FALSE #> H110            FALSE #> H210            FALSE #> H46             FALSE #> H65             FALSE #> H111            FALSE #> H211            FALSE #> H47             FALSE #> H112            FALSE #> H212            FALSE #> H56             FALSE #> H66             FALSE #> H113            FALSE #> H213            FALSE #> H57             FALSE #> H114            FALSE #> H214            FALSE #> H67             FALSE #> H115            FALSE #> H215            FALSE #> H116             TRUE #> H38             FALSE #> H48             FALSE #> H58             FALSE #> H68             FALSE #> H117             TRUE #> H39             FALSE #> H49             FALSE #> H59             FALSE #> H118             TRUE #> H310            FALSE #> H410            FALSE #> H69             FALSE #> H119             TRUE #> H311            FALSE #> H411            FALSE #> H120             TRUE #> H312            FALSE #> H510            FALSE #> H610            FALSE #> H121             TRUE #> H313            FALSE #> H511            FALSE #> H122             TRUE #> H314            FALSE #> H611            FALSE #> H123             TRUE #> H315            FALSE #> H124             TRUE #> H412            FALSE #> H512            FALSE #> H612            FALSE #> H125             TRUE #> H413            FALSE #> H513            FALSE #> H126             TRUE #> H414            FALSE #> H613            FALSE #> H127             TRUE #> H415            FALSE #> H128             TRUE #> H514            FALSE #> H614            FALSE #> H129             TRUE #> H515            FALSE #> H130             TRUE #> H615            FALSE #> H131             TRUE #> H216             TRUE #> H316            FALSE #> H416            FALSE #> H516            FALSE #> H616            FALSE #> H217             TRUE #> H317            FALSE #> H417            FALSE #> H517            FALSE #> H218             TRUE #> H318            FALSE #> H418            FALSE #> H617            FALSE #> H219             TRUE #> H319            FALSE #> H419            FALSE #> H220             TRUE #> H320            FALSE #> H518            FALSE #> H618            FALSE #> H221             TRUE #> H321            FALSE #> H519            FALSE #> H222             TRUE #> H322            FALSE #> H619            FALSE #> H223             TRUE #> H323            FALSE #> H224             TRUE #> H420            FALSE #> H520            FALSE #> H620            FALSE #> H225             TRUE #> H421            FALSE #> H521            FALSE #> H226             TRUE #> H422            FALSE #> H621            FALSE #> H227             TRUE #> H423            FALSE #> H228             TRUE #> H522            FALSE #> H622            FALSE #> H229             TRUE #> H523            FALSE #> H230             TRUE #> H623            FALSE #> H231             TRUE #> H324            FALSE #> H424            FALSE #> H524            FALSE #> H624            FALSE #> H325            FALSE #> H425             TRUE #> H525            FALSE #> H326             TRUE #> H426            FALSE #> H625            FALSE #> H327             TRUE #> H427             TRUE #> H328            FALSE #> H526            FALSE #> H626             TRUE #> H329             TRUE #> H527            FALSE #> H330             TRUE #> H627             TRUE #> H331             TRUE #> H428            FALSE #> H528            FALSE #> H628            FALSE #> H429             TRUE #> H529            FALSE #> H430             TRUE #> H629             TRUE #> H431             TRUE #> H530            FALSE #> H630             TRUE #> H531            FALSE #> H631             TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"mixed-procedures-for-graphical-approaches","dir":"Articles","previous_headings":"","what":"Mixed procedures for graphical approaches","title":"Graphical approaches based on the closure principle","text":"framework graphicalMCP allows mixture tests improve performance Bonferroni-based graphical approaches. One can group hypotheses multiple subgroups perform separate test every subgroup. Currently, graphicalMCP supports Bonferroni, parametric Simes tests. connect results subgroups, Bonferroni tests used. , show two examples. first example applies parametric tests primary hypotheses, second example applies Simes tests two subgroups secondary hypotheses addition parametric tests primary hypotheses.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"parametric-tests-for-primary-hypotheses","dir":"Articles","previous_headings":"Mixed procedures for graphical approaches","what":"Parametric tests for primary hypotheses","title":"Graphical approaches based on the closure principle","text":"example, assume test statistics primary hypotheses follow asymptotic bivariate normal distribution. null hypotheses \\(H_1\\) \\(H_2\\), mean distribution 0. correlation test statistics \\(H_1\\) \\(H_2\\) can calculated function sample size. Assume sample size control, low high doses \\(n_0\\), \\(n_1\\) \\(n_2\\), respectively. correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_2+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. intersection hypothesis \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\), hypothesis weights 0.5, 0.5, 0, 0, 0, 0, respectively \\(H_1,\\ldots, H_6\\). Assume one-sided p-values hypotheses \\(p_1,\\ldots,p_6\\), respectively. intersection hypothesis rejected Bonferroni test \\(p_1\\leq 0.5\\alpha\\) \\(p_2\\leq 0.5\\alpha\\). Alternatively, parametric test utilizes correlation test statistics \\(t_1=\\Phi^{-1}(1 - p_1)\\) \\(t_2=\\Phi^{-1}(1 - p_2)\\). intersection hypothesis can rejected \\(p_1\\leq c\\times 0.5\\alpha\\) \\(p_2\\leq c\\times 0.5\\alpha\\), \\(c\\) value adjustment due correlation \\(t_1\\) \\(t_2\\). specifically, \\(c\\) can solved solution \\(Pr\\{(p_1\\leq c\\times 0.5\\alpha)\\cup (p_2\\leq c\\times 0.5\\alpha)\\}=\\alpha\\). given correlation \\(\\rho_{12}\\), \\(c\\) value can solved using uniroot function mvtnorm package. example, \\(\\rho_{12}=0.5\\), \\(c\\) value 1.078. can obtain adjusted significance level \\(H_1\\) \\(H_2\\) \\(c\\times 0.5\\alpha\\). Alternatively, can calculate adjusted p-value \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\) \\(Pr\\{(P_1\\leq \\min{\\{p_1, p_2\\}})\\cup (P_2\\leq \\min{\\{p_1, p_2\\}})\\}\\). implement procedure, need create two subgroups: one \\(H_1\\) \\(H_2\\), one rest hypotheses. first subgroup hypotheses, apply parametric tests; second subgroup, apply Bonferroni tests. Three additional inputs needed specify grouping information test_groups, identify types tests every subgroup test_types, provide correlation matrix parametric tests test_corr. Assuming correlation 0.5 test statistics primary hypotheses, \\(H_1\\) \\(H_2\\) rejected, others rejected using Bonferroni-based graphical approach. illustrates power improvement using parametric tests Bonferroni tests.","code":"corr_12 <- matrix(0.5, nrow = 2, ncol = 2) diag(corr_12) <- 1  test_results_parametric <- graph_test_closure(g, p = p_values, alpha = 0.025,                                                test_groups = list(c(1,2), 3:6),                                               test_types = c(\"parametric\", \"bonferroni\"),                                               test_corr = list(corr_12, NA),                                               test_values = TRUE)  test_results_parametric$outputs$adjusted_p #>         H1         H2         H3         H4         H5         H6  #> 0.02413846 0.02413846 0.02800000 0.02800000 0.10000000 0.02800000 test_results_parametric$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #>  TRUE  TRUE FALSE FALSE FALSE FALSE test_results_parametric$test_values$results[test_results_parametric$test_values$results$Intersection == 1, ] #>    Intersection Hypothesis       Test      p <=      c_value * Weight * Alpha #> H1            1         H1 parametric 0.0150 <= 1.0782936582 *    0.5 * 0.025 #> H2            1         H2 parametric 0.0130 <= 1.0782936582 *    0.5 * 0.025 #> H3            1         H3 bonferroni 0.0100 <=                   0.0 * 0.025 #> H4            1         H4 bonferroni 0.0070 <=                   0.0 * 0.025 #> H5            1         H5 bonferroni 0.1000 <=                   0.0 * 0.025 #> H6            1         H6 bonferroni 0.0124 <=                   0.0 * 0.025 #>    Inequality_holds #> H1            FALSE #> H2             TRUE #> H3            FALSE #> H4            FALSE #> H5            FALSE #> H6            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"parametric-tests-for-primary-hypotheses-and-simes-tests-for-secondary-hypotheses","dir":"Articles","previous_headings":"Mixed procedures for graphical approaches","what":"Parametric tests for primary hypotheses and Simes tests for secondary hypotheses","title":"Graphical approaches based on the closure principle","text":"addition using parametric tests primary hypotheses, ways improve Bonferroni-based graphical approaches. One way apply Simes tests secondary hypotheses. Simes tests improve Bonferroni tests may reject intersection hypothesis p-values relatively small, even ’re larger adjusted significance levels Bonferroni tests. intersection hypothesis \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\), hypothesis weights 0.5, 0.5, 0, 0, 0, 0, respectively \\(H_1,\\ldots, H_6\\). intersection hypothesis rejected Bonferroni test \\(p_1\\leq 0.5\\alpha\\) \\(p_2\\leq 0.5\\alpha\\). addition conditions, Simes test can also reject intersection hypothesis \\(p_1\\) \\(p_2\\) less equal \\(\\alpha\\). order control Type error Simes test, distributional requirement needed, called \\(MTP_2\\). case, means correlation test statistics \\(H_1\\) \\(H_2\\) non-negative. illustrate possibility using mixed tests example, keep parametric tests primary hypotheses apply Simes tests secondary hypotheses. two sets secondary hypotheses: \\(H_3\\) \\(H_5\\) secondary hypotheses low dose versus control, \\(H_4\\) \\(H_6\\) secondary hypotheses high dose versus control. believed correlation test statistics \\(H_3\\) \\(H_5\\) non-negative similar case \\(H_4\\) \\(H_6\\). Thus one can apply Simes tests \\(H_3\\) \\(H_5\\), separately \\(H_4\\) \\(H_6\\). Note different applying Simes tests \\(H_3\\ldots,H_6\\) requires stronger \\(MTP^2\\) condition. implement procedure, create three subgroups: one \\(H_1\\) \\(H_2\\), one \\(H_3\\) \\(H_5\\), one \\(H_4\\) \\(H_6\\). first subgroup hypotheses, apply parametric tests; second third subgroups, apply separate Simes tests. Assuming correlation 0.5 test statistics primary hypotheses, \\(H_1\\), \\(H_2\\), \\(H_4\\), \\(H_6\\), \\(H_3\\) rejected. Compared results using Bonferroni tests secondary hypotheses, \\(H_3\\), \\(H_4\\) \\(H_6\\) additional hypotheses rejected using Simes tests, showing power improvement using Simes tests.","code":"test_results_parametric_simes <-   graph_test_closure(g, p = p_values, alpha = 0.025,                       test_groups = list(c(1,2), c(3, 5), c(4, 6)),                      test_types = c(\"parametric\", \"simes\", \"simes\"),                      test_corr = list(corr_12, NA, NA))  test_results_parametric_simes$outputs$adjusted_p #>         H1         H2         H3         H4         H5         H6  #> 0.02413846 0.02413846 0.02480008 0.02480000 0.10000000 0.02480008 test_results_parametric_simes$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #>  TRUE  TRUE  TRUE  TRUE FALSE  TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"power-calculation","dir":"Articles","previous_headings":"","what":"Power calculation","title":"Graphical approaches based on the closure principle","text":"Given graph, trial team often interested power trial. single null hypothesis, power probability reject null hypothesis significance level alpha alternative hypothesis true (.e. true positive). multiple null hypotheses, multiple version power. example, power reject least one hypothesis power reject hypotheses, given alternative hypotheses true. graphical multiple comparison procedures, also important understand power reject hypothesis, given multiplicity adjustment. Sometimes, team may want customize definitions power define success. Thus power calculation important aspect trial design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-marginal-power-for-primary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for primary hypotheses","title":"Graphical approaches based on the closure principle","text":"Assume primary endpoint occurrence unfavorable clinical event. evaluate treatment effect, proportion patients event calculated lower better. Assume proportions 0.181 low high doses, 0.3 control. Using equal randomization among three treatment groups, clinical trial team chooses total sample size 600 200 per group. leads marginal power 80% \\(H_1\\) \\(H_2\\), respectively, using two-sample test difference proportions unpooled variance one-sided significance level 0.025. calculation, use marginal power combine information treatment effect, nuisance parameter, sample sizes hypothesis. Note significance level used marginal power alpha used power calculation significance level FWER control. addition, marginal power one--one relationship noncentrality parameter, illustrated .","code":"alpha <- 0.025 prop <- c(0.3, 0.181, 0.181) sample_size <- rep(200, 3) unpooled_variance <- prop[-1] * (1 - prop[-1]) / sample_size[-1] +   prop[1] * (1 - prop[1]) / sample_size[1] noncentrality_parameter_primary <- -(prop[-1] - prop[1]) / sqrt(unpooled_variance) marginal_power_primary <- pnorm(qnorm(alpha, lower.tail = FALSE),                                 noncentrality_parameter_primary, 1, lower.tail = FALSE) names(marginal_power_primary) <- c(\"H1\", \"H2\") marginal_power_primary #>        H1        H2  #> 0.8028315 0.8028315"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-marginal-power-for-secondary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for secondary hypotheses","title":"Graphical approaches based on the closure principle","text":"Assume secondary endpoint (SE1) change total medication score baseline, continuous outcome. Also assume secondary endpoint (SE2) change another medication score baseline, continuous outcome contains fewer categories compared SE1. evaluate treatment effect, mean change calculated reduction better. Assume mean change baseline SE1 reduction 7.5 8.25, respectively low high doses, 5 control. Also assume mean change baseline SE2 reduction 8 9, respectively low high doses, 6 control. assume known common standard deviation 10. Given sample size 200 per treatment group, marginal power 71% 90% \\(H_3\\) \\(H_4\\), respectively 52% 85% \\(H_5\\) \\(H_6\\), respectively using two-sample \\(z\\)-test difference means one-sided significance level 0.025.","code":"mean_change_se1 <- c(5, 7.5, 8.25) sd <- rep(10, 3) variance <- sd[-1]^2 / sample_size[-1] + sd[1]^2 / sample_size[1] noncentrality_parameter_se1 <- (mean_change_se1[-1] - mean_change_se1[1]) /   sqrt(variance) marginal_power_se1 <- pnorm(qnorm(alpha, lower.tail = FALSE),                             noncentrality_parameter_se1, 1, lower.tail = FALSE) names(marginal_power_se1) <- c(\"H3\", \"H4\") marginal_power_se1 #>        H3        H4  #> 0.7054139 0.9014809 mean_change_se2 <- c(6, 8, 9) noncentrality_parameter_se2 <- (mean_change_se2[-1] - mean_change_se2[1]) /   sqrt(variance) marginal_power_se2 <- pnorm(qnorm(alpha, lower.tail = FALSE),                             noncentrality_parameter_se2, 1, lower.tail = FALSE) names(marginal_power_se2) <- c(\"H5\", \"H6\") marginal_power_se2 #>        H5        H6  #> 0.5159678 0.8508384"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-correlation-structure-to-simulate-test-statistics","dir":"Articles","previous_headings":"Power calculation","what":"Input: Correlation structure to simulate test statistics","title":"Graphical approaches based on the closure principle","text":"addition marginal power, also need make assumptions joint distribution test statistics. example, assume follow multivariate normal distribution means ’re defined noncentrality parameters correlation matrix \\(R\\). obtain correlations, helpful understand two types correlations example. correlation two dose-control comparisons endpoint correlation endpoints. former correlation can calculated function sample size. example, correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_3+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. correlation test statistics \\(H_3\\) \\(H_4\\) \\(H_5\\) \\(H_6\\) . hand, correlation endpoints dose-control comparison often estimated based prior knowledge previous trials. Without information, assume \\(\\rho_{13}=\\rho_{15}=\\rho_{24}=\\rho_{26}=\\rho_{35}=\\rho_{46}=0.5\\). practice, one set correlation parameter try multiple values assess sensitivity assumption. Regarding correlation test statistics \\(H_1\\) \\(H_4 (H_6)\\) \\(H_2\\) \\(H_3 (H_5)\\), even difficult estimate. use simple product rule, means correlation product correlations two previously assumed correlations. example, \\(\\rho_{14}=\\rho_{12}*\\rho_{24}\\) \\(\\rho_{23}=\\rho_{12}*\\rho_{13}\\). practice, assumptions may made tested, instead using product rule.","code":"corr <- matrix(0, nrow = 6, ncol = 6) corr[1, 2] <- corr[3, 4] <- corr[5, 6] <- sqrt(sample_size[2] / sum(sample_size[1:2]) *                                                  sample_size[3] / sum(sample_size[c(1, 3)])) rho <- 0.5 corr[1, 3] <- corr[1, 5] <- corr[2, 4] <- corr[2, 6] <- corr[3, 5] <- corr[4, 6] <- rho corr[1, 4] <- corr[1, 6] <- corr[2, 3] <- corr[2, 5] <- corr[1, 2] * rho corr[3, 6] <- corr[1, 3] * corr[1, 6] corr[4, 5] <- corr[1, 4] * corr[1, 6] corr <- corr + t(corr) diag(corr) <- 1 colnames(corr) <- hyp_names rownames(corr) <- hyp_names corr #>      H1   H2    H3     H4     H5    H6 #> H1 1.00 0.50 0.500 0.2500 0.5000 0.250 #> H2 0.50 1.00 0.250 0.5000 0.2500 0.500 #> H3 0.50 0.25 1.000 0.5000 0.5000 0.125 #> H4 0.25 0.50 0.500 1.0000 0.0625 0.500 #> H5 0.50 0.25 0.500 0.0625 1.0000 0.500 #> H6 0.25 0.50 0.125 0.5000 0.5000 1.000"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"user-defined-success-criteria","dir":"Articles","previous_headings":"Power calculation","what":"User-defined success criteria","title":"Graphical approaches based on the closure principle","text":"mentioned earlier, multiple versions “power” multiple hypotheses. Commonly used “power” definitions include: - Local power: probability hypothesis rejected (multiplicity adjustment) - Expected . rejections: expected number rejections - Power reject 1 : probability reject least one hypothesis - Power reject : probability reject hypotheses default outputs graph_calculate_power function. addition, user customize success criteria define versions “power”.","code":"# Probability to reject H1 H1 <- function(x) x[1] # Expected number of rejections `Expected no. of rejections` <- function(x) x[1] + x[2] + x[3] + x[4] # Probability to reject at least one hypothesis `AtLeast1` <- function(x) x[1] | x[2] | x[3] | x[4] | x[5] | x[6] # Probability to reject all hypotheses `All` <- function(x) x[1] & x[2] & x[3] & x[4] & x[5] & x[6] # Probability to reject both H1 and H2 `H1andH2` <- function(x) x[1] & x[2] # Probability to reject all hypotheses for the low dose or the high dose `(H1andH3andH5)or(H2andH4andH6)` <- function(x) (x[1] & x[3] & x[5]) | (x[2] & x[4] & x[6]) succ <- list(H1, `Expected no. of rejections`, `AtLeast1`, `All`, `H1andH2`,              `(H1andH3andH5)or(H2andH4andH6)`)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"output-calculate-power","dir":"Articles","previous_headings":"Power calculation","what":"Output: Calculate power","title":"Graphical approaches based on the closure principle","text":"Given inputs, can calculate power via simulation graphical multiple comparison procedure one-sided significance level alpha=0.025 using sim_n = 1e5 simulations seed sim_seed = 1234. three procedures compare: Bonferroni-based procedure, procedure using parametric tests primary hypotheses, procedure using parametric tests primary hypotheses Simes tests two sets secondary hypotheses separately. local power hypotheses \\(H_1, \\ldots, H_6\\) - 0.760, 0.752, 0.510, 0.665, 0.391, 0.625, respectively using Bonferroni-based procedure, - 0.764, 0.756, 0.511, 0.668, 0.392, 0.628, respectively using procedure using parametric tests primary hypotheses, - 0.764, 0.757, 0.521, 0.673, 0.402, 0.633, respectively using procedure using parametric tests primary hypotheses Simes tests two sets secondary hypotheses separately. Note local power improved hypotheses parametric tests Simes tests applied Bonferroni-based procedure. see detailed outputs simulated p-values rejection decisions hypotheses, can specify verbose = TRUE. produce lot outputs. allow flexible printing functions, user can change following: - indented space default setting indent = 2 - precision numeric values (.e., number decimal places) default setting precision = 6","code":"power_bonferroni <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   sim_success = succ,   sim_seed = 1234 ) round(power_bonferroni$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.760 0.752 0.510 0.665 0.391 0.625  power_parametric <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), 3:6),   test_types = c(\"parametric\", \"bonferroni\"),   test_corr = list(corr_12, NA),   sim_success = succ,   sim_seed = 1234 ) round(power_parametric$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.764 0.756 0.511 0.668 0.392 0.628  power_parametric_simes <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), c(3, 5), c(4, 6)),   test_types = c(\"parametric\", \"simes\", \"simes\"),   test_corr = list(corr_12, NA, NA),   sim_success = succ,   sim_seed = 1234 ) round(power_parametric_simes$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.764 0.757 0.521 0.673 0.402 0.633 verbose_output_parametric_simes <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), c(3, 5), c(4, 6)),   test_types = c(\"parametric\", \"simes\", \"simes\"),   test_corr = list(corr_12, NA, NA),   sim_success = succ,   sim_seed = 1234,   verbose = TRUE )  print(verbose_output_parametric_simes) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>   H5: 0.0 #>   H6: 0.0 #>  #>   --- Transition weights --- #>           H1      H2      H3      H4      H5      H6 #>   H1 0.00000 0.50000 0.25000 0.00000 0.25000 0.00000 #>   H2 0.50000 0.00000 0.00000 0.25000 0.00000 0.25000 #>   H3 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 #>   H4 0.00001 0.00000 0.00000 0.00000 0.00000 0.99999 #>   H5 0.00000 0.00001 0.99999 0.00000 0.00000 0.00000 #>   H6 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     H1  H2 #>                                   H1 1.0 0.5 #>                                   H2 0.5 1.0 #>  #>   Test types #>   parametric: (H1, H2) #>        simes: (H3, H5) #>        simes: (H4, H6) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                       H1     H2     H3     H4     H5     H6 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 0.5160 0.8508 #>  #>   Correlation:        H1     H2     H3     H4     H5     H6 #>                H1 1.0000 0.5000 0.5000 0.2500 0.5000 0.2500 #>                H2 0.5000 1.0000 0.2500 0.5000 0.2500 0.5000 #>                H3 0.5000 0.2500 1.0000 0.5000 0.5000 0.1250 #>                H4 0.2500 0.5000 0.5000 1.0000 0.0625 0.5000 #>                H5 0.5000 0.2500 0.5000 0.0625 1.0000 0.5000 #>                H6 0.2500 0.5000 0.1250 0.5000 0.5000 1.0000 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4     H5     H6 #>                  Local power: 0.7644 0.7566 0.5209 0.6730 0.4023 0.6329 #>  #>   Expected no. of rejections: 3.75 #>    Power to reject 1 or more: 0.8628 #>          Power to reject all: 0.3254 #>  #>              Power to reject:    x[1]   x[1] + x[2] + x[3] + x[4] #>                                0.7644                      2.7148 #>    x[1] | x[2] | x[3] | x[4] | x[5] | x[6] #>                                     0.8628 #>    x[1] & x[2] & x[3] & x[4] & x[5] & x[6]   x[1] & x[2] #>                                     0.3254        0.6582 #>    (x[1] & x[3] & x[5]) | (x[2] & x[4] & x[6]) #>                                         0.6332 #>  #> Simulation details ($details) -------------------------------------------------- #>     p_sim_H1  p_sim_H2  p_sim_H3  p_sim_H4  p_sim_H5  p_sim_H6 rej_H1 rej_H2 #>    2.365e-02 6.962e-03 3.835e-03 6.156e-02 3.403e-03 1.842e-03  FALSE   TRUE #>    3.670e-02 4.681e-02 6.858e-02 2.848e-02 1.496e-01 5.521e-02  FALSE  FALSE #>    1.575e-02 6.544e-03 1.153e-03 7.655e-04 8.362e-02 2.553e-02   TRUE   TRUE #>    5.337e-03 8.700e-07 9.953e-03 2.429e-04 3.699e-02 1.346e-04   TRUE   TRUE #>    3.427e-02 1.789e-01 6.203e-03 3.059e-02 4.616e-02 6.661e-02  FALSE  FALSE #>    1.114e-03 1.784e-02 6.084e-02 8.707e-03 3.865e-01 8.674e-02   TRUE   TRUE #>    2.541e-01 2.101e-01 2.617e-02 2.774e-02 9.249e-03 2.977e-02  FALSE  FALSE #>    9.081e-02 4.433e-02 1.904e-01 4.188e-02 3.997e-01 1.097e-01  FALSE  FALSE #>    7.396e-02 4.728e-02 3.779e-01 2.962e-02 4.447e-01 6.206e-02  FALSE  FALSE #>    3.354e-04 1.049e-03 1.247e-05 3.230e-03 1.601e-04 1.146e-02   TRUE   TRUE #>    rej_H3 rej_H4 rej_H5 rej_H6 #>     FALSE  FALSE  FALSE   TRUE #>     FALSE  FALSE  FALSE  FALSE #>      TRUE   TRUE  FALSE  FALSE #>      TRUE   TRUE  FALSE   TRUE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>      TRUE   TRUE   TRUE   TRUE #>   ... (Use `print(x, rows = <nn>)` for more)  print(verbose_output_parametric_simes,       indent = 4,       precision = 6) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>     Initial graph #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2: 0.5 #>     H3: 0.0 #>     H4: 0.0 #>     H5: 0.0 #>     H6: 0.0 #>  #>     --- Transition weights --- #>             H1      H2      H3      H4      H5      H6 #>     H1 0.00000 0.50000 0.25000 0.00000 0.25000 0.00000 #>     H2 0.50000 0.00000 0.00000 0.25000 0.00000 0.25000 #>     H3 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 #>     H4 0.00001 0.00000 0.00000 0.00000 0.00000 0.99999 #>     H5 0.00000 0.00001 0.99999 0.00000 0.00000 0.00000 #>     H6 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 #>  #>     Alpha = 0.025 #>  #>     Parametric testing correlation:     H1  H2 #>                                     H1 1.0 0.5 #>                                     H2 0.5 1.0 #>  #>     Test types #>     parametric: (H1, H2) #>          simes: (H3, H5) #>          simes: (H4, H6) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>     Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                           H1       H2       H3       H4       H5       H6 #>     Marginal power: 0.802831 0.802831 0.705414 0.901481 0.515968 0.850838 #>  #>     Correlation:        H1     H2     H3     H4     H5     H6 #>                  H1 1.0000 0.5000 0.5000 0.2500 0.5000 0.2500 #>                  H2 0.5000 1.0000 0.2500 0.5000 0.2500 0.5000 #>                  H3 0.5000 0.2500 1.0000 0.5000 0.5000 0.1250 #>                  H4 0.2500 0.5000 0.5000 1.0000 0.0625 0.5000 #>                  H5 0.5000 0.2500 0.5000 0.0625 1.0000 0.5000 #>                  H6 0.2500 0.5000 0.1250 0.5000 0.5000 1.0000 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                      H1      H2      H3      H4      H5      H6 #>                    Local power: 0.76437 0.75656 0.52086 0.67302 0.40234 0.63292 #>  #>     Expected no. of rejections: 3.75007 #>      Power to reject 1 or more: 0.86277 #>            Power to reject all: 0.32537 #>  #>                Power to reject:     x[1]   x[1] + x[2] + x[3] + x[4] #>                                  0.76437                     2.71481 #>    x[1] | x[2] | x[3] | x[4] | x[5] | x[6] #>                                    0.86277 #>    x[1] & x[2] & x[3] & x[4] & x[5] & x[6]   x[1] & x[2] #>                                    0.32537       0.65816 #>    (x[1] & x[3] & x[5]) | (x[2] & x[4] & x[6]) #>                                        0.63324 #>  #> Simulation details ($details) -------------------------------------------------- #>         p_sim_H1    p_sim_H2    p_sim_H3    p_sim_H4    p_sim_H5    p_sim_H6 rej_H1 #>      2.36514e-02 6.96244e-03 3.83510e-03 6.15622e-02 3.40342e-03 1.84173e-03  FALSE #>      3.67030e-02 4.68113e-02 6.85785e-02 2.84812e-02 1.49604e-01 5.52142e-02  FALSE #>      1.57542e-02 6.54383e-03 1.15274e-03 7.65505e-04 8.36187e-02 2.55280e-02   TRUE #>      5.33699e-03 8.69996e-07 9.95272e-03 2.42937e-04 3.69938e-02 1.34554e-04   TRUE #>      3.42665e-02 1.78879e-01 6.20296e-03 3.05856e-02 4.61643e-02 6.66051e-02  FALSE #>      1.11399e-03 1.78370e-02 6.08385e-02 8.70657e-03 3.86501e-01 8.67387e-02   TRUE #>      2.54077e-01 2.10119e-01 2.61667e-02 2.77426e-02 9.24897e-03 2.97659e-02  FALSE #>      9.08136e-02 4.43323e-02 1.90372e-01 4.18783e-02 3.99651e-01 1.09703e-01  FALSE #>      7.39568e-02 4.72837e-02 3.77864e-01 2.96172e-02 4.44676e-01 6.20565e-02  FALSE #>      3.35392e-04 1.04874e-03 1.24653e-05 3.22990e-03 1.60129e-04 1.14582e-02   TRUE #>      rej_H2 rej_H3 rej_H4 rej_H5 rej_H6 #>        TRUE  FALSE  FALSE  FALSE   TRUE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE   TRUE   TRUE  FALSE  FALSE #>        TRUE   TRUE   TRUE  FALSE   TRUE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE   TRUE   TRUE   TRUE   TRUE #>     ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"what-is-the-closure","dir":"Articles","previous_headings":"","what":"What is the closure?","title":"Generating the closure of a graph","text":"closure graph set sub-graphs, along weights calculated according algorithm 1 Bretz et al (2011). primarily used closed testing, sub-graphs tested significance, results aggregated determine null hypotheses significant globally. Throughout article common example used demonstrations - simple successive graph. two primary hypotheses, \\(H_1\\) \\(H_2\\), initial weight evenly split . secondary hypotheses, \\(H_3\\) \\(H_4\\), weight propagated \\(H_1\\) \\(H_2\\) deleted, respectively.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"components-of-the-closure","dir":"Articles","previous_headings":"What is the closure?","what":"Components of the closure","title":"Generating the closure of a graph","text":"graphicalMCP, closure represented matrix, row represents sub-graph (also called intersection hypothesis), column corresponds individual hypothesis. matrix can created graph_generate_weights(), two parts: indicator matrix showing hypotheses contained sub-graph (-called powerset set), weights matrix containing induced weights sub-graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"properties-of-the-closure","dir":"Articles","previous_headings":"What is the closure?","what":"Properties of the closure","title":"Generating the closure of a graph","text":"rows closure generated particular way order give useful properties.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"repeating-recursive-blocks","dir":"Articles","previous_headings":"What is the closure? > Properties of the closure","what":"Repeating recursive blocks","title":"Generating the closure of a graph","text":"First, notice row can obtained row higher matrix flipping single 1 0. example, go row 1 row 3 flipping \\(H_3\\), go row 10 row 14 flipping \\(H_2\\). upper row pairing like can thought “parent” sub-graph, lower row “child” sub-graph. Flipping 0 1 moving matrix called “finding sub-graph’s parent.” Now consider parent-finding strategy left-0 row flipped. reveals pattern bottom half top half, row’s parent bottom half corresponding row top half, eight rows . pattern repeats within box recursively, top half box matching bottom half, first missing hypothesis flipped 0 1.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"binary-counting","dir":"Articles","previous_headings":"What is the closure? > Properties of the closure","what":"Binary counting","title":"Generating the closure of a graph","text":"second useful property somewhat re-framing first, perhaps viewed reason first true. Starting bottom row, powerset particular order counts 1 binary, incrementing 1 per row. means row number can directly calculated vector showing hypotheses currently deleted graph: row_number == number_of_rows - incl_excl_vec_converted_to_base_10 + 1. example, intersection number 6 hypothesis vector 1010. interpreted binary, 1 * 8 + 0 * 4 + 1 * 2 + 0 * 1 = 10 base 10, 6 == 15 - 10 + 1.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"strategies","dir":"Articles","previous_headings":"","what":"Strategies","title":"Generating the closure of a graph","text":"size closure grows quickly graph size increases (n-graph 2^n - 1 sub-graphs), calculating full closure large graphs can computationally intensive. Optimizing process led three main strategies: simplest approach, uses full graph starting point every sub-graph, deletes appropriate hypotheses recursive method, traverses closure tree, deleting one hypothesis time step graphs formulaic shortcut using order graphs generated recursive method Note discussion methods focuses primarily weights side rather powerset side closure. fastest methods discovered generate powerset implicitly missing values weights side. methods simple approach, rely powerset order generate weights, powerset can created efficiently. num_hyps refers number hypotheses initial graph.","code":"powerset <- as.matrix(rev(expand.grid(rep(list(1:0), num_hyps))[-2^num_hyps, ]))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"simple-approach","dir":"Articles","previous_headings":"Strategies","what":"Simple approach","title":"Generating the closure of a graph","text":"simplest approach generate weights closure apply graph_update() initial graph sub-graph. short sweet write, ’s inefficient hypothesis gets deleted graph multiple times. code simple method.","code":"ggw_simple <- function(graph) {   num_hyps <- length(graph$hypotheses)    matrix_intersections <-     as.matrix(rev(expand.grid(rep(list(1:0), num_hyps))[-2^num_hyps, ]))   colnames(matrix_intersections) <- names(graph$hypotheses)    matrix_weights <- apply(     matrix_intersections,     1,     function(h) graph_update(graph, !h)$updated_graph$hypotheses,     simplify = FALSE   )    cbind(matrix_intersections, do.call(rbind, matrix_weights)) }"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"recursive","dir":"Articles","previous_headings":"Strategies","what":"Recursive","title":"Generating the closure of a graph","text":"recursive method treats space sub-graphs tree, initial graph root, sub-graphs decreasing size going branches. essence recursive step delete hypothesis current graph. every hypothesis every sub-graph tree result taking multiple paths many graphs. key part recursive step memory - graph tree delete hypotheses come hypothesis just deleted reach current graph. base case also needs memory - reached graph one hypothesis left, last-deleted hypothesis number larger current hypotheses. memory recursion enables tree traversal reach unique graph state exactly . implementation recursion, followed wrapper processing sub-graph list standard matrix form.","code":"delete_nodes_recursive <- function(graph, last = 0) {   init_hypotheses <- hypotheses <- graph$hypotheses   init_transitions <- transitions <- graph$transitions    ### base case   int_hyp <- as.integer(names(hypotheses))    is_single_node <- length(hypotheses) == 1   last_is_bigger <- last > max(int_hyp)    if (is_single_node || last_is_bigger) {     return(list(graph))   }    ### recursive step   children <- list()    for (orig_hyp_num in int_hyp[int_hyp > last]) {     del_index <- match(orig_hyp_num, int_hyp)     hyp_nums <- seq_along(hypotheses)[seq_along(hypotheses) != del_index]      for (hyp_num in hyp_nums) {       hypotheses[[hyp_num]] <-         init_hypotheses[[hyp_num]] +         init_hypotheses[[del_index]] * init_transitions[[del_index, hyp_num]]        denominator <- 1 - init_transitions[[hyp_num, del_index]] *         init_transitions[[del_index, hyp_num]]        for (end_num in hyp_nums) {         if (hyp_num == end_num || denominator <= 0) {           transitions[[hyp_num, end_num]] <- 0         } else {           transitions[[hyp_num, end_num]] <- (             init_transitions[[hyp_num, end_num]] +               init_transitions[[hyp_num, del_index]] *                 init_transitions[[del_index, end_num]]           ) / denominator         }       }     }      smaller_graph <- structure(       list(         hypotheses = hypotheses[-del_index],         transitions = as.matrix(transitions[-del_index, -del_index])       ),       class = \"initial_graph\"     )      children[[del_index]] <- delete_nodes_recursive(       smaller_graph,       orig_hyp_num     )   }    c(     unlist(children, recursive = FALSE),     list(graph)   ) } ggw_recursive <- function(graph) {   # The recursion requires the hypotheses to be named sequentially as actual   # numbers for the memory property to work   hyp_names <- names(graph$hypotheses)   names(graph$hypotheses) <- seq_along(graph$hypotheses)   colnames(graph$transitions) <- names(graph$hypotheses)   rownames(graph$transitions) <- names(graph$hypotheses)    # Recursively generate a list of all sub-graphs   list_subgraphs <- delete_nodes_recursive(graph)    # Process the list of graphs into the normal matrix form   matrix_weights <- structure(     do.call(       rbind,       lapply(         list_subgraphs,         function(graph) graph$hypotheses[as.character(seq_along(hyp_names))]       )     ),     dimnames = list(1:(2^length(hyp_names) - 1), hyp_names)   )    matrix_intersections <- !is.na(matrix_weights)   matrix_weights[is.na(matrix_weights)] <- 0    cbind(matrix_intersections, matrix_weights) }"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"formula-shortcut","dir":"Articles","previous_headings":"Strategies","what":"Formula shortcut","title":"Generating the closure of a graph","text":"Finally, fastest method found far - formula shortcut. recursion can save lot time first method, still bit overhead get list sub-graphs matrix form standard. “repeating block” property closure mentioned earlier useful. Instead using recursion connect parent sub-graphs children, pair formulas can used. One formula generates parent graph obtained flipping left-0 1: .call(c, lapply(2^(seq_len(num_hyps) - 1), seq_len)). Note rows 2 (non-existent) row 16, empty graph. Row 1 parent graph. left-0 child graph easy find, parent graph’s perspective, formula calculates hypothesis delete: rep(rev(seq_len(num_hyps)), 2^(seq_len(num_hyps) - 1)). also applies rows 2 16. formula shortcut also results simpler code recursive solution.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"generating-the-closure","dir":"Articles","previous_headings":"Performance gains","what":"Generating the closure","title":"Generating the closure of a graph","text":"formula method reduces step generating closure single deletion prior graph, almost additional overhead. ’s different methods fare, including version gMCP package reference. Also worthy note lrstat package, contains MCP-related functions, including generating weights closure. uses excellent C++ code perform even faster, since speed current formula-based method acceptable, adding Rcpp dependency considered worth additional time savings.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"power-simulations","dir":"Articles","previous_headings":"Performance gains","what":"Power simulations","title":"Generating the closure of a graph","text":"time savings closure nice, graphs savings make big difference compared longer run-times e.g. power simulations. However, paying attention closure important reasons , improving power algorithm.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"standard-algorithm","dir":"Articles","previous_headings":"Performance gains > Power simulations","what":"Standard algorithm","title":"Generating the closure of a graph","text":"typical method running Bonferroni shortcut procedure graph : Search graph single hypothesis can rejected Delete rejected hypothesis update weights Repeat significant hypotheses Running process either R low-level language like C fast single procedure, ’s run 100,000 times power simulation, R version becomes onerous. However, ’s lot duplication power simulation using method. many simulations, steps taken, means re-calculating set weights many times.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"closure-shortcut","dir":"Articles","previous_headings":"Performance gains > Power simulations","what":"Closure shortcut","title":"Generating the closure of a graph","text":"binary counting property closure admits shortcut can implemented R get scalable competitor typical algorithm: Generate closure single time get sub-graph weights efficiently simulation: 1. Search graph hypotheses can rejected - fast vectorization 1. Using binary counting property, index row closure corresponding hypotheses rejected far get updated weights - substantially faster updating graph re-calculating weights, especially larger graphs 1. Repeat using updated weights method fast gMCP’s C implementation, still runs substantial power simulations matter seconds. biggest drawback can scale differently different graph structures. instance fixed sequence procedure can take longer balanced graph, like Holm procedure, takes steps reject possible hypotheses.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common procedures","text":"confirmatory clinical trials multiple endpoints, regulations mandate strong control family-wise error rate reduce risk false positives. Multiple comparison procedures (MCPs) used spread total significance multiple hypotheses. article ’ll demonstrate go standard procedures advanced procedures using graphical approach.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"bonferroni","dir":"Articles","previous_headings":"Simple procedures","what":"Bonferroni","title":"Common procedures","text":"Probably common MCP Bonferroni correction. simply divides alpha level evenly hypotheses. significance adjustment made hypothesis rejected. Bonferroni correction can performed easily without graphical approach, graphical example .","code":"transitions <- matrix(0, 5, 5)  bonferroni_graph <- graph_create(rep(1 / 5, 5), transitions)  plot(bonferroni_graph, layout = igraph::layout_in_circle, vertex.size = 30)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"holm","dir":"Articles","previous_headings":"Simple procedures","what":"Holm","title":"Common procedures","text":"Holm procedure starts identical weights Bonferroni, weights updated uniformly hypothesis rejected. updating, always least powerful Bonferroni procedure.","code":"transitions <- matrix(1 / 4, 5, 5) diag(transitions) <- 0  holm_graph <- graph_create(rep(1 / 5, 5), transitions)  plot(holm_graph, layout = igraph::layout_in_circle, vertex.size = 30)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"fixed-sequence","dir":"Articles","previous_headings":"Simple procedures","what":"Fixed sequence","title":"Common procedures","text":"Another common procedure simplicity fixed sequence procedure. places emphasis rejecting hypotheses hypotheses expected p-values slightly alpha, reduced weights Holm procedure cause hypotheses rejected start.  procedures popular control FWER simple, allowing easily understood communicated . However, ’re always procedures fit study best, using complex procedures can make communication difficult. graphical approach can enable powerful procedures used enabling clinical teams understand communicate procedures.","code":"fixed_sequence_graph <- graph_create(   c(1, 0, 0, 0),   rbind(     c(0, 1, 0, 0),     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 0, 0, 0)   ) )  plot(fixed_sequence_graph, nrow = 1, asp = .1)"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"simple-successive","dir":"Articles","previous_headings":"Complex procedures","what":"Simple successive","title":"Common procedures","text":"simple successive procedure introduced [names] [year] paper, [title]. designed experiments involving four hypotheses: Two pairs hypotheses, containing primary related secondary hypothesis. Initial weight split equally pairs passed one pair hypotheses pair rejected.  General successive graphs good example multiple variations may useful slight differences starting edge weights. Variable edge weights currently supported, can done particular graph light wrapper. multiple variations can created compared easily. similar approach used deviating equal split hypothesis weights well.","code":"simple_successive_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   ) )  plot(simple_successive_graph, layout = \"grid\", nrow = 2, vertex.size = 30) simple_successive_var <- function(gamma) {   graph_create(     c(.5, .5, 0, 0),     rbind(       c(0, gamma, 1 - gamma, 0),       c(gamma, 0, 0, 1 - gamma),       c(0, 1, 0, 0),       c(1, 0, 0, 0)     )   ) } plot(   simple_successive_var(.75),   layout = \"grid\",   nrow = 2,   vertex.label.cex = 1.4,   edge.label.cex = 1.4,   vertex.size = 30 )  plot(   simple_successive_var(.9),   layout = \"grid\",   nrow = 2,   vertex.label.cex = 1.4,   edge.label.cex = 1.4,   vertex.size = 30 )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"huque-alosh-bhore-2011","dir":"Articles","previous_headings":"Complex procedures","what":"Huque-Alosh-Bhore (2011)","title":"Common procedures","text":"2011, Huque, Alosh, Bhore proposed another size 4 procedure. ’s one particularly meant ?","code":"hab_2011_graph <- graph_create(   c(1, 0, 0, 0),   rbind(     c(0, .5, .5, 0),     c(0, 0, 0, 1),     c(0, .5, 0, .5),     c(0, 1, 0, 0)   ) )  plot(hab_2011_graph, layout = \"grid\", vertex.size = 30)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"wiens-dmitrienko-2005","dir":"Articles","previous_headings":"Complex procedures","what":"Wiens-Dmitrienko (2005)","title":"Common procedures","text":"","code":"wd_2005_graph <- graph_create(   c(1 / 3, 1 / 3, 1 / 3),   rbind(     c(0, 1, 0),     c(0, 0, 1),     c(.5, .5, 0)   ) )  plot(   wd_2005_graph,   layout = \"grid\",   nrow = 1,   edge_curves = c(pairs = -4, \"H3|H1\" = -4),   vertex.size = 30,   asp = .1 )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"parallel-gate-keeping","dir":"Articles","previous_headings":"Complex procedures","what":"Parallel gate-keeping","title":"Common procedures","text":"[year], [names] introduced parallel gate-keeping procedure. useful …?","code":"par_gate_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, .5, .5),     c(0, 0, .5, .5),     c(0, 0, 0, 1),     c(0, 0, 1, 0)   ) )   plot(par_gate_graph, layout = \"grid\", nrow = 2, vertex.size = 30)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"improved-parallel-gate-keeping","dir":"Articles","previous_headings":"Complex procedures","what":"Improved parallel gate-keeping","title":"Common procedures","text":"One shortcoming parallel gate-keeping approach case e.g. H2, H3, H4 found significant. three deleted, H1 left 0.5 weight. makes graph sub-optimal.  graph can made optimal adding epsilon edges going back secondary primary hypotheses. Epsilon edges infinitesimal weight creates connection hypotheses effectively propagates weight ’s edge left exiting hypothesis. yields improved parallel gate-keeping procedure.","code":"plot(graph_update(par_gate_graph, 2:4), vertex.size = 30) imp_par_gate_graph <- graph_create(   c(.5, .5, 0, 0),   rbind(     c(0, 0, .5, .5),     c(0, 0, .5, .5),     c(.0001, 0, 0, .9999),     c(0, .0001, .9999, 0)   ) )  plot(   imp_par_gate_graph,   layout = \"grid\",   nrow = 2,   eps = .001,   vertex.size = 30 ) plot(   graph_update(imp_par_gate_graph, c(2)),   vertex.size = 60,   vertex.label.cex = 2.5,   edge.label.cex = 2.5,   eps = 1e-3 )  plot(   graph_update(imp_par_gate_graph, c(2, 4)),   vertex.size = 60,   vertex.label.cex = 2.5,   edge.label.cex = 2.5 )  plot(   graph_update(imp_par_gate_graph, c(2, 4, 3)),   vertex.size = 60,   vertex.label.cex = 2.5,   edge.label.cex = 2.5 )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Common procedures","text":"examples just unlimited possibilities enabled graphical approach MCPs. Graphs can customized based priorities trial design, marginal power endpoints, assumptions, expected known correlation endpoints. graphical approach allows complex procedures maximize chances successful trial enabling better communication insight procedures.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"multiple-comparison-problem","dir":"Articles","previous_headings":"","what":"Multiple comparison problem","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Consider confirmatory clinical trial comparing test treatment (treatment) control treatment (control) disease. two doses treatment: low dose high dose. two endpoints included multiplicity adjustment strategy, primary endpoint (PE) secondary endpoint (SE). total, four null hypotheses: \\(H_1\\) \\(H_3\\) primary secondary hypotheses respectively low dose versus control; \\(H_2\\) \\(H_4\\) primary secondary hypotheses respectively high dose versus control. clinical considerations constrain structure multiple comparison procedures; considerations can flexibly incorporated using graphical approaches. First, low high doses considered equally important, means rejecting primary hypothesis either dose versus control leads successful trial. Regarding secondary hypotheses, one tested corresponding primary hypothesis rejected. means \\(H_3\\) tested \\(H_1\\) rejected; \\(H_4\\) tested \\(H_2\\) rejected. addition, statistical considerations complete graph. primary hypotheses \\(H_1\\) \\(H_2\\) equal hypothesis weight 0.5. secondary hypotheses hypothesis weight 0. primary hypothesis rejected, weight propagate along two outgoing edges: one primary hypothesis one descendant secondary hypothesis. two edges equal transition weight 0.5. primary secondary hypotheses rejected dose-control comparison, hypothesis weights propagated primary hypothesis dose-control comparison. specifications, can create following graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"create-a-graph","dir":"Articles","previous_headings":"","what":"Create a graph","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0.5, 0.5, 0),   c(0.5, 0, 0, 0.5),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\")  g <- graph_create(hypotheses, transitions, hyp_names)  plot(g, layout = \"grid\", vertex.size = 20)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"perform-the-graphical-multiple-comparison-procedure","dir":"Articles","previous_headings":"","what":"Perform the graphical multiple comparison procedure","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given set p-values \\(H_1, \\ldots, H_4\\), graphical multiple comparison procedure can performed control familywise error rate (FWER) significance level alpha. graph_test_shortcut function agnostic one-sided two-sided tests. one-sided p-values, alpha often set 0.025 (default); two-sided p-values, alpha often set 0.05. consider one-sided tests . hypothesis rejected adjusted p-value less equal alpha. running procedure, hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\) rejected adjusted p-value calculated.","code":"p_values <- c(.013, .012, .105, .005) test_results <- graph_test_shortcut(g, p = p_values, alpha = 0.025) test_results$outputs # Adjusted p-values and rejections #> $adjusted_p #>    H1    H2    H3    H4  #> 0.024 0.024 0.105 0.024  #>  #> $rejected #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE  TRUE  #>  #> $graph #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0 #> H2: 0 #> H3: 1 #> H4: 0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  0  0 #>  H2  0  0  0  0 #>  H3  0  0  0  0 #>  H4  0  0  0  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"obtain-final-and-intermediate-graphs-after-rejections","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain final and intermediate graphs after rejections","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"addition, two graphs provided: one initial graph one final graph removing rejected hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\). also interested intermediate graphs - example, graph \\(H_1\\) \\(H_2\\) rejected - can specify verbose = TRUE. Note intermediate graphs depends order rejections, .e., sequence hypotheses rejected. default order defined increasing adjusted p-values, followed earlier hypothesis numbering case ties. Among rejected hypotheses, one smallest adjusted p-value first rejected one largest adjusted p-value last rejected. example, default order rejection \\(H_2\\rightarrow H_1\\rightarrow H_4\\). obtain intermediate graphs based order rejection, one can specify test_results_verbose$details$results. example, graph \\(H_1\\) \\(H_2\\) rejected given test_results_verbose$details$results[[3]]. order rejections may unique orders valid. example, rejected hypotheses \\(H_1\\), \\(H_2\\) \\(H_4\\). default order rejections \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\). Another valid order rejections \\(H_2 \\rightarrow H_4 \\rightarrow H_1\\). However, first rejected hypothesis can \\(H_1\\) \\(H_4\\). obtain possible rejection orders, one can use function graph_rejection_orderings. Initial, intermediate final graphs can obtained using function graph_update particular order rejections.","code":"test_results_verbose <-   graph_test_shortcut(g, p = p_values, alpha = 0.025, verbose = TRUE) test_results_verbose$details$results[[3]] # Intermediate graph after H1 and H2 rejected #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.0 #> H2: 0.0 #> H3: 0.5 #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  0  0 #>  H2  0  0  0  0 #>  H3  0  0  0  1 #>  H4  0  0  1  0 orders <- graph_rejection_orderings(test_results)$valid_orderings # Obtain all valid orders of rejections orders #> [[1]] #> H2 H1 H4  #>  2  1  4  #>  #> [[2]] #> H2 H4 H1  #>  2  4  1 graph_update(g, delete = orders[[2]]) # Graphs following the order of H2, H4, and H1 #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>      H1  H2  H3  H4 #>  H1 0.0 0.5 0.5 0.0 #>  H2 0.5 0.0 0.0 0.5 #>  H3 0.0 1.0 0.0 0.0 #>  H4 1.0 0.0 0.0 0.0 #>  #> Updated graph after deleting hypotheses 2, 4, 1 #>  #> --- Hypothesis weights --- #> H1: NA #> H2: NA #> H3:  1 #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA NA NA NA #>  H3 NA NA  0 NA #>  H4 NA NA NA NA #>  #> Deletion sequence ($intermediate_graphs) --------------------------------------- #>  #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>     Step 1: Updated graph after removing hypothesis 2 #>  #>     --- Hypothesis weights --- #>     H1: 0.75 #>     H2:   NA #>     H3: 0.00 #>     H4: 0.25 #>  #>     --- Transition weights --- #>              H1       H2       H3       H4 #>     H1 0.000000       NA 0.666667 0.333333 #>     H2       NA       NA       NA       NA #>     H3 0.500000       NA 0.000000 0.500000 #>     H4 1.000000       NA 0.000000 0.000000 #>  #>       Step 2: Updated graph after removing hypotheses 2, 4 #>  #>       --- Hypothesis weights --- #>       H1:  1 #>       H2: NA #>       H3:  0 #>       H4: NA #>  #>       --- Transition weights --- #>          H1 H2 H3 H4 #>       H1  0 NA  1 NA #>       H2 NA NA NA NA #>       H3  1 NA  0 NA #>       H4 NA NA NA NA #>  #>         Step 3: Updated graph after removing hypotheses 2, 4, 1 #>  #>         --- Hypothesis weights --- #>         H1: NA #>         H2: NA #>         H3:  1 #>         H4: NA #>  #>         --- Transition weights --- #>            H1 H2 H3 H4 #>         H1 NA NA NA NA #>         H2 NA NA NA NA #>         H3 NA NA  0 NA #>         H4 NA NA NA NA #>  #>   Final updated graph after removing deleted hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"obtain-adjusted-significance-levels","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain adjusted significance levels","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"equivalent way obtain rejections adjusting significance levels. hypothesis rejected p-value less equal adjusted significance level. adjusted significance levels calculated order adjusted p-values: \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\), four steps checking rejections. First, \\(H_2\\) rejected adjusted significance level 0.5 * alpha. Second, \\(H_1\\) rejected adjusted significance level 0.75 * alpha, \\(H_2\\) rejected. Third, \\(H_4\\) rejected adjusted significance level 0.5 * alpha, \\(H_1\\) \\(H_2\\) rejected. Fourth finally, \\(H_3\\) rejected adjusted significance level alpha, \\(H_1\\), \\(H_2\\) \\(H_4\\) rejected. results can obtained specifying test_values = TRUE.","code":"test_results_test_values <-   graph_test_shortcut(g, p = p_values, alpha = 0.025, test_values = TRUE) test_results_test_values$test_values$results #>    Step Hypothesis     p <= Weight * Alpha Inequality_holds #> H2    1         H2 0.012 <=   0.50 * 0.025             TRUE #> H1    2         H1 0.013 <=   0.75 * 0.025             TRUE #> H4    3         H4 0.005 <=   0.50 * 0.025             TRUE #> H3    4         H3 0.105 <=   1.00 * 0.025            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"power-calculation","dir":"Articles","previous_headings":"","what":"Power calculation","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given graph, trial team often interested power trial. single null hypothesis, power probability true positive - , rejecting null hypothesis significance level alpha alternative hypothesis true. multiple null hypotheses, multiple versions power. example, power reject least one hypothesis vs power reject hypotheses, given alternative hypotheses true. graphical multiple comparison procedures, also important understand power reject hypothesis, given multiplicity adjustment. Sometimes, team may want customize definitions power define success. Thus power calculation important aspect trial design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-marginal-power-for-primary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for primary hypotheses","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Assume primary endpoint occurrence unfavorable clinical event. evaluate treatment effect, proportion patients event calculated, lower proportion preferred. Assume proportions 0.181 low high doses, 0.3 control. Using equal randomization among three treatment groups, clinical trial team chooses total sample size 600 200 per group. leads marginal power 80% \\(H_1\\) \\(H_2\\), respectively, using two-sample test difference proportions unpooled variance one-sided significance level 0.025. calculation, use marginal power combine information treatment effect, nuisance parameter, sample sizes hypothesis. Note significance level used marginal power calculation must alpha, used power calculation significance level FWER control. addition, marginal power one--one relationship noncentrality parameter, illustrated .","code":"alpha <- 0.025 prop <- c(0.3, 0.181, 0.181) sample_size <- rep(200, 3)  unpooled_variance <- prop[-1] * (1 - prop[-1]) / sample_size[-1] +   prop[1] * (1 - prop[1]) / sample_size[1]  noncentrality_parameter_primary <-   -(prop[-1] - prop[1]) / sqrt(unpooled_variance)  power_marginal_primary <- pnorm(qnorm(alpha, lower.tail = FALSE),   noncentrality_parameter_primary, 1,   lower.tail = FALSE )  names(power_marginal_primary) <- c(\"H1\", \"H2\") power_marginal_primary #>        H1        H2  #> 0.8028315 0.8028315"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-marginal-power-for-secondary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for secondary hypotheses","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Assume secondary endpoint change total medication score baseline, continuous outcome. evaluate treatment effect, mean change calculated, greater reduction preferred. Assume mean change baseline reduction 7.5 8.25, respectively low high doses, 5 control. assume known common standard deviation 10. Given sample size 200 per treatment group, marginal power 71% 90% \\(H_3\\) \\(H_4\\), respectively, using two-sample \\(z\\)-test difference means one-sided significance level 0.025.","code":"mean_change <- c(5, 7.5, 8.25) sd <- rep(10, 3) variance <- sd[-1]^2 / sample_size[-1] + sd[1]^2 / sample_size[1]  noncentrality_parameter_secondary <- (mean_change[-1] - mean_change[1]) /   sqrt(variance)  power_marginal_secondary <- pnorm(qnorm(alpha, lower.tail = FALSE),   noncentrality_parameter_secondary, 1,   lower.tail = FALSE )  names(power_marginal_secondary) <- c(\"H3\", \"H4\") power_marginal_secondary #>        H3        H4  #> 0.7054139 0.9014809"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"input-correlation-structure-to-simulate-test-statistics","dir":"Articles","previous_headings":"Power calculation","what":"Input: Correlation structure to simulate test statistics","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"addition marginal power, also need make assumptions joint distribution test statistics. example, assume follow multivariate normal distribution means defined noncentrality parameters correlation matrix \\(R\\). obtain correlations, helpful understand two types correlations example. correlation two dose-control comparisons endpoint correlation endpoints. former correlation can calculated function sample size. example, correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_3+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. correlation test statistics \\(H_3\\) \\(H_4\\) . hand, correlation endpoints dose-control comparison often estimated based prior knowledge previous trials. Without information, assume \\(\\rho_{13}=\\rho_{24}=0.5\\). practice, one set correlation parameter try multiple values assess sensitivity assumption. Regarding correlation test statistics \\(H_1\\) \\(H_4\\) \\(H_2\\) \\(H_3\\), even difficult estimate. use simple product rule, means correlation product correlations two previously assumed correlations. example, \\(\\rho_{14}=\\rho_{12}*\\rho_{24}\\) \\(\\rho_{23}=\\rho_{12}*\\rho_{13}\\). practice, one may make assumptions instead using product rule.","code":"corr <- matrix(0, nrow = 4, ncol = 4)  corr[1, 2] <- corr[3, 4] <- sqrt(sample_size[2] / sum(sample_size[1:2]) *   sample_size[3] / sum(sample_size[c(1, 3)]))  rho <- 0.5 corr[1, 3] <- corr[2, 4] <- rho corr[1, 4] <- corr[2, 3] <- corr[1, 2] * rho corr <- corr + t(corr) diag(corr) <- 1 colnames(corr) <- hyp_names rownames(corr) <- hyp_names corr #>      H1   H2   H3   H4 #> H1 1.00 0.50 0.50 0.25 #> H2 0.50 1.00 0.25 0.50 #> H3 0.50 0.25 1.00 0.50 #> H4 0.25 0.50 0.50 1.00"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"user-defined-success-criteria","dir":"Articles","previous_headings":"Power calculation","what":"User-defined success criteria","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"mentioned earlier, multiple versions “power” multiple hypotheses. Commonly used “power” definitions include: Local power: probability hypothesis rejected (multiplicity adjustment) Expected . rejections: expected number rejections Power reject 1 : probability reject least one hypothesis Power reject : probability reject hypotheses default outputs graph_calculate_power function. addition, user can customize success criteria define versions “power”.","code":"# Probability to reject H1 H1 <- function(x) x[1]  # Expected number of rejections `Expected no. of rejections` <- function(x) x[1] + x[2] + x[3] + x[4]  # Probability to reject at least one hypothesis `AtLeast1` <- function(x) x[1] | x[2] | x[3] | x[4]  # Probability to reject all hypotheses `All` <- function(x) x[1] & x[2] & x[3] & x[4]  # Probability to reject both H1 and H2 `H1andH2` <- function(x) x[1] & x[2]  # Probability to reject both hypotheses for the low dose or the high dose `(H1andH3)or(H2andH4)` <- function(x) (x[1] & x[3]) | (x[2] & x[4]) succ <- list(   H1, `Expected no. of rejections`, `AtLeast1`, `All`, `H1andH2`,   `(H1andH3)or(H2andH4)` )  succ <- setNames(   succ,   c(     \"H1\", \"Expected no. of rejections\", \"AtLeast1\", \"All\", \"H1andH2\",     \"(H1andH3)or(H2andH4)\"   ) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortuct-testing.html","id":"output-calculate-power","dir":"Articles","previous_headings":"Power calculation","what":"Output: Calculate power","title":"Sequentially rejective graphical approaches based on Bonferroni tests","text":"Given inputs, can calculate power via simulation graphical multiple comparison procedure one-sided significance level alpha = 0.025 using sim_n = 1e5 simulations seed sim_seed = 1234. local power 0.758, 0.765, 0.689, 0.570, respectively \\(H_1, \\ldots, H_4\\). Note local power lower marginal power former adjusted multiplicity. power reject least one hypothesis 0.856 power reject hypotheses 0.512. expected number rejections 2.782. last two user-defined success criteria, probability reject \\(H_1\\) \\(H_2\\) 0.667, probability reject least one pair \\((H_1\\) \\(H_3)\\) \\((H_2\\) \\(H_4)\\) 0.747. see detailed outputs simulated p-values rejection decisions hypotheses, specify verbose = TRUE. produce lot outputs. allow flexible printing functions, user can change following: indented space default setting indent = 2 precision numeric values (.e., number significant digits) default setting precision = 4","code":"output <- graph_calculate_power(g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(power_marginal_primary, power_marginal_secondary),   sim_success = succ,   sim_seed = 1234 ) output #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                       H1     H2     H3     H4 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 #>  #>   Correlation:      H1   H2   H3   H4 #>                H1 1.00 0.50 0.50 0.25 #>                H2 0.50 1.00 0.25 0.50 #>                H3 0.50 0.25 1.00 0.50 #>                H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4 #>                  Local power: 0.7640 0.7589 0.5677 0.6913 #>  #>   Expected no. of rejections: 2.782 #>    Power to reject 1 or more: 0.8556 #>          Power to reject all: 0.5121 #>  #>              Power to reject:      H1   Expected no. of rejections   AtLeast1 #>                                0.7640                       2.7818     0.8556 #>     All   H1andH2   (H1andH3)or(H2andH4) #>  0.5121    0.6673                 0.7470 verbose_output <- graph_calculate_power(g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(power_marginal_primary, power_marginal_secondary),   sim_success = succ,   sim_seed = 1234,   verbose = TRUE )  print(verbose_output) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                       H1     H2     H3     H4 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 #>  #>   Correlation:      H1   H2   H3   H4 #>                H1 1.00 0.50 0.50 0.25 #>                H2 0.50 1.00 0.25 0.50 #>                H3 0.50 0.25 1.00 0.50 #>                H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4 #>                  Local power: 0.7640 0.7589 0.5677 0.6913 #>  #>   Expected no. of rejections: 2.782 #>    Power to reject 1 or more: 0.8556 #>          Power to reject all: 0.5121 #>  #>              Power to reject:      H1   Expected no. of rejections   AtLeast1 #>                                0.7640                       2.7818     0.8556 #>     All   H1andH2   (H1andH3)or(H2andH4) #>  0.5121    0.6673                 0.7470 #>  #> Simulation details ($details) -------------------------------------------------- #>     p_sim_H1  p_sim_H2  p_sim_H3  p_sim_H4 rej_H1 rej_H2 rej_H3 rej_H4 #>    3.082e-02 1.207e-02 4.119e-03 9.324e-02  FALSE   TRUE  FALSE  FALSE #>    7.934e-04 6.499e-04 2.452e-02 2.966e-03   TRUE   TRUE   TRUE   TRUE #>    3.030e-02 5.954e-02 5.431e-02 2.626e-02  FALSE  FALSE  FALSE  FALSE #>    9.743e-03 3.319e-03 7.417e-04 4.025e-04   TRUE   TRUE   TRUE   TRUE #>    1.971e-02 8.616e-03 1.642e-02 2.418e-07   TRUE   TRUE   TRUE   TRUE #>    3.121e-03 6.702e-03 1.374e-02 2.752e-04   TRUE   TRUE   TRUE   TRUE #>    3.022e-02 1.424e-01 6.038e-03 2.117e-02  FALSE  FALSE  FALSE  FALSE #>    2.498e-03 2.940e-02 4.143e-04 2.208e-03   TRUE  FALSE   TRUE  FALSE #>    6.190e-02 3.873e-02 3.166e-01 5.700e-02  FALSE  FALSE  FALSE  FALSE #>    3.678e-01 1.896e-01 7.023e-02 1.190e-02  FALSE  FALSE  FALSE  FALSE #>   ... (Use `print(x, rows = <nn>)` for more)  print(verbose_output, indent = 4, precision = 6) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>     Initial graph #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2: 0.5 #>     H3: 0.0 #>     H4: 0.0 #>  #>     --- Transition weights --- #>         H1  H2  H3  H4 #>     H1 0.0 0.5 0.5 0.0 #>     H2 0.5 0.0 0.0 0.5 #>     H3 0.0 1.0 0.0 0.0 #>     H4 1.0 0.0 0.0 0.0 #>  #>     Alpha = 0.025 #>  #>     Test types #>     bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>     Testing 100,000 simulations - random seed 1234 & multivariate normal params: #>  #>                           H1       H2       H3       H4 #>     Marginal power: 0.802831 0.802831 0.705414 0.901481 #>  #>     Correlation:      H1   H2   H3   H4 #>                  H1 1.00 0.50 0.50 0.25 #>                  H2 0.50 1.00 0.25 0.50 #>                  H3 0.50 0.25 1.00 0.50 #>                  H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                      H1      H2      H3      H4 #>                    Local power: 0.76396 0.75887 0.56767 0.69133 #>  #>     Expected no. of rejections: 2.78183 #>      Power to reject 1 or more: 0.85557 #>            Power to reject all: 0.51205 #>  #>                Power to reject:       H1   Expected no. of rejections #>                                  0.76396                      2.78183 #>    AtLeast1     All   H1andH2   (H1andH3)or(H2andH4) #>     0.85557 0.51205   0.66726                0.74695 #>  #> Simulation details ($details) -------------------------------------------------- #>         p_sim_H1    p_sim_H2    p_sim_H3    p_sim_H4 rej_H1 rej_H2 rej_H3 rej_H4 #>      3.08204e-02 1.20654e-02 4.11858e-03 9.32434e-02  FALSE   TRUE  FALSE  FALSE #>      7.93372e-04 6.49905e-04 2.45178e-02 2.96560e-03   TRUE   TRUE   TRUE   TRUE #>      3.02992e-02 5.95396e-02 5.43083e-02 2.62583e-02  FALSE  FALSE  FALSE  FALSE #>      9.74332e-03 3.31857e-03 7.41721e-04 4.02469e-04   TRUE   TRUE   TRUE   TRUE #>      1.97135e-02 8.61618e-03 1.64183e-02 2.41833e-07   TRUE   TRUE   TRUE   TRUE #>      3.12066e-03 6.70231e-03 1.37441e-02 2.75170e-04   TRUE   TRUE   TRUE   TRUE #>      3.02208e-02 1.42376e-01 6.03828e-03 2.11740e-02  FALSE  FALSE  FALSE  FALSE #>      2.49757e-03 2.94026e-02 4.14273e-04 2.20779e-03   TRUE  FALSE   TRUE  FALSE #>      6.18994e-02 3.87257e-02 3.16613e-01 5.69979e-02  FALSE  FALSE  FALSE  FALSE #>      3.67792e-01 1.89598e-01 7.02265e-02 1.18965e-02  FALSE  FALSE  FALSE  FALSE #>     ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dong Xi. Author, maintainer. Ethan Brockmann. Author. Gilead Biostatistics. Copyright holder, funder. Atorus Research LLC. Copyright holder.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xi, D.; Brockmann, E. (2023). graphicalMCP: Graph-based multiple comparison procedures. version 0.1.0. Gilead Sciences, Inc. Foster City, California. https://github.com/Gilead-BioStats/graphicalMCP Frank Bretz, Martin Posch, Ekkehard Glimm, Florian Klinglmueller, Willi Maurer, Kornelius Rohmeyer (2011), Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes parametric tests. Biometrical Journal 53 (6), pages 894--913, Wiley.","code":"@Manual{,   title = {{graphicalMCP}: Graph-based multiple comparison procedures.},   author = {Dong Xi and Ethan Brockmann},   organization = {Gilead Sciences, Inc},   note = {version 0.1.0},   year = {2023},   url = {https://github.com/Gilead-BioStats/graphicalMCP}, } @Article{,   title = {Graphical approaches for multiple comparison procedures using weighted Bonferroni, Simes or parametric tests},   author = {Frank Bretz and Martin Posch and Ekkehard Glimm and Florian Klinglmueller and Willi Maurer and Kornelius Rohmeyer},   journal = {Biometrical Journal},   year = {2011},   publisher = {Wiley},   volume = {53},   number = {6},   pages = {894--913},   url = {http://onlinelibrary.wiley.com/doi/10.1002/bimj.201000239/full}, }"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Graphical Approach for Multiple Comparison Procedures","text":"multiple comparison procedure (MCP) statistical analysis method allows assessing efficacy multiple endpoints, dependent , single clinical trial. Endpoints can different doses, treatment different conditions, combined superiority & non-inferiority testing, many others. key feature MCPs strongly control type-error rate level alpha. Bretz et al (2011), graphical method MCPs described, separates weighting clinical endpoints particular statistical test used assess endpoint. graphical approach can also helpful communicating study design clinical teams. package low-dependency implementation methods.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphical Approach for Multiple Comparison Procedures","text":"graphicalMCP CRAN, install GitHub ","code":"# install.packages(\"pak\") pak::pak(\"Gilead-BioStats/graphicalMCP@dev\")"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"initial-graph","dir":"","previous_headings":"Basic usage","what":"Initial graph","title":"Graphical Approach for Multiple Comparison Procedures","text":"base object graphicalMCP initial_graph, weighted, directed graph represented matrix transition (edge) weights, vector hypothesis (vertex) weights.","code":"library(graphicalMCP)  # A graphical multiple comparison procedure with two primary hypotheses (H1 # and H2) and two secondary hypotheses (H3 and H4) # See Figure 1 in Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, # W., & Rohmeyer, K. (2011). Graphical approaches for multiple comparison # procedures using weighted Bonferroni, Simes, or parametric tests. Biometrical # Journal, 53(6), 894-913. hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\") example_graph <- graph_create(hypotheses, transitions, hyp_names)  plot(example_graph, layout = \"grid\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"update-graph","dir":"","previous_headings":"Basic usage","what":"Update graph","title":"Graphical Approach for Multiple Comparison Procedures","text":"Hypotheses can deleted MCP using graph_update(). Updated weights transitions calculated according weighting strategy Algorithm 1 Bretz et al (2011). distinguish deleting rejecting glossary.","code":"graph_update(example_graph, delete = c(FALSE, TRUE, TRUE, FALSE))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"generate-weights","dir":"","previous_headings":"Basic usage","what":"Generate weights","title":"Graphical Approach for Multiple Comparison Procedures","text":"weights sub-graphs can calculated graph_generate_weights(). uses efficient code hood graph_update() order performant larger graphs. information closure can found [Link closure vignette].","code":"graph_generate_weights(example_graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"test-hypotheses","dir":"","previous_headings":"Basic usage","what":"Test hypotheses","title":"Graphical Approach for Multiple Comparison Procedures","text":"Bonferroni testing via shortcut method supported graphicalMCP. test can performed graph_test_shortcut(), generates report showing graph & test results. See insight hypothesis rejected setting verbose test_values flags. details shortcut testing can found [link shortcut vignette]. graph can also tested using Simes- parametric-based testing using closure test. types tests added time, combination tests can used groups hypotheses. Additional details closure testing can found [link closed test vignette].","code":"graph_test_shortcut(example_graph, p = c(.01, .03, .02, .01), alpha = .025) graph_test_closure(   example_graph,   p = c(.01, .03, .02, .01),   alpha = .025,   test_types = \"bonferroni\",   test_groups = list(1:4) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"power-simulations","dir":"","previous_headings":"Basic usage","what":"Power simulations","title":"Graphical Approach for Multiple Comparison Procedures","text":"’s always obvious graph structure easy difficult reject hypothesis. One way understand better run power simulation, many p-values simulated, graph tested . valid test types & hypothesis groupings valid power simulations well. Power simulations discussed [shortcut testing vignette] [closure testing vignette].","code":"graph_calculate_power(   example_graph,   sim_n = 1e5,   power_marginal = c(.9, .9, .8, .8) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Graphical Approach for Multiple Comparison Procedures","text":"methods originally implemented gMCP package, still available CRAN today. also lighter version gMCP implemented gMCPmini successor, gMCPLite. two contain subset original functionality, remove rJava dependency add plotting functionality based ggplot2. However, development ceased original package, hope re-implement methods general testing framework; fewer dependencies, particular shedding Java dependency; simpler, transparent S3 classes; improvements accuracy parametric Simes test methods. portion Simes testing also implemented lrstat package.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Graphical Approach for Multiple Comparison Procedures","text":"","code":"citation(\"graphicalMCP\") #> To cite graphicalMCP in publications use: #>  #>   Xi, D.; Brockmann, E. (2023). graphicalMCP: Graph-based multiple #>   comparison procedures. version 0.1.0. Gilead Sciences, Inc. Foster #>   City, California. https://github.com/Gilead-BioStats/graphicalMCP #>  #>   Frank Bretz, Martin Posch, Ekkehard Glimm, Florian Klinglmueller, #>   Willi Maurer, Kornelius Rohmeyer (2011), Graphical approaches for #>   multiple comparison procedures using weighted Bonferroni, Simes or #>   parametric tests. Biometrical Journal 53 (6), pages 894--913, Wiley. #>  #> To see these entries in BibTeX format, use 'print(<citation>, #> bibtex=TRUE)', 'toBibtex(.)', or set #> 'options(citation.bibtex.max=999)'."},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"glossary-of-terms","dir":"","previous_headings":"","what":"Glossary of terms","title":"Graphical Approach for Multiple Comparison Procedures","text":"package seeks accurate performant, course. beyond , much thought put readability code. Whether read user validating methods, developer extending package new uses, contributor helping enhance core functionality, hope code contained can serve educational document grow people’s understanding graphical approach multiple comparison procedures. end, several entities encountered world graphical MCPs define . used internal code package, inputs output one exported functions. believe definitions clarified improved, please contact package authors submit issue GitHub repository. set weights, adjusted according testing algorithm: Bonferroni: change Simes: Sum weights hypotheses smaller p-values Parametric: Multiply weights c-value, based joint distribution power reject null hypothesis full alpha. Closely related non-centrality parameter, mean null hypothesis underlying multivariate normal distribution: ncp = qnorm(1 - alpha) - qnorm(1 - marginal_power)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate adjusted p-values — adjust_p_bonferroni","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Calculate adjusted p-values","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"adjust_p_bonferroni(p, hypotheses)  adjust_p_parametric(p, hypotheses, test_corr = NULL)  adjust_p_simes(p, hypotheses)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"p numeric vector p-values hypotheses numeric vector hypothesis weights test_corr (Optional) numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"single adjusted p-value given group","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"set.seed(22723)  w <- c(\"H1\" = .75, \"H2\" = .25, \"H3\" = 0) p <- c(\"H1\" = .019, \"H2\" = .025, \"H3\" = .05)  graphicalMCP:::adjust_p_bonferroni(p, w) #> [1] 0.02533333 graphicalMCP:::adjust_p_simes(p, w) #> [1] 0.025  corr1 <- diag(3) corr2 <- corr1 corr2[lower.tri(corr2)] <- corr2[upper.tri(corr2)] <- runif(3, -1, 1)  # No correlation graphicalMCP:::adjust_p_parametric(p, w, corr1) #> [1] 0.025213  # Uniform random pairwise correlations graphicalMCP:::adjust_p_parametric(p, w, corr2) #> [1] 0.02196006"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"weights created graph_generate_weights() work immediately Bonferroni testing, parametric Simes testing require additional calculations. adjust_weights_*() functions apply parametric Simes weight increases get updated weights testing. also subset weights columns appropriate groups","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"adjust_weights_parametric(   matrix_weights,   matrix_intersections,   test_corr,   alpha,   test_groups )  adjust_weights_simes(matrix_weights, p, groups)  c_value_function(x, hypotheses, test_corr, alpha)  solve_c_parametric(hypotheses, test_corr, alpha)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"matrix_weights second half columns graph_generate_weights() output, indicating weights intersection matrix_intersections first half columns graph_generate_weights() output, indicating hypotheses contained intersection test_corr numeric matrix correlations hypotheses' test statistics alpha numeric scalar specifying global significance level testing test_groups list numeric vectors specifying hypotheses test together p numeric vector p-values x root solve stats::uniroot() hypotheses numeric vector hypothesis weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Outputs: adjust_weights_*(), matrix shape weighting_strategy, weights adjusted according specified adjustment method c_value_function(), \\(c_{J_h}\\) value given group, according Formula 6 Xi et al. (2017).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"p <- 1:6 / 200  g <- bonferroni_holm(6) gw_large <- graph_generate_weights(g)  gw_0 <- gw_large[, 7:12] gw <- ifelse(gw_large[, 1:6], gw_0, NA)  graphicalMCP:::adjust_weights_parametric(   gw_0,   gw_large[, 1:6],   diag(6),   .05,   list(1:3) ) #>           H1        H2        H3 #> 1  0.1680752 0.1680752 0.1680752 #> 2  0.2020340 0.2020340 0.2020340 #> 3  0.2020340 0.2020340 0.2020340 #> 4  0.2531918 0.2531918 0.2531918 #> 5  0.2020340 0.2020340 0.2020340 #> 6  0.2531918 0.2531918 0.2531918 #> 7  0.2531918 0.2531918 0.2531918 #> 8  0.3390485 0.3390485 0.3390485 #> 9  0.2010082 0.2010082 0.0000000 #> 10 0.2515823 0.2515823 0.0000000 #> 11 0.2515823 0.2515823 0.0000000 #> 12 0.3361584 0.3361584 0.0000000 #> 13 0.2515823 0.2515823 0.0000000 #> 14 0.3361584 0.3361584 0.0000000 #> 15 0.3361584 0.3361584 0.0000000 #> 16 0.5064113 0.5064113 0.0000000 #> 17 0.2010082 0.0000000 0.2010082 #> 18 0.2515823 0.0000000 0.2515823 #> 19 0.2515823 0.0000000 0.2515823 #> 20 0.3361584 0.0000000 0.3361584 #> 21 0.2515823 0.0000000 0.2515823 #> 22 0.3361584 0.0000000 0.3361584 #> 23 0.3361584 0.0000000 0.3361584 #> 24 0.5064113 0.0000000 0.5064113 #> 25 0.2500000 0.0000000 0.0000000 #> 26 0.3333333 0.0000000 0.0000000 #> 27 0.3333333 0.0000000 0.0000000 #> 28 0.5000000 0.0000000 0.0000000 #> 29 0.3333333 0.0000000 0.0000000 #> 30 0.5000000 0.0000000 0.0000000 #> 31 0.5000000 0.0000000 0.0000000 #> 32 1.0000000 0.0000000 0.0000000 #> 33 0.0000000 0.2010082 0.2010082 #> 34 0.0000000 0.2515823 0.2515823 #> 35 0.0000000 0.2515823 0.2515823 #> 36 0.0000000 0.3361584 0.3361584 #> 37 0.0000000 0.2515823 0.2515823 #> 38 0.0000000 0.3361584 0.3361584 #> 39 0.0000000 0.3361584 0.3361584 #> 40 0.0000000 0.5064113 0.5064113 #> 41 0.0000000 0.2500000 0.0000000 #> 42 0.0000000 0.3333333 0.0000000 #> 43 0.0000000 0.3333333 0.0000000 #> 44 0.0000000 0.5000000 0.0000000 #> 45 0.0000000 0.3333333 0.0000000 #> 46 0.0000000 0.5000000 0.0000000 #> 47 0.0000000 0.5000000 0.0000000 #> 48 0.0000000 1.0000000 0.0000000 #> 49 0.0000000 0.0000000 0.2500000 #> 50 0.0000000 0.0000000 0.3333333 #> 51 0.0000000 0.0000000 0.3333333 #> 52 0.0000000 0.0000000 0.5000000 #> 53 0.0000000 0.0000000 0.3333333 #> 54 0.0000000 0.0000000 0.5000000 #> 55 0.0000000 0.0000000 0.5000000 #> 56 0.0000000 0.0000000 1.0000000 #> 57 0.0000000 0.0000000 0.0000000 #> 58 0.0000000 0.0000000 0.0000000 #> 59 0.0000000 0.0000000 0.0000000 #> 60 0.0000000 0.0000000 0.0000000 #> 61 0.0000000 0.0000000 0.0000000 #> 62 0.0000000 0.0000000 0.0000000 #> 63 0.0000000 0.0000000 0.0000000  graphicalMCP:::adjust_weights_simes(gw_0, p, list(4:6)) #>           H4        H5        H6 #> 1  0.1666667 0.3333333 0.5000000 #> 2  0.2000000 0.4000000 0.4000000 #> 3  0.2000000 0.2000000 0.4000000 #> 4  0.2500000 0.2500000 0.2500000 #> 5  0.0000000 0.2000000 0.4000000 #> 6  0.0000000 0.2500000 0.2500000 #> 7  0.0000000 0.0000000 0.2500000 #> 8  0.0000000 0.0000000 0.0000000 #> 9  0.2000000 0.4000000 0.6000000 #> 10 0.2500000 0.5000000 0.5000000 #> 11 0.2500000 0.2500000 0.5000000 #> 12 0.3333333 0.3333333 0.3333333 #> 13 0.0000000 0.2500000 0.5000000 #> 14 0.0000000 0.3333333 0.3333333 #> 15 0.0000000 0.0000000 0.3333333 #> 16 0.0000000 0.0000000 0.0000000 #> 17 0.2000000 0.4000000 0.6000000 #> 18 0.2500000 0.5000000 0.5000000 #> 19 0.2500000 0.2500000 0.5000000 #> 20 0.3333333 0.3333333 0.3333333 #> 21 0.0000000 0.2500000 0.5000000 #> 22 0.0000000 0.3333333 0.3333333 #> 23 0.0000000 0.0000000 0.3333333 #> 24 0.0000000 0.0000000 0.0000000 #> 25 0.2500000 0.5000000 0.7500000 #> 26 0.3333333 0.6666667 0.6666667 #> 27 0.3333333 0.3333333 0.6666667 #> 28 0.5000000 0.5000000 0.5000000 #> 29 0.0000000 0.3333333 0.6666667 #> 30 0.0000000 0.5000000 0.5000000 #> 31 0.0000000 0.0000000 0.5000000 #> 32 0.0000000 0.0000000 0.0000000 #> 33 0.2000000 0.4000000 0.6000000 #> 34 0.2500000 0.5000000 0.5000000 #> 35 0.2500000 0.2500000 0.5000000 #> 36 0.3333333 0.3333333 0.3333333 #> 37 0.0000000 0.2500000 0.5000000 #> 38 0.0000000 0.3333333 0.3333333 #> 39 0.0000000 0.0000000 0.3333333 #> 40 0.0000000 0.0000000 0.0000000 #> 41 0.2500000 0.5000000 0.7500000 #> 42 0.3333333 0.6666667 0.6666667 #> 43 0.3333333 0.3333333 0.6666667 #> 44 0.5000000 0.5000000 0.5000000 #> 45 0.0000000 0.3333333 0.6666667 #> 46 0.0000000 0.5000000 0.5000000 #> 47 0.0000000 0.0000000 0.5000000 #> 48 0.0000000 0.0000000 0.0000000 #> 49 0.2500000 0.5000000 0.7500000 #> 50 0.3333333 0.6666667 0.6666667 #> 51 0.3333333 0.3333333 0.6666667 #> 52 0.5000000 0.5000000 0.5000000 #> 53 0.0000000 0.3333333 0.6666667 #> 54 0.0000000 0.5000000 0.5000000 #> 55 0.0000000 0.0000000 0.5000000 #> 56 0.0000000 0.0000000 0.0000000 #> 57 0.3333333 0.6666667 1.0000000 #> 58 0.5000000 1.0000000 1.0000000 #> 59 0.5000000 0.5000000 1.0000000 #> 60 1.0000000 1.0000000 1.0000000 #> 61 0.0000000 0.5000000 1.0000000 #> 62 0.0000000 1.0000000 1.0000000 #> 63 0.0000000 0.0000000 1.0000000"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"Convert gMCP graphicalMCP graph classes","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"","code":"as_initial_graph(graph)  # S3 method for graphMCP as_initial_graph(graph)  # S3 method for igraph as_initial_graph(graph)  as_graphMCP(graph)  # S3 method for initial_graph as_graphMCP(graph)  as_igraph(graph)  # S3 method for initial_graph as_igraph(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"graph initial_graph object graphicalMCP, graphMCP object gMCP, igraph object igraph, depending direction converting","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"as_graphMCP(), gMCP graph object, as_igraph(), igraph object, as_initial_graph(), graphicalMCP graph object","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between gMCP and graphicalMCP graph classes — as_initial_graph","text":"","code":"g1 <- random_graph(5)  if (requireNamespace(\"gMCP\", quietly = TRUE)) {   g2 <- as_graphMCP(g1)    all.equal(g1, as_initial_graph(g2)) } #> [1] TRUE  if (requireNamespace(\"igraph\", quietly = TRUE)) {   g3 <- as_igraph(g1)    all.equal(g1, as_initial_graph(g3)) } #> igraph method #>  [1] \"names for target but not for current\"                              #>  [2] \"Attributes: < Component “class”: 1 string mismatch >\"              #>  [3] \"Length mismatch: comparison on first 2 components\"                 #>  [4] \"Component 1: names for target but not for current\"                 #>  [5] \"Component 1: Numeric: lengths (5, 1) differ\"                       #>  [6] \"Component 2: Modes: numeric, logical\"                              #>  [7] \"Component 2: Lengths: 25, 1\"                                       #>  [8] \"Component 2: Attributes: < Modes: list, NULL >\"                    #>  [9] \"Component 2: Attributes: < Lengths: 2, 0 >\"                        #> [10] \"Component 2: Attributes: < names for target but not for current >\" #> [11] \"Component 2: Attributes: < current is not list-like >\"             #> [12] \"Component 2: target is matrix, current is logical\""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Test hypotheses with the adjusted significance method — test_values_bonferroni","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Test hypotheses adjusted significance method","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"test_values_bonferroni(p, hypotheses, alpha, intersection = NA)  test_values_parametric(p, hypotheses, alpha, intersection = NA, test_corr)  test_values_simes(p, hypotheses, alpha, intersection = NA)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"p numeric vector p-values hypotheses numeric vector hypothesis hypotheses alpha numeric scalar specifying global significance level testing intersection numeric scalar used track intersection test values test_corr numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"data frame columns specifying values used calculate hypothesis test","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"w <- c(H1 = .5, H2 = .5, H3 = 0, H4 = 0)  p <- c(.024, .01, .026, .027)  graphicalMCP:::test_values_bonferroni(p, w, .05) #>    Intersection Hypothesis       Test     p <= c_value * Weight * Alpha #> H1           NA         H1 bonferroni 0.024 <=              0.5 *  0.05 #> H2           NA         H2 bonferroni 0.010 <=              0.5 *  0.05 #> H3           NA         H3 bonferroni 0.026 <=              0.0 *  0.05 #> H4           NA         H4 bonferroni 0.027 <=              0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_parametric(p, w, .05, test_corr = diag(4)) #>    Intersection Hypothesis       Test     p <=  c_value * Weight * Alpha #> H1           NA         H1 parametric 0.024 <= 1.012823 *    0.5 *  0.05 #> H2           NA         H2 parametric 0.010 <= 1.012823 *    0.5 *  0.05 #> H3           NA         H3 parametric 0.026 <= 1.012823 *    0.0 *  0.05 #> H4           NA         H4 parametric 0.027 <= 1.012823 *    0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_simes(p, w, .05) #>   Intersection Hypothesis  Test     p <= c_value * Weight * Alpha #> 1           NA         H1 simes 0.024 <=              1.0 *  0.05 #> 2           NA         H2 simes 0.010 <=              0.5 *  0.05 #> 3           NA         H3 simes 0.026 <=              1.0 *  0.05 #> 4           NA         H4 simes 0.027 <=              1.0 *  0.05 #>   Inequality_holds #> 1             TRUE #> 2             TRUE #> 3             TRUE #> 4             TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example graphs from a selection of papers — bonferroni_holm","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Example graphs selection papers","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(num_hyps, hyp_names = NULL)  huque_alosh_bhore_2011(hyp_names = NULL)  wiens_dmitrienko_2005(hyp_names = NULL)  fixed_sequence(num_hyps = 3, hyp_names = NULL)  fallback(hypotheses = c(1, 0, 0), hyp_names = NULL)  simple_successive_1(hyp_names = NULL)  simple_successive_2(hyp_names = NULL)  random_graph(num_hyps, hyp_names = NULL)  complex_example_1(hyp_names = NULL)  complex_example_2(hyp_names = NULL)  complex_example_2(hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example graphs from a selection of papers — bonferroni_holm","text":"num_hyps Number vertices graph hyp_names (Optional) character vector hypothesis names. names specified, hypotheses named sequentially H1, H2, ... hypotheses Hypothesis weights fallback procedure","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example graphs from a selection of papers — bonferroni_holm","text":"S3 object returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(3, hyp_names = paste(\"dose\", letters[1:3])) #> Initial graph #>  #> --- Hypothesis weights --- #> dose a: 0.3333 #> dose b: 0.3333 #> dose c: 0.3333 #>  #> --- Transition weights --- #>         dose a dose b dose c #>  dose a    0.0    0.5    0.5 #>  dose b    0.5    0.0    0.5 #>  dose c    0.5    0.5    0.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain hypothesis rejection probabilities — graph_calculate_power","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"often difficult tell likely given hypothesis rejected. power simulations useful. set distribution parameters, many p-values generated, graph tested one. testing strategy can used. probabilities calculated hypothesis rejected, well additional probabilities expected rejections probability rejecting hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"graph_calculate_power(   graph,   alpha = 0.025,   power_marginal = rep(alpha, length(graph$hypotheses)),   test_groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   test_corr = rep(list(NA), length(test_types)),   sim_n = 100,   sim_corr = diag(length(graph$hypotheses)),   sim_success = NULL,   sim_seed = NULL,   force_closure = FALSE,   verbose = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"graph initial graph returned graph_create() alpha numeric scalar specifying global significance level testing power_marginal numeric vector mean values use simulating p-values. Exactly one mean per hypothesis needed, p-values sampled multivariate normal distribution. See Details test_groups list numeric vectors specifying hypotheses test together test_types character vector tests apply given groups test_corr Optional test_types parametric. numeric matrix correlations hypotheses' test statistics sim_n integer scalar specifying many simulations run sim_corr numeric matrix correlations hypotheses used sample multivariate normal distribution generate p-values sim_success list user-defined functions apply power results. Functions must take one simulation's logical vector results input, return length-one logical vector. instance, \"success\" means rejecting hypotheses 1 2, use sim_success = list(\"1 2\" = function(x) x[1] && x[2]). list named, function body used name. Lambda functions also work starting R 4.1, e.g. sim_success = list(\\(x) x[3] || x[4]) sim_seed (Optional) Random seed set simulating p-values. Set use consistent set p simulations across power calculations force_closure logical scalar used determine whether full closure test used Bonferroni testing. Ignored tests non-Bonferroni verbose logical scalar specifying whether full matrix simulations test results included output ","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"list five elements power_local - rejection proportion hypothesis individually power_expected - average number hypotheses rejected single simulation power_at_least_1 - proportion simulations reject hypothesis power_all - proportion simulations reject hypotheses power_success - proportion simulations reject hypotheses specified sim_success","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"parameters normal distribution set power_marginal (means) sim_corr (correlation test statistics). mean hypothesis set marginal power $$d_i=P_{\\xi_i}(p_i\\leq\\alpha)$$ \\(\\xi_i\\) non-centrality parameter. correlation test statistics induced study design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"success","dir":"Reference","previous_headings":"","what":"Success","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Success mean something different trial, lot flexibility sim_success parameter. However, flexibility means little validation inputs. user make sure function(s) passed mean think. implementation perspective, function applied row-wise matrix test results simulation, resulting sim_n length vector. mean vector returned \"Probability success\"","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"par_gate <- simple_successive_1()  # The default is to test all hypotheses with: Bonferroni testing at alpha # level .025, 0 mean under the alternative, and 0 correlation between # hypotheses under the alternative # The default of 100 simulations will usually need to be increased graph_calculate_power(par_gate, sim_n = 1e5) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01201 0.01166 0.00016 0.00019 #>  #>   Expected no. of rejections: 0.02402 #>    Power to reject 1 or more: 0.02349 #>          Power to reject all: 0 #>   # But any test group/type combination that works for [graph_test_closure()] # can be used graph_calculate_power(   par_gate,   alpha = .025,   test_groups = list(1:2, 3:4),   test_types = c(\"s\", \"p\"),   test_corr = list(NA, diag(2)),   sim_n = 1e5,   sim_success = list(     function(.) .[1] || .[2],     function(.) .[1] && .[2]   ) ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:    H3 H4 #>                                   H3  1  0 #>                                   H4  0  1 #>  #>   Test types #>        simes: (H1, H2) #>   parametric: (H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01203 0.01215 0.00018 0.00021 #>  #>   Expected no. of rejections: 0.02457 #>    Power to reject 1 or more: 0.02403 #>          Power to reject all: 0 #>  #>              Power to reject:    .[1] || .[2]   .[1] && .[2] #>                                       0.02403        0.00015 #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a graph representing a multiple comparison procedure — graph_create","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"multiple comparison procedure graph can represented 1) vector initial hypothesis weights, 2) matrix initial transition weights. function creates initial graph object using vector matrix. also validates inputs make sure combine form valid graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"graph_create(hypotheses, transitions, hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"hypotheses numeric vector hypothesis weights initial graphical multiple comparison procedure. Must vector values 0 & 1 (inclusive). length match row column lengths transitions. sum hypothesis weights exceed 1 transitions numeric matrix transition weights hypotheses initial graphical multiple comparison procedure. Must square matrix values 0 & 1 (inclusive). row column lengths match length hypotheses. row (Transition weights leaving hypothesis) can sum 1. diagonal (Transition weights hypothesis ) must 0s hyp_names (Optional) character vector hypothesis names. provided, names hypotheses transitions used. names specified, hypotheses named sequentially H1, H2, ...","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"S3 object class initial_graph. underlying structure list elements hypotheses transitions","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"validations performed : Weights numeric Length hypotheses dimensions transitions Explicit hyp_names override names hypotheses transitions Hypothesis weights must non-negative sum 1 Transition weights matrix: Diagonal must 1 Rows must sum 1 Values must non-negative","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"# A graphical multiple comparison procedure with two primary hypotheses (H1 # and H2) and two secondary hypotheses (H3 and H4) # See Figure 1 in Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, # W., & Rohmeyer, K. (2011). Graphical approaches for multiple comparison # procedures using weighted Bonferroni, Simes, or parametric tests. # Biometrical Journal, 53(6), 894-913. hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\") g <- graph_create(hypotheses, transitions, hyp_names) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Explicit names override names in `hypotheses` (with a warning) hypotheses <- c(h1 = 0.5, h2 = 0.5, h3 = 0, h4 = 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions, hyp_names) #> Warning: Hypothesis names specified - overriding names in #>                     `hypotheses` and `transitions` g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Explicit names override names in `transitions` (with a warning) hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   h1 = c(0, 0, 1, 0),   h2 = c(0, 0, 0, 1),   h3 = c(0, 1, 0, 0),   h4 = c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions, hyp_names) #> Warning: Hypothesis names specified - overriding names in #>                     `hypotheses` and `transitions` g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Use names in `hypotheses` hypotheses <- c(H1 = 0.5, H2 = 0.5, H3 = 0, H4 = 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # Use names in `transitions` hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   H1 = c(0, 0, 1, 0),   H2 = c(0, 0, 0, 1),   H3 = c(0, 1, 0, 0),   H4 = c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # When names are not specified, hypotheses are numbered sequentially as # H1, H2, ... hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weights for the closure of a graph — graph_generate_weights","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"closure graph set sub-graphs, intersections hypotheses, graph. Weights sub-graph calculated using weighting strategy defined Bretz et al (2011).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"graph_generate_weights(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"graph initial graph returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"numeric matrix intersection hypothesis weights. row corresponds single intersection hypothesis. first half columns indicate hypotheses included given intersection hypothesis, second half columns weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Much thought given performance code, memory time usage can grow quickly graph size grows. systems used testing, size 10 graph median run time 20-60 ms. Run time increases rate O(2 ^ n), e.g. size 5 graph takes approximately twice long run size 4 graph. See vignette(\"generate-weights-performance\") detailed analysis explanation","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"par_gate <- graph_create(   hypotheses = c(.5, .5, 0, 0),   transitions = rbind(     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   ) )  graph_generate_weights(par_gate) #>    H1 H2 H3 H4  H1  H2  H3  H4 #> 1   1  1  1  1 0.5 0.5 0.0 0.0 #> 2   1  1  1  0 0.5 0.5 0.0 0.0 #> 3   1  1  0  1 0.5 0.5 0.0 0.0 #> 4   1  1  0  0 0.5 0.5 0.0 0.0 #> 5   1  0  1  1 0.5 0.0 0.0 0.5 #> 6   1  0  1  0 1.0 0.0 0.0 0.0 #> 7   1  0  0  1 0.5 0.0 0.0 0.5 #> 8   1  0  0  0 1.0 0.0 0.0 0.0 #> 9   0  1  1  1 0.0 0.5 0.5 0.0 #> 10  0  1  1  0 0.0 0.5 0.5 0.0 #> 11  0  1  0  1 0.0 1.0 0.0 0.0 #> 12  0  1  0  0 0.0 1.0 0.0 0.0 #> 13  0  0  1  1 0.0 0.0 0.5 0.5 #> 14  0  0  1  0 0.0 0.0 1.0 0.0 #> 15  0  0  0  1 0.0 0.0 0.0 1.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":null,"dir":"Reference","previous_headings":"","what":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"using graph_test_shortcut(), may multiple hypotheses can rejected step. specific hypothesis chosen decided based minimum adjusted p-value. function shows every order deletes hypotheses, hypothesis still valid deletion step chosen.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"","code":"graph_rejection_orderings(shortcut_test_result)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"shortcut_test_result graph_report object returned graph_test_shortcut()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"modified graph_report object containing valid orderings deleting significant hypotheses","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"","code":"graph <- simple_successive_2()  short_res <- graph_test_shortcut(graph, c(.018, .01, .03, .004))  # Reject H1, H2, and H4 short_res$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE  TRUE   # But these cannot be rejected in any order - For instance, H4 has 0 weight # in the initial graph and cannot be rejected first graph_rejection_orderings(short_res) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.018 0.010 0.030 0.004 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1         0.02   TRUE #>           H2         0.02   TRUE #>           H3         0.03  FALSE #>           H4         0.02   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA #>  #> Alternate rejection orderings ($valid_rejection_orderings) --------------------- #> H2 H1 H4  #>  2  1  4  #>  #> H2 H4 H1  #>  2  4  1  #>   # Finally, intermediate graphs can be obtained by putting one of the # orderings outputs into `graph_update()` graph_update(graph, delete = c(2, 1, 4)) #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>      H1  H2  H3  H4 #>  H1 0.0 0.5 0.5 0.0 #>  H2 0.5 0.0 0.0 0.5 #>  H3 0.0 1.0 0.0 0.0 #>  H4 1.0 0.0 0.0 0.0 #>  #> Updated graph after deleting hypotheses 2, 1, 4 #>  #> --- Hypothesis weights --- #> H1: NA #> H2: NA #> H3:  1 #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA NA NA NA #>  H3 NA NA  0 NA #>  H4 NA NA NA NA #>  #> Deletion sequence ($intermediate_graphs) --------------------------------------- #>  #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>     Step 1: Updated graph after removing hypothesis 2 #>  #>     --- Hypothesis weights --- #>     H1: 0.75 #>     H2:   NA #>     H3: 0.00 #>     H4: 0.25 #>  #>     --- Transition weights --- #>              H1       H2       H3       H4 #>     H1 0.000000       NA 0.666667 0.333333 #>     H2       NA       NA       NA       NA #>     H3 0.500000       NA 0.000000 0.500000 #>     H4 1.000000       NA 0.000000 0.000000 #>  #>       Step 2: Updated graph after removing hypotheses 2, 1 #>  #>       --- Hypothesis weights --- #>       H1:  NA #>       H2:  NA #>       H3: 0.5 #>       H4: 0.5 #>  #>       --- Transition weights --- #>          H1 H2 H3 H4 #>       H1 NA NA NA NA #>       H2 NA NA NA NA #>       H3 NA NA  0  1 #>       H4 NA NA  1  0 #>  #>         Step 3: Updated graph after removing hypotheses 2, 1, 4 #>  #>         --- Hypothesis weights --- #>         H1: NA #>         H2: NA #>         H3:  1 #>         H4: NA #>  #>         --- Transition weights --- #>            H1 H2 H3 H4 #>         H1 NA NA NA NA #>         H2 NA NA NA NA #>         H3 NA NA  0 NA #>         H4 NA NA NA NA #>  #>   Final updated graph after removing deleted hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete hypotheses from a graph — graph_update","title":"Delete hypotheses from a graph — graph_update","text":"always obvious graph's weights look like deleting one hypotheses. graph_generate_weights() calculates sub-graphs' hypothesis weights, graph_update() gives detailed view single set deletions, including transition weights well.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete hypotheses from a graph — graph_update","text":"","code":"graph_update(graph, delete)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete hypotheses from a graph — graph_update","text":"graph initial graph returned graph_create() delete logical integer vector, denoting hypotheses keep/delete. logical vector must match size graph, one entry per hypothesis, results \"unordered mode,\" selected hypotheses deleted sequential order. integer vector can length, must contain valid hypothesis numbers (greater 0, less equal size graph). trigger \"ordered mode,\" selected hypotheses deleted order appear delete","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete hypotheses from a graph — graph_update","text":"object class updated_graph 3 elements initial graph object Boolean vector indicating hypotheses kept/deleted updated graph object specific hypotheses deleted","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete hypotheses from a graph — graph_update","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete hypotheses from a graph — graph_update","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions)  # Delete the second hypothesis graph_update(g, c(TRUE, FALSE, TRUE, TRUE)) #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0 #>  #> Updated graph after deleting hypotheses 1, 3, 4 #>  #> --- Hypothesis weights --- #> H1: NA #> H2:  1 #> H3: NA #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA  0 NA NA #>  H3 NA NA NA NA #>  H4 NA NA NA NA # Equivalent # graph_update(g, 2)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"multiple comparison procedure (multiple test procedure) statistical analysis method determining efficacy multiple drugs, multiple doses drug, single clinical trial. (Bretz et al., 2011) laid graph-based approach multiple comparison procedures, weights vertices edges graph determined independently particular statistical test used assess results. low-dependency implementation methods described subsequent papers.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"Maintainer: Dong Xi dong.xi@gilead.com Authors: Ethan Brockmann ethan.brockmann@atorusresearch.com contributors: Gilead Biostatistics [copyright holder, funder] Atorus Research LLC [copyright holder]","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","title":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","text":"plot initial_graph includes hypotheses edges , along weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","text":"","code":"# S3 method for initial_graph plot(   x,   ...,   layout = \"grid\",   nrow = NULL,   ncol = NULL,   edge_curves = NULL,   precision = 4,   eps = NULL,   background_color = \"white\",   margins = c(0, 0, 0, 0) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","text":"x initial graph returned graph_create() ... arguments passed igraph::plot.igraph() layout igraph layout specification (See ?igraph.plotting), \"grid\", lays hypotheses left--right, top--bottom nrow rows ncol columns. nrow integer scalar specifying number rows vertex grid. row columns counts specified, vertices laid close square possible. ncol integer scalar specifying number columns vertex grid. row columns counts specified, vertices laid close square possible. edge_curves named numeric vector specifying curvature edges. Edge pairs (two vertices share edge possible direction) detected automatically get 0.25 curvature. Adjust edges adding entry name \"vertex1|vertex2. Adjust default edge pairs curvature adding entry name \"pairs\". precision integer scalar specifying many decimal places displayed weights eps numeric scalar. Edge weights 0 eps displayed \\(\\epsilon\\), edge weights 1 - eps 1 displayed \\(1 - \\epsilon\\) background_color character scalar specifying background color whole plotting area. Passed directly graphics::par() (bg) margins length 4 numeric vector specifying margins plot. Defaults 0, since igraph plots tend large margins. passed directly graphics::par() (mar)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","text":"NULL, plotting graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The plot of an initial_graph includes the hypotheses and edges between\nthem, along with their weights — plot.initial_graph","text":"","code":"plot(simple_successive_2(), layout = \"grid\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 plot method for the class updated_graph — plot.updated_graph","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"S3 plot method class updated_graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"","code":"# S3 method for updated_graph plot(x, ...)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"x updated_graph object returned graph_update() ... Arguments passed plot.initial_graph layout igraph layout specification (See ?igraph.plotting), \"grid\", lays hypotheses left--right, top--bottom nrow rows ncol columns. nrow integer scalar specifying number rows vertex grid. row columns counts specified, vertices laid close square possible. ncol integer scalar specifying number columns vertex grid. row columns counts specified, vertices laid close square possible. edge_curves named numeric vector specifying curvature edges. Edge pairs (two vertices share edge possible direction) detected automatically get 0.25 curvature. Adjust edges adding entry name \"vertex1|vertex2. Adjust default edge pairs curvature adding entry name \"pairs\". precision integer scalar specifying many decimal places displayed weights eps numeric scalar. Edge weights 0 eps displayed \\(\\epsilon\\), edge weights 1 - eps 1 displayed \\(1 - \\epsilon\\) background_color character scalar specifying background color whole plotting area. Passed directly graphics::par() (bg) margins length 4 numeric vector specifying margins plot. Defaults 0, since igraph plots tend large margins. passed directly graphics::par() (mar)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"NULL, plotting graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"","code":"plot(   graph_update(     simple_successive_2(),     c(TRUE, FALSE, TRUE, TRUE)   ),   layout = \"grid\" )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class graph_report — print.graph_report","title":"S3 print method for class graph_report — print.graph_report","text":"graph report displays initial graph tested, p-values & alpha used tests, hypotheses can rejected, Detailed test results matrix, including results graph_generate_weights() & test results intersection hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class graph_report — print.graph_report","text":"","code":"# S3 method for graph_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class graph_report — print.graph_report","text":"x object class graph_report print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose test values output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for the class initial_graph — print.initial_graph","title":"S3 print method for the class initial_graph — print.initial_graph","text":"printed initial_graph displays header stating object , hypothesis weights, transition weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for the class initial_graph — print.initial_graph","text":"","code":"# S3 method for initial_graph print(x, ..., precision = 4, indent = 0, title = \"Initial graph\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for the class initial_graph — print.initial_graph","text":"x object class initial_graph print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results title First line printing, used internally distinguish initial graphs updated graphs","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class power_report — print.power_report","title":"S3 print method for class power_report — print.power_report","text":"power report displays initial graph tested, Testing simulation options, Final power calculations, (Partial) Detailed p-values test results - underlying object contains full tables","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class power_report — print.power_report","text":"","code":"# S3 method for power_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class power_report — print.power_report","text":"x object class power_report print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class updated_graph — print.updated_graph","title":"S3 print method for class updated_graph — print.updated_graph","text":"printed updated_graph displays initial graph, vector keep/delete hypotheses, updated graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class updated_graph — print.updated_graph","text":"","code":"# S3 method for updated_graph print(x, ..., precision = 6, indent = 2)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class updated_graph — print.updated_graph","text":"x object class updated_graph print ... values passed methods (currently unused) precision integer scalar indicating maximum number decimals include numeric values indent integer scalar indicating many spaces indent results","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"insight nice reporting, prefer graph_test_closure() graph_test_shortcut() options. reasonably fast interactive use. However order minimize power run time, efficient testing functions available. power simulation can segmented certain parts, like generating weights calculating adjusted weights, can done single time. closure testing function stripped just vectorized lines efficiency. separate optimized function available testing graph Bonferroni sequential shortcut.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"graph_test_closure_fast(p, alpha, adjusted_weights, matrix_intersections)  graph_test_shortcut_fast(p, alpha, adjusted_weights)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"p numeric vector p-values alpha numeric scalar specifying global significance level testing adjusted_weights weights (second half columns) graph_generate_weights() output, adjusted appropriate testing algorithm (Bonferroni, Simes, parametric) graph initial graph returned graph_create() intersections first half columns graph_generate_weights() output, indicating hypotheses contained intersection","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"logical integer vector results indicating whether hypothesis can accepted rejected globally.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"par_gate <- simple_successive_1() num_hyps <- length(par_gate$hypotheses)  p <- c(.001, .02, .002, .03)  weighting_strategy <- graph_generate_weights(par_gate) intersections <- weighting_strategy[, seq_len(num_hyps), drop = FALSE] adjusted_weights <-   weighting_strategy[, seq_len(num_hyps) + num_hyps, drop = FALSE]  graphicalMCP:::graph_test_closure_fast(   p,   .025,   adjusted_weights,   intersections ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE  graphicalMCP:::graph_test_shortcut_fast(   p,   .025,   adjusted_weights ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Report details of hypothesis rejections — graph_test_closure","title":"Report details of hypothesis rejections — graph_test_closure","text":"slower graph testing functions design choices made favor ease interpreting results speed. Results include hypothesis rejection decisions, also test values led final result. functions include options reporting details using adjusted p-value method adjusted weight method.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"graph_test_closure(   graph,   p,   alpha = 0.025,   test_groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   test_corr = rep(list(NA), length(test_types)),   verbose = FALSE,   test_values = FALSE )  graph_test_shortcut(   graph,   p,   alpha = 0.025,   verbose = FALSE,   test_values = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph initial graph returned graph_create() p numeric vector p-values alpha numeric scalar specifying global significance level testing test_groups list numeric vectors specifying hypotheses test together test_types character vector tests apply given groups test_corr (Optional) numeric matrix correlations hypotheses' test statistics verbose logical scalar specifying whether results intersection hypothesis included test_values logical scalar specifying whether hypothesis-level detail included results, including calculating adjusted weights parametric tests","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph_report object, list 4 elements: inputs, outputs, details, test_values Inputs - list input parameters used run test Outputs - list global test results Details - matrix detailed adjusted p-value results (graph deletion sequence shortcut testing) Test values - data frame hypothesis-level test details intersection (step shortcut testing)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Report details of hypothesis rejections — graph_test_closure","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions) p <- c(.01, .005, .015, .022)  test_corr <- list(NA, matrix(c(1, .5, .5, 1), nrow = 2, byrow = TRUE))  # The default is all Bonferroni with alpha = .025 graph_test_closure(g, p) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1         0.02   TRUE #>           H2         0.01   TRUE #>           H3         0.03  FALSE #>           H4         0.03  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>   # But tests can be specified at the hypothesis-level graph_test_closure(   graph = g,   p = p,   alpha = .025,   test_groups = list(1:2, 3:4),   test_types = c(\"bonferroni\", \"parametric\"),   test_corr = test_corr ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Correlation matrix:     H3  H4 #>                       H3 1.0 0.5 #>                       H4 0.5 1.0 #>  #>   Test types #>   bonferroni: (H1, H2) #>   parametric: (H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1      0.02000   TRUE #>           H2      0.01000   TRUE #>           H3      0.02773  FALSE #>           H4      0.02773  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>"}]
