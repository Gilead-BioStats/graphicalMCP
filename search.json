[{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2023 Gilead Sciences  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"multiple-comparison-problem","dir":"Articles","previous_headings":"","what":"Multiple comparison problem","title":"Graphical multiple comparison procedures based on the closure principle","text":"Consider confirmatory clinical trial comparing test treatment (treatment) control treatment (control) disease. two doses treatment: low dose high dose. three endpoints included multiplicity adjustment strategy, primary endpoint (PE) two secondary endpoints (SE1 SE2). total, six null hypotheses: \\(H_1\\), \\(H_3\\) \\(H_5\\) primary hypothesis two secondary hypotheses respectively low dose versus control; \\(H_2\\), \\(H_4\\) \\(H_6\\) primary hypothesis two secondary hypotheses respectively high dose versus control. clinical considerations constrain structure multiple comparison procedures, can flexibly incorporated using graphical approaches. First, low high doses considered equally important, means rejecting primary hypothesis either dose versus control leads successful trial. Regarding secondary hypotheses, one tested corresponding primary hypothesis rejected. means \\(H_3\\) \\(H_5\\) tested \\(H_1\\) rejected; \\(H_4\\) \\(H_6\\) tested \\(H_2\\) rejected. addition, statistical considerations complete graph. primary hypotheses \\(H_1\\) \\(H_2\\) equal hypothesis weight 0.5. secondary hypotheses hypothesis weight 0. primary hypothesis rejected, weight propagate along three outgoing edges: one primary hypothesis two descendant secondary hypotheses. edge primary hypothesis transition weight 0.5; two edges descendant secondary hypotheses equal transition weight 0.25. secondary hypotheses dose-control comparison, edge transition weight 1 (close 1 allow \\(\\epsilon\\) edges). hypothesis weights dose-control comparison group propagated primary hypothesis dose-control comparison, hypotheses first dose-control comparison group deleted. specifications, can create following graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"create-a-graph","dir":"Articles","previous_headings":"","what":"Create a graph","title":"Graphical multiple comparison procedures based on the closure principle","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0, 0, 0)  epsilon <- 1e-5 transitions <- rbind(   c(0, 0.5, 0.25, 0, 0.25, 0),   c(0.5, 0, 0, 0.25, 0, 0.25),   c(0, 0, 0, 0, 1, 0),   c(epsilon, 0, 0, 0, 0, 1 - epsilon),   c(0, epsilon, 1 - epsilon, 0, 0, 0),   c(0, 0, 0, 1, 0, 0) )  hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\") g <- graph_create(hypotheses, transitions, hyp_names)  plot_layout <- rbind(   c(.15, .5),   c(.65, .5),   c(0, 0),   c(.5, 0),   c(.3, 0),   c(.8, 0) )  plot(   g,   layout = plot_layout,   eps = epsilon,   edge_curves = c(pairs = .8),   vertex.size = 35 )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"perform-the-graphical-multiple-comparison-procedure-based-on-bonferroni-tests","dir":"Articles","previous_headings":"","what":"Perform the graphical multiple comparison procedure based on Bonferroni tests","title":"Graphical multiple comparison procedures based on the closure principle","text":"Given set p-values \\(H_1, \\ldots, H_6\\), graphical multiple comparison procedure can performed control family-wise error rate (FWER) significance level alpha. one-sided p-values, alpha often set 0.025 (default). First, perform Bonferroni-based procedure. running procedure, none hypotheses rejected. results identical using graph_test_shortcut().","code":"p_values <- c(0.015, 0.013, 0.01, 0.007, 0.1, 0.0124) test_results <- graph_test_closure(g, p = p_values, alpha = 0.025)  test_results$outputs$adjusted_p #>    H1    H2    H3    H4    H5    H6  #> 0.026 0.026 0.028 0.028 0.100 0.028  test_results$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #> FALSE FALSE FALSE FALSE FALSE FALSE # Same testing results as 'graph_test_shortcut(g, p = p_values, alpha = 0.025)'"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"obtain-the-closure","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure based on Bonferroni tests","what":"Obtain the closure","title":"Graphical multiple comparison procedures based on the closure principle","text":"investigate closure every intersection hypothesis rejected, one obtain detailed output specifying verbose = TRUE. hypotheses tested using Bonferroni tests, adjusted p-value every intersection hypothesis adjusted p-value group 1 (meaning hypotheses group Bonferroni tests). intersection hypothesis rejected adjusted p-value less equal alpha. Adjusted p-values initially calculated groups hypotheses. case one group, includes hypotheses, can . adjusted p-value intersection hypothesis minimum across groups within intersection. Finally, adjusted p-value individual hypothesis whole procedure equal max adjusted p-value across intersections containing hypothesis.","code":"test_results_verbose <-   graph_test_closure(     g,     p = p_values,     alpha = 0.025,     verbose = TRUE   )  head(test_results_verbose$details$results) #>    H1  H2 H3 H4 H5 H6 adj_p_grp1 adj_p_inter reject_intersection #> 1 0.5 0.5  0  0  0  0      0.026       0.026                   0 #> 2 0.5 0.5  0  0  0 NA      0.026       0.026                   0 #> 3 0.5 0.5  0  0 NA  0      0.026       0.026                   0 #> 4 0.5 0.5  0  0 NA NA      0.026       0.026                   0 #> 5 0.5 0.5  0 NA  0  0      0.026       0.026                   0 #> 6 0.5 0.5  0 NA  0 NA      0.026       0.026                   0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"obtain-adjusted-significance-levels","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure based on Bonferroni tests","what":"Obtain adjusted significance levels","title":"Graphical multiple comparison procedures based on the closure principle","text":"equivalent way obtain rejections via adjusting significance levels. hypothesis rejected p-value less equal adjusted significance level. One can obtain adjusted significance levels every hypothesis every intersection hypothesis closure specifying test_values = TRUE. hypothesis rejected closed testing procedure intersection hypotheses involving rejected. intersection hypothesis rejected null hypotheses within rejected.","code":"test_results_test_values <-   graph_test_closure(     g,     p = p_values,     alpha = 0.025,     test_values = TRUE   )  head(test_results_test_values$test_values$results) #>    Intersection Hypothesis       Test      p <= Weight * Alpha Inequality_holds #> H1            1         H1 bonferroni 0.0150 <=    0.5 * 0.025            FALSE #> H2            1         H2 bonferroni 0.0130 <=    0.5 * 0.025            FALSE #> H3            1         H3 bonferroni 0.0100 <=    0.0 * 0.025            FALSE #> H4            1         H4 bonferroni 0.0070 <=    0.0 * 0.025            FALSE #> H5            1         H5 bonferroni 0.1000 <=    0.0 * 0.025            FALSE #> H6            1         H6 bonferroni 0.0124 <=    0.0 * 0.025            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"mixed-procedures-for-graphical-approaches","dir":"Articles","previous_headings":"","what":"Mixed procedures for graphical approaches","title":"Graphical multiple comparison procedures based on the closure principle","text":"framework graphicalMCP allows mixture tests improve performance Bonferroni-based graphical approaches. can group hypotheses multiple subgroups perform separate test every subgroup. Currently, graphicalMCP supports Bonferroni, parametric Simes tests. connect results subgroups, Bonferroni tests used. , show two examples. first example applies parametric tests primary hypotheses, second example applies Simes tests two subgroups secondary hypotheses addition parametric tests primary hypotheses.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"parametric-tests-for-primary-hypotheses","dir":"Articles","previous_headings":"Mixed procedures for graphical approaches","what":"Parametric tests for primary hypotheses","title":"Graphical multiple comparison procedures based on the closure principle","text":"example, assume test statistics primary hypotheses follow asymptotic bivariate normal distribution. null hypotheses \\(H_1\\) \\(H_2\\), mean distribution 0. correlation test statistics \\(H_1\\) \\(H_2\\) can calculated function sample size. Assume sample size control, low high doses \\(n_0\\), \\(n_1\\) \\(n_2\\), respectively. correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_2+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. intersection hypothesis \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\), hypothesis weights 0.5, 0.5, 0, 0, 0, 0, respectively \\(H_1,\\ldots, H_6\\). Assume one-sided p-values hypotheses \\(p_1,\\ldots,p_6\\), respectively. intersection hypothesis rejected Bonferroni test \\(p_1\\leq 0.5\\alpha\\) \\(p_2\\leq 0.5\\alpha\\). Alternatively, parametric test utilizes correlation test statistics \\(t_1=\\Phi^{-1}(1 - p_1)\\) \\(t_2=\\Phi^{-1}(1 - p_2)\\). intersection hypothesis can rejected \\(p_1\\leq c\\times 0.5\\alpha\\) \\(p_2\\leq c\\times 0.5\\alpha\\), \\(c\\) value adjustment due correlation \\(t_1\\) \\(t_2\\). specifically, \\(c\\) can solved solution \\(Pr\\{(p_1\\leq c\\times 0.5\\alpha)\\cup (p_2\\leq c\\times 0.5\\alpha)\\}=\\alpha\\). given correlation \\(\\rho_{12}\\), \\(c\\) value can solved using uniroot function mvtnorm package. example, \\(\\rho_{12}=0.5\\), \\(c\\) value 1.078. can obtain adjusted significance level \\(H_1\\) \\(H_2\\) \\(c\\times 0.5\\alpha\\). Alternatively, can calculate adjusted p-value \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\) \\(Pr\\{(P_1\\leq \\min{\\{p_1, p_2\\}})\\cup (P_2\\leq \\min{\\{p_1, p_2\\}})\\}\\). implement procedure, need create two subgroups: one \\(H_1\\) \\(H_2\\), one rest hypotheses. first subgroup hypotheses, apply parametric tests; second subgroup, apply Bonferroni tests. Three additional inputs needed specify grouping information test_groups, identify types tests every subgroup test_types, provide correlation matrix parametric tests test_corr. Assuming correlation 0.5 test statistics primary hypotheses, \\(H_1\\) \\(H_2\\) rejected, others rejected using Bonferroni-based graphical approach. illustrates power improvement using parametric tests Bonferroni tests.","code":"corr_12 <- matrix(0.5, nrow = 2, ncol = 2) diag(corr_12) <- 1  test_results_parametric <-   graph_test_closure(     g,     p = p_values,     alpha = 0.025,     test_groups = list(c(1, 2), 3:6),     test_types = c(\"parametric\", \"bonferroni\"),     test_corr = list(corr_12, NA),     test_values = TRUE   )  test_results_parametric$outputs$adjusted_p #>         H1         H2         H3         H4         H5         H6  #> 0.02413846 0.02413846 0.02800000 0.02800000 0.10000000 0.02800000 test_results_parametric$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #>  TRUE  TRUE FALSE FALSE FALSE FALSE  head(test_results_parametric$test_values$results) #>    Intersection Hypothesis       Test      p <=      c_value * Weight * Alpha #> H1            1         H1 parametric 0.0150 <= 1.0782936582 *    0.5 * 0.025 #> H2            1         H2 parametric 0.0130 <= 1.0782936582 *    0.5 * 0.025 #> H3            1         H3 bonferroni 0.0100 <=                   0.0 * 0.025 #> H4            1         H4 bonferroni 0.0070 <=                   0.0 * 0.025 #> H5            1         H5 bonferroni 0.1000 <=                   0.0 * 0.025 #> H6            1         H6 bonferroni 0.0124 <=                   0.0 * 0.025 #>    Inequality_holds #> H1            FALSE #> H2             TRUE #> H3            FALSE #> H4            FALSE #> H5            FALSE #> H6            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"parametric-tests-for-primary-hypotheses-and-simes-tests-for-secondary-hypotheses","dir":"Articles","previous_headings":"Mixed procedures for graphical approaches","what":"Parametric tests for primary hypotheses and Simes tests for secondary hypotheses","title":"Graphical multiple comparison procedures based on the closure principle","text":"addition using parametric tests primary hypotheses, ways improve Bonferroni-based graphical approaches. One way apply Simes tests secondary hypotheses. Simes tests improve Bonferroni tests may reject intersection hypothesis p-values relatively small, even ’re larger adjusted significance levels Bonferroni tests. intersection hypothesis \\(H_1\\cap H_2\\cap H_3\\cap H_4\\cap H_5\\cap H_6\\), hypothesis weights 0.5, 0.5, 0, 0, 0, 0, respectively \\(H_1,\\ldots, H_6\\). intersection hypothesis rejected Bonferroni test \\(p_1\\leq 0.5\\alpha\\) \\(p_2\\leq 0.5\\alpha\\). addition conditions, Simes test can also reject intersection hypothesis \\(p_1\\) \\(p_2\\) less equal \\(\\alpha\\). order control Type error Simes test, distributional requirement needed, called \\(MTP_2\\). case, means correlation test statistics \\(H_1\\) \\(H_2\\) non-negative. illustrate possibility using mixed tests example, keep parametric tests primary hypotheses apply Simes tests secondary hypotheses. two sets secondary hypotheses: \\(H_3\\) \\(H_5\\) secondary hypotheses low dose versus control, \\(H_4\\) \\(H_6\\) secondary hypotheses high dose versus control. believed correlation test statistics \\(H_3\\) \\(H_5\\) non-negative similar case \\(H_4\\) \\(H_6\\). Thus one can apply Simes tests \\(H_3\\) \\(H_5\\), separately \\(H_4\\) \\(H_6\\). Note different applying Simes tests \\(H_3\\ldots,H_6\\) requires stronger \\(MTP^2\\) condition. implement procedure, create three subgroups: one \\(H_1\\) \\(H_2\\), one \\(H_3\\) \\(H_5\\), one \\(H_4\\) \\(H_6\\). first subgroup hypotheses, apply parametric tests; second third subgroups, apply separate Simes tests. Assuming correlation 0.5 test statistics primary hypotheses, \\(H_1\\), \\(H_2\\), \\(H_4\\), \\(H_6\\), \\(H_3\\) rejected. Compared results using Bonferroni tests secondary hypotheses, \\(H_3\\), \\(H_4\\) \\(H_6\\) additional hypotheses rejected using Simes tests, showing power improvement using Simes tests.","code":"test_results_parametric_simes <-   graph_test_closure(     g,     p = p_values, alpha = 0.025,     test_groups = list(c(1, 2), c(3, 5), c(4, 6)),     test_types = c(\"parametric\", \"simes\", \"simes\"),     test_corr = list(corr_12, NA, NA)   )  test_results_parametric_simes$outputs$adjusted_p #>         H1         H2         H3         H4         H5         H6  #> 0.02413846 0.02413846 0.02480008 0.02480000 0.10000000 0.02480008 test_results_parametric_simes$outputs$rejected #>    H1    H2    H3    H4    H5    H6  #>  TRUE  TRUE  TRUE  TRUE FALSE  TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"power-calculation","dir":"Articles","previous_headings":"","what":"Power calculation","title":"Graphical multiple comparison procedures based on the closure principle","text":"Given graph, trial team often interested power trial. single null hypothesis, power probability reject null hypothesis significance level alpha alternative hypothesis true (.e. true positive). multiple null hypotheses, multiple version power. example, power reject least one hypothesis power reject hypotheses, given alternative hypotheses true. graphical multiple comparison procedures, also important understand power reject hypothesis, given multiplicity adjustment. Sometimes, team may want customize definitions power define success. Thus power calculation important aspect trial design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-marginal-power-for-primary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for primary hypotheses","title":"Graphical multiple comparison procedures based on the closure principle","text":"Assume primary endpoint occurrence unfavorable clinical event. evaluate treatment effect, proportion patients event calculated lower better. Assume proportions 0.181 low high doses, 0.3 control. Using equal randomization among three treatment groups, clinical trial team chooses total sample size 600 200 per group. leads marginal power 80% \\(H_1\\) \\(H_2\\), respectively, using two-sample test difference proportions unpooled variance one-sided significance level 0.025. calculation, use marginal power combine information treatment effect, nuisance parameter, sample sizes hypothesis. Note significance level used marginal power alpha used power calculation significance level FWER control. addition, marginal power one--one relationship noncentrality parameter, illustrated .","code":"alpha <- 0.025 prop <- c(0.3, 0.181, 0.181) sample_size <- rep(200, 3)  unpooled_variance <-   prop[-1] * (1 - prop[-1]) / sample_size[-1] +   prop[1]  * (1 - prop[1])  / sample_size[1]  noncentrality_parameter_primary <-   -(prop[-1] - prop[1]) / sqrt(unpooled_variance)  marginal_power_primary <- pnorm(   qnorm(alpha, lower.tail = FALSE),   mean = noncentrality_parameter_primary,   sd = 1,   lower.tail = FALSE )  names(marginal_power_primary) <- c(\"H1\", \"H2\") marginal_power_primary #>        H1        H2  #> 0.8028315 0.8028315"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-marginal-power-for-secondary-hypotheses","dir":"Articles","previous_headings":"Power calculation","what":"Input: Marginal power for secondary hypotheses","title":"Graphical multiple comparison procedures based on the closure principle","text":"Assume secondary endpoint (SE1) change total medication score baseline, continuous outcome. Also assume secondary endpoint (SE2) change another medication score baseline, continuous outcome contains fewer categories compared SE1. evaluate treatment effect, mean change calculated reduction better. Assume mean change baseline SE1 reduction 7.5 8.25, respectively low high doses, 5 control. Also assume mean change baseline SE2 reduction 8 9, respectively low high doses, 6 control. assume known common standard deviation 10. Given sample size 200 per treatment group, marginal power 71% 90% \\(H_3\\) \\(H_4\\), respectively 52% 85% \\(H_5\\) \\(H_6\\), respectively using two-sample \\(z\\)-test difference means one-sided significance level 0.025.","code":"mean_change_se1 <- c(5, 7.5, 8.25) sd <- rep(10, 3) variance <- sd[-1]^2 / sample_size[-1] + sd[1]^2 / sample_size[1]  noncentrality_parameter_se1 <-   (mean_change_se1[-1] - mean_change_se1[1]) /   sqrt(variance)  marginal_power_se1 <- pnorm(   qnorm(alpha, lower.tail = FALSE),   mean = noncentrality_parameter_se1,   sd = 1,   lower.tail = FALSE )  names(marginal_power_se1) <- c(\"H3\", \"H4\") marginal_power_se1 #>        H3        H4  #> 0.7054139 0.9014809  mean_change_se2 <- c(6, 8, 9)  noncentrality_parameter_se2 <-   (mean_change_se2[-1] - mean_change_se2[1]) /   sqrt(variance)  marginal_power_se2 <- pnorm(   qnorm(alpha, lower.tail = FALSE),   mean = noncentrality_parameter_se2,   sd = 1,   lower.tail = FALSE )  names(marginal_power_se2) <- c(\"H5\", \"H6\") marginal_power_se2 #>        H5        H6  #> 0.5159678 0.8508384"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"input-correlation-structure-to-simulate-test-statistics","dir":"Articles","previous_headings":"Power calculation","what":"Input: Correlation structure to simulate test statistics","title":"Graphical multiple comparison procedures based on the closure principle","text":"addition marginal power, also need make assumptions joint distribution test statistics. example, assume follow multivariate normal distribution means ’re defined noncentrality parameters correlation matrix \\(R\\). obtain correlations, helpful understand two types correlations example. correlation two dose-control comparisons endpoint correlation endpoints. former correlation can calculated function sample size. example, correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_3+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. correlation test statistics \\(H_3\\) \\(H_4\\) \\(H_5\\) \\(H_6\\) . hand, correlation endpoints dose-control comparison often estimated based prior knowledge previous trials. Without information, assume \\(\\rho_{13}=\\rho_{15}=\\rho_{24}=\\rho_{26}=\\rho_{35}=\\rho_{46}=0.5\\). practice, one set correlation parameter try multiple values assess sensitivity assumption. Regarding correlation test statistics \\(H_1\\) \\(H_4 (H_6)\\) \\(H_2\\) \\(H_3 (H_5)\\), even difficult estimate. use simple product rule, means correlation product correlations two previously assumed correlations. example, \\(\\rho_{14}=\\rho_{12}*\\rho_{24}\\) \\(\\rho_{23}=\\rho_{12}*\\rho_{13}\\). practice, assumptions may made tested, instead using product rule.","code":"corr <- matrix(0, nrow = 6, ncol = 6)  corr[1, 2] <-   corr[3, 4] <-   corr[5, 6] <-   sqrt(     sample_size[2] / sum(sample_size[1:2]) *       sample_size[3] / sum(sample_size[c(1, 3)])   )  rho <- 0.5  corr[1, 3] <-   corr[1, 5] <-   corr[2, 4] <-   corr[2, 6] <-   corr[3, 5] <-   corr[4, 6] <-   rho  corr[1, 4] <- corr[1, 6] <- corr[2, 3] <- corr[2, 5] <- corr[1, 2] * rho  corr[3, 6] <- corr[1, 3] * corr[1, 6] corr[4, 5] <- corr[1, 4] * corr[1, 6]  corr <- corr + t(corr) diag(corr) <- 1 colnames(corr) <- hyp_names rownames(corr) <- hyp_names corr #>      H1   H2    H3     H4     H5    H6 #> H1 1.00 0.50 0.500 0.2500 0.5000 0.250 #> H2 0.50 1.00 0.250 0.5000 0.2500 0.500 #> H3 0.50 0.25 1.000 0.5000 0.5000 0.125 #> H4 0.25 0.50 0.500 1.0000 0.0625 0.500 #> H5 0.50 0.25 0.500 0.0625 1.0000 0.500 #> H6 0.25 0.50 0.125 0.5000 0.5000 1.000"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"user-defined-success-criteria","dir":"Articles","previous_headings":"Power calculation","what":"User-defined success criteria","title":"Graphical multiple comparison procedures based on the closure principle","text":"mentioned earlier, multiple versions “power” multiple hypotheses. Commonly used “power” definitions include: - Local power: probability hypothesis rejected (multiplicity adjustment) - Expected . rejections: expected number rejections - Power reject 1 : probability reject least one hypothesis - Power reject : probability reject hypotheses default outputs graph_calculate_power function. addition, user customize success criteria define versions “power”.","code":"success_fns <- list(   # Probability to reject H1   H1 = function(x) x[1],      # Expected number of rejections   `Expected no. of rejections` =     function(x) x[1] + x[2] + x[3] + x[4] + x[5] + x[6],    # Probability to reject at least one hypothesis   `AtLeast1` = function(x) x[1] | x[2] | x[3] | x[4] | x[5] | x[6],      # Probability to reject all hypotheses   `All` = function(x) x[1] & x[2] & x[3] & x[4] & x[5] & x[6],      # Probability to reject both H1 and H2   `H1andH2` = function(x) x[1] & x[2],      # Probability to reject all hypotheses for the low dose or the high dose   `(H1andH3andH5)or(H2andH4andH6)` <-     function(x) (x[1] & x[3] & x[5]) | (x[2] & x[4] & x[6]) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/closed-testing.html","id":"output-calculate-power","dir":"Articles","previous_headings":"Power calculation","what":"Output: Calculate power","title":"Graphical multiple comparison procedures based on the closure principle","text":"Given inputs, can calculate power via simulation graphical multiple comparison procedure one-sided significance level alpha = 0.025 using sim_n = 1e5 simulations random seed 1234. three procedures compare: Bonferroni-based procedure, procedure using parametric tests primary hypotheses, procedure using parametric tests primary hypotheses Simes tests two sets secondary hypotheses separately. local power hypotheses \\(H_1, \\ldots, H_6\\) - 0.760, 0.752, 0.510, 0.665, 0.391, 0.625, respectively using Bonferroni-based procedure, - 0.764, 0.756, 0.511, 0.668, 0.392, 0.628, respectively using procedure using parametric tests primary hypotheses, - 0.764, 0.757, 0.521, 0.673, 0.402, 0.633, respectively using procedure using parametric tests primary hypotheses Simes tests two sets secondary hypotheses separately. Note local power improved hypotheses parametric tests Simes tests applied Bonferroni-based procedure. see detailed outputs simulated p-values rejection decisions hypotheses, can specify verbose = TRUE. produce lot outputs. allow flexible printing functions, user can change following: - indented space default setting indent = 2 - precision numeric values (.e., number decimal places) default setting precision = 6","code":"set.seed(1234) power_bonferroni <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   sim_success = success_fns )  round(power_bonferroni$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.760 0.752 0.510 0.665 0.391 0.625  set.seed(1234) power_parametric <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), 3:6),   test_types = c(\"parametric\", \"bonferroni\"),   test_corr = list(corr_12, NA),   sim_success = success_fns )  round(power_parametric$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.764 0.756 0.511 0.668 0.392 0.628  set.seed(1234) power_parametric_simes <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), c(3, 5), c(4, 6)),   test_types = c(\"parametric\", \"simes\", \"simes\"),   test_corr = list(corr_12, NA, NA),   sim_success = success_fns )  round(power_parametric_simes$power$power_local, 3) #>    H1    H2    H3    H4    H5    H6  #> 0.764 0.757 0.521 0.673 0.402 0.633 set.seed(1234) verbose_output_parametric_simes <- graph_calculate_power(   g,   alpha = 0.025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(     marginal_power_primary,     marginal_power_se1,     marginal_power_se2   ),   test_groups = list(c(1, 2), c(3, 5), c(4, 6)),   test_types = c(\"parametric\", \"simes\", \"simes\"),   test_corr = list(corr_12, NA, NA),   sim_success = success_fns,   verbose = TRUE )  print(verbose_output_parametric_simes) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>   H5: 0.0 #>   H6: 0.0 #>  #>   --- Transition weights --- #>           H1      H2      H3      H4      H5      H6 #>   H1 0.00000 0.50000 0.25000 0.00000 0.25000 0.00000 #>   H2 0.50000 0.00000 0.00000 0.25000 0.00000 0.25000 #>   H3 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 #>   H4 0.00001 0.00000 0.00000 0.00000 0.00000 0.99999 #>   H5 0.00000 0.00001 0.99999 0.00000 0.00000 0.00000 #>   H6 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:     H1  H2 #>                                   H1 1.0 0.5 #>                                   H2 0.5 1.0 #>  #>   Test types #>   parametric: (H1, H2) #>        simes: (H3, H5) #>        simes: (H4, H6) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                       H1     H2     H3     H4     H5     H6 #>   Marginal power: 0.8028 0.8028 0.7054 0.9015 0.5160 0.8508 #>  #>   Correlation:        H1     H2     H3     H4     H5     H6 #>                H1 1.0000 0.5000 0.5000 0.2500 0.5000 0.2500 #>                H2 0.5000 1.0000 0.2500 0.5000 0.2500 0.5000 #>                H3 0.5000 0.2500 1.0000 0.5000 0.5000 0.1250 #>                H4 0.2500 0.5000 0.5000 1.0000 0.0625 0.5000 #>                H5 0.5000 0.2500 0.5000 0.0625 1.0000 0.5000 #>                H6 0.2500 0.5000 0.1250 0.5000 0.5000 1.0000 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                   H1     H2     H3     H4     H5     H6 #>                  Local power: 0.7644 0.7566 0.5209 0.6730 0.4023 0.6329 #>  #>   Expected no. of rejections: 3.75 #>    Power to reject 1 or more: 0.8628 #>          Power to reject all: 0.3254 #>  #>              Success measure  Power #>                           H1 0.7644 #>   Expected no. of rejections 3.7501 #>                     AtLeast1 0.8628 #>                          All 0.3254 #>                      H1andH2 0.6582 #>                              0.6332 #>  #> Simulation details ($details) -------------------------------------------------- #>     p_sim_H1  p_sim_H2  p_sim_H3  p_sim_H4  p_sim_H5  p_sim_H6 rej_H1 rej_H2 #>    2.365e-02 6.962e-03 3.835e-03 6.156e-02 3.403e-03 1.842e-03  FALSE   TRUE #>    3.670e-02 4.681e-02 6.858e-02 2.848e-02 1.496e-01 5.521e-02  FALSE  FALSE #>    1.575e-02 6.544e-03 1.153e-03 7.655e-04 8.362e-02 2.553e-02   TRUE   TRUE #>    5.337e-03 8.700e-07 9.953e-03 2.429e-04 3.699e-02 1.346e-04   TRUE   TRUE #>    3.427e-02 1.789e-01 6.203e-03 3.059e-02 4.616e-02 6.661e-02  FALSE  FALSE #>    1.114e-03 1.784e-02 6.084e-02 8.707e-03 3.865e-01 8.674e-02   TRUE   TRUE #>    2.541e-01 2.101e-01 2.617e-02 2.774e-02 9.249e-03 2.977e-02  FALSE  FALSE #>    9.081e-02 4.433e-02 1.904e-01 4.188e-02 3.997e-01 1.097e-01  FALSE  FALSE #>    7.396e-02 4.728e-02 3.779e-01 2.962e-02 4.447e-01 6.206e-02  FALSE  FALSE #>    3.354e-04 1.049e-03 1.247e-05 3.230e-03 1.601e-04 1.146e-02   TRUE   TRUE #>    rej_H3 rej_H4 rej_H5 rej_H6 #>     FALSE  FALSE  FALSE   TRUE #>     FALSE  FALSE  FALSE  FALSE #>      TRUE   TRUE  FALSE  FALSE #>      TRUE   TRUE  FALSE   TRUE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>     FALSE  FALSE  FALSE  FALSE #>      TRUE   TRUE   TRUE   TRUE #>   ... (Use `print(x, rows = <nn>)` for more)  print(verbose_output_parametric_simes,   indent = 4,   precision = 6 ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>     Initial graph #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2: 0.5 #>     H3: 0.0 #>     H4: 0.0 #>     H5: 0.0 #>     H6: 0.0 #>  #>     --- Transition weights --- #>             H1      H2      H3      H4      H5      H6 #>     H1 0.00000 0.50000 0.25000 0.00000 0.25000 0.00000 #>     H2 0.50000 0.00000 0.00000 0.25000 0.00000 0.25000 #>     H3 0.00000 0.00000 0.00000 0.00000 1.00000 0.00000 #>     H4 0.00001 0.00000 0.00000 0.00000 0.00000 0.99999 #>     H5 0.00000 0.00001 0.99999 0.00000 0.00000 0.00000 #>     H6 0.00000 0.00000 0.00000 1.00000 0.00000 0.00000 #>  #>     Alpha = 0.025 #>  #>     Parametric testing correlation:     H1  H2 #>                                     H1 1.0 0.5 #>                                     H2 0.5 1.0 #>  #>     Test types #>     parametric: (H1, H2) #>          simes: (H3, H5) #>          simes: (H4, H6) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>     Testing 100,000 simulations with multivariate normal params: #>  #>                           H1       H2       H3       H4       H5       H6 #>     Marginal power: 0.802831 0.802831 0.705414 0.901481 0.515968 0.850838 #>  #>     Correlation:        H1     H2     H3     H4     H5     H6 #>                  H1 1.0000 0.5000 0.5000 0.2500 0.5000 0.2500 #>                  H2 0.5000 1.0000 0.2500 0.5000 0.2500 0.5000 #>                  H3 0.5000 0.2500 1.0000 0.5000 0.5000 0.1250 #>                  H4 0.2500 0.5000 0.5000 1.0000 0.0625 0.5000 #>                  H5 0.5000 0.2500 0.5000 0.0625 1.0000 0.5000 #>                  H6 0.2500 0.5000 0.1250 0.5000 0.5000 1.0000 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                      H1      H2      H3      H4      H5      H6 #>                    Local power: 0.76437 0.75656 0.52086 0.67302 0.40234 0.63292 #>  #>     Expected no. of rejections: 3.75007 #>      Power to reject 1 or more: 0.86277 #>            Power to reject all: 0.32537 #>  #>                Success measure   Power #>                             H1 0.76437 #>     Expected no. of rejections 3.75007 #>                       AtLeast1 0.86277 #>                            All 0.32537 #>                        H1andH2 0.65816 #>                                0.63324 #>  #> Simulation details ($details) -------------------------------------------------- #>         p_sim_H1    p_sim_H2    p_sim_H3    p_sim_H4    p_sim_H5    p_sim_H6 rej_H1 #>      2.36514e-02 6.96244e-03 3.83510e-03 6.15622e-02 3.40342e-03 1.84173e-03  FALSE #>      3.67030e-02 4.68113e-02 6.85785e-02 2.84812e-02 1.49604e-01 5.52142e-02  FALSE #>      1.57542e-02 6.54383e-03 1.15274e-03 7.65505e-04 8.36187e-02 2.55280e-02   TRUE #>      5.33699e-03 8.69996e-07 9.95272e-03 2.42937e-04 3.69938e-02 1.34554e-04   TRUE #>      3.42665e-02 1.78879e-01 6.20296e-03 3.05856e-02 4.61643e-02 6.66051e-02  FALSE #>      1.11399e-03 1.78370e-02 6.08385e-02 8.70657e-03 3.86501e-01 8.67387e-02   TRUE #>      2.54077e-01 2.10119e-01 2.61667e-02 2.77426e-02 9.24897e-03 2.97659e-02  FALSE #>      9.08136e-02 4.43323e-02 1.90372e-01 4.18783e-02 3.99651e-01 1.09703e-01  FALSE #>      7.39568e-02 4.72837e-02 3.77864e-01 2.96172e-02 4.44676e-01 6.20565e-02  FALSE #>      3.35392e-04 1.04874e-03 1.24653e-05 3.22990e-03 1.60129e-04 1.14582e-02   TRUE #>      rej_H2 rej_H3 rej_H4 rej_H5 rej_H6 #>        TRUE  FALSE  FALSE  FALSE   TRUE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE   TRUE   TRUE  FALSE  FALSE #>        TRUE   TRUE   TRUE  FALSE   TRUE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>       FALSE  FALSE  FALSE  FALSE  FALSE #>        TRUE   TRUE   TRUE   TRUE   TRUE #>     ... (Use `print(x, rows = <nn>)` for more)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"motivating-example","dir":"Articles","previous_headings":"","what":"Motivating example","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"Consider simple successive graph four hypotheses. two primary hypotheses \\(H_1\\) \\(H_2\\) two secondary hypotheses \\(H_3\\) \\(H_4\\). Initially, hypothesis weights split equally \\(H_1\\) \\(H_2\\) 0.5. Hypotheses \\(H_3\\) \\(H_4\\) receive 0 hypothesis weights \\(H_3 (H_4)\\) tested \\(H_1 (H_2)\\) rejected. Thus edge \\(H_1 (H_2)\\) \\(H_3 (H_4)\\) transition weight 1. \\(H_1\\) \\(H_3\\) rejected, hypothesis weights propagated \\(H_2\\); similarly, \\(H_2\\) \\(H_4\\) rejected, hypothesis weights propagated \\(H_1\\). Thus edge \\(H_3 (H_4)\\) \\(H_2 (H_1)\\) transition weight 1. graphical multiple comparison procedure illustrated .","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"generating-the-closure","dir":"Articles","previous_headings":"","what":"Generating the closure","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"closure multiple comparison procedure collection intersection hypotheses \\(H_1\\cap H_2\\cap H_3\\cap H_4\\), \\(H_1\\cap H_2\\cap H_3\\), \\(H_1\\cap H_2\\cap H_4\\), \\(H_1\\cap H_3\\cap H_4\\), \\(H_2\\cap H_3\\cap H_4\\ \\ldots, H_1, H_2, H_3\\), \\(H_4\\). words, intersection hypotheses consist intersections based non-empty subsets \\(\\{1, 2, 3, 4\\}\\), e.g., \\(\\{1, 2, 3\\}\\), \\(\\{1, 2, 4\\}\\), \\(\\{1, 3, 4\\}\\), \\(\\{2, 3, 4\\}\\), \\(\\ldots\\). Thus \\(2^4-1\\) intersection hypotheses. equivalent way generate intersection hypotheses use binary representation. example, intersection hypothesis \\(H_1\\cap H_2\\cap H_3\\cap H_4\\) corresponds \\((1, 1, 1, 1)\\) \\(H_1\\cap H_2\\cap H_3\\) corresponds \\((1, 1, 1, 0)\\). closure can indexed power set \\(\\{1, 2, 3, 4\\}\\) . general, one can use rev(expand.grid(rep(list(1:0), m))) general closure, \\(m\\) number hypotheses.","code":"#>    H1 H2 H3 H4 #> 1   1  1  1  1 #> 2   1  1  1  0 #> 3   1  1  0  1 #> 4   1  1  0  0 #> 5   1  0  1  1 #> 6   1  0  1  0 #> 7   1  0  0  1 #> 8   1  0  0  0 #> 9   0  1  1  1 #> 10  0  1  1  0 #> 11  0  1  0  1 #> 12  0  1  0  0 #> 13  0  0  1  1 #> 14  0  0  1  0 #> 15  0  0  0  1"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"calculating-the-weighting-strategy","dir":"Articles","previous_headings":"","what":"Calculating the weighting strategy","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"Given closure, one can calculate hypothesis weight associated every hypothesis every intersection hypothesis using Algorithm 1 Bretz et al. (2011). whole collection hypothesis weights called weighting strategy. example, hypothesis weights \\((0.5, 0.5, 0, 0)\\) intersection hypothesis \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\). hypothesis weights intersection hypothesis \\(H_1\\cap H_2 \\cap H_3\\) \\((0.5, 0.5, 0, 0)\\), can calculated removing \\(H_4\\) initial graph applying Algorithm 1 Bretz et al. (2011). algorithm calculates hypothesis weights step--step fashion. example, intersection hypothesis \\(H_1\\cap H_2\\), can start \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\) calculates hypothesis weights \\(H_1\\cap H_2 \\cap H_3\\) removing \\(H_4\\) calculates hypothesis weights \\(H_1\\cap H_2\\) removing \\(H_3\\); can also start \\(H_1\\cap H_2 \\cap H_3\\) (assuming hypotheses weights stored) calculates hypothesis weights \\(H_1\\cap H_2\\) removing \\(H_3\\). Therefore, two strategies calculate weighting strategy.","code":"#>      H1   H2   H3   H4 #> 1  0.50 0.50 0.00 0.00 #> 2  0.50 0.50 0.00 0.00 #> 3  0.50 0.50 0.00 0.00 #> 4  0.50 0.50 0.00 0.00 #> 5  0.75 0.00 0.00 0.25 #> 6  1.00 0.00 0.00 0.00 #> 7  0.75 0.00 0.00 0.25 #> 8  1.00 0.00 0.00 0.00 #> 9  0.00 0.75 0.25 0.00 #> 10 0.00 0.75 0.25 0.00 #> 11 0.00 1.00 0.00 0.00 #> 12 0.00 1.00 0.00 0.00 #> 13 0.00 0.00 0.50 0.50 #> 14 0.00 0.00 1.00 0.00 #> 15 0.00 0.00 0.00 1.00"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"approach-1-simple-approach","dir":"Articles","previous_headings":"Calculating the weighting strategy","what":"Approach 1: Simple approach","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"first strategy utilizes initial graph starting point calculates hypothesis weights intersection hypotheses. example, calculate hypothesis weights \\(H_1\\cap H_2\\), start intersection hypothesis \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\) sequentially remove \\(H_4\\) \\(H_3\\) (order). approach simple implement since hypothesis weights \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\) determined initial graph always available. approach similar one implemented gMCP R package. drawback use information reduce number calculations. example, possible hypothesis weights \\(H_1\\cap H_2 \\cap H_3\\) calculated calculating \\(H_1\\cap H_2\\). Using information \\(H_1\\cap H_2 \\cap H_3\\) need one-step calculation, compared two-step calculation using \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"approach-2-parent-child-approach","dir":"Articles","previous_headings":"Calculating the weighting strategy","what":"Approach 2: Parent-child approach","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"approach tries avoid drawback Approach 1 saving intermediate graphs. performs one-step calculation save time. general, intersection hypothesis parent intersection hypothesis, involves hypotheses involved first intersection one extra hypothesis. example, second row matrix_intersections \\(H_1\\cap H_2 \\cap H_3\\) parent intersection \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\) first row; third row matrix_intersections \\(H_1\\cap H_2 \\cap H_4\\) parent intersection \\(H_1\\cap H_2 \\cap H_3\\cap H_4\\) first row. Thus can identify parent intersection hypothesis row matrix_intersections (except row 1) row number 1, 1, 2, 1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7. Given sequence parent hypotheses, simple obtain hypothesis weights intersection hypothesis based parent intersection hypothesis via one-step calculation. interest understand pattern obtain efficiently. First, bottom half (rows 9 - 15) top half (rows 1 - 7), row’s parent bottom half corresponding row top half, eight rows , difference flipping \\(H_1\\) 1 top half 0 bottom half. example, row 15’s parent row 15 - 8 = 7. Using observation, can determine parent hypotheses rows 9 15 1, 2, 3, 4, 5, 6, 7. similar pattern can observed rows 5 8. parent hypotheses rows 1, 2, 3, 4, respectively, flipping \\(H_2\\) 1 0. rows 3 - 4, parent hypotheses rows 1, 2, respectively, flipping \\(H_3\\) 1 0. Lastly row 2, parent hypothesis row 1. row number parent hypothesis can efficiently generated running .call(c, lapply(2^(seq_len(m) - 1), seq_len))[-2^m, ], \\(m\\) number hypotheses.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"comparing-different-approaches-to-calculating-weighting-strategies","dir":"Articles","previous_headings":"","what":"Comparing different approaches to calculating weighting strategies","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"benchmark existing approaches calculating weighting strategies, compare following approaches: gMCP::generateWeights(), lrstat::fwgtmat(), Approach 1 (graphicalMCP simple) Approach 2 (graphicalMCP parent-child). Random graphs generated numbers hypotheses 4, 8, 12, 16. Computing time (median log-10 milliseconds) plotted . can see gMCP::generateWeights() slowest lrstat::fwgtmat() fastest. Approach 2 (graphicalMCP parent-child) faster Approach 1 (graphicalMCP simple). Note lrstat::fwgtmat() implements calculation using C++, known faster R. less stable approaches, e.g., giving errors often others. Given computing time R-based approaches acceptable, adding Rcpp dependency considered worthwhile graphicalMCP. considerations, implement Approach 2 graphicalMCP::graph_generate_weights().","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"conventional-approach-for-power-simulations","dir":"Articles","previous_headings":"Improving power simulations using parent-child relationships","what":"Conventional approach for power simulations","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"conventional approach power simulations repeat following process many times, e.g., 100,000 times. Simulate set p-values Determine hypothesis can rejected Remove rejected hypothesis update graph Repeat hypotheses can rejected Note step update graph may repeat many replications, may repetitive. \\(m\\) hypotheses, \\(2^m-1\\) graphs depending hypotheses rejected. graphs corresponds closure weighting strategy. Thus idea avoid redundant updating graphs utilize weighting strategy.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"power-simulations-using-parent-child-relationships","dir":"Articles","previous_headings":"Improving power simulations using parent-child relationships","what":"Power simulations using parent-child relationships","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"key allow approach efficiently identify row weighting strategy, given hypotheses rejected. Remembering pattern found Approach 2, bottom half (rows 9 - 15) matrix_intersections top half (rows 1 - 7), except flipping \\(H_1\\) 1 0. means \\(H_1\\) rejected (1 \\(H_1\\) matrix_intersections), row number index top half. example, assume \\(H_2\\) \\(H_4\\) rejected index matrix_intersections \\((1, 0, 1, 0)\\). Since \\(H_1\\) 1, corresponding row top half (rows 1- 7). \\(H_2\\) 0 thus corresponding row bottom half within top half (rows 5 - 7). Since \\(H_3\\) 1 thus corresponding row top half (rows 5 - 6). \\(H_4\\) 0 thus corresponding row 6. useful way calculate row number index XXXX 2^m - sum(XXXX * 2^(m:1 - 1)). example XXXX=1010, row number (1 - 1) * 8 + (1 - 0) * 4 + (1 - 1) * 2 + (1 - 0) * 1 + 1 = 16 - 10 = 6. way efficiently identifying rows weighting_strategy, power simulations implemented follows: Obtain weighting strategy (simulations) Simulate set p-values Determine hypothesis can rejected Remove rejected hypothesis identify row weighting strategy Repeat hypotheses can rejected small modification Step 3b make approach much faster conventional approach power simulations.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/generate-closure.html","id":"comparing-different-approaches-to-power-simulations","dir":"Articles","previous_headings":"","what":"Comparing different approaches to power simulations","title":"Rationales to generate the closure and the weighting strategy of a graph","text":"benchmark existing approaches calculating weighting strategies, compare following approaches: gMCP::calcPower(), Approach 1 (graphicalMCP conventional), Approach 2 (graphicalMCP parent-child). Holm fixed sequence procedures considered numbers hypotheses 4, 8, 12, 16. Computing time (median log-10 seconds) plotted . can see gMCP::calcPower() fastest Approach 1 (graphicalMCP conventional) lowest. Note gMCP::calcPower() implements simulation using C, known faster R easy extend situations. Given computing time Approach 2 (graphicalMCP parent-child) acceptable, implement graphicalMCP::graph_calculate_power().","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"confirmatory clinical trials, regulatory guidelines mandate strong control family-wise error rate prespecified level \\(\\alpha\\). Many multiple comparison procedures (MCPs) proposed purpose. graphical approaches general framework include many common MCPs special cases. vignette, illustrate use graphicalMCP perform common MCPs. graphical approaches test \\(m\\) hypotheses, hypothesis \\(H_i\\) receives weight \\(0\\leq w_i\\leq 1\\) (called hypothesis weight), \\(\\sum_{=1}^{m}w_i\\leq 1\\). \\(H_i\\) \\(H_j\\), directed weighted edge \\(0\\leq g_{ij}\\leq 1\\), means \\(H_i\\) rejected, hypothesis weight propagated (transferred) \\(H_j\\) \\(g_{ij}\\) determines much propagation. also require \\(\\sum_{j=1}^{m}g_{ij}\\leq 1\\) \\(g_{ii}=0\\).","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"weighted-bonferroni-test","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Weighted Bonferroni test","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"weighted Bonferroni test splits \\(\\alpha\\) among hypotheses testing every hypothesis significance level \\(w_i\\alpha\\). Thus rejects hypothesis p-value less equal significance level. \\(w_i=w_j\\) \\(,j\\), means equal split test Bonferroni test. propagation pair hypothesis.","code":"set.seed(1234) alpha <- 0.025 m <- 3 transitions <- matrix(0, m, m) bonferroni_graph <- graph_create(rep(1 / m, m), transitions)  plot(   bonferroni_graph,   layout = igraph::layout_in_circle(     as_igraph(bonferroni_graph),     order = c(2, 1, 3)   ),   vertex.size = 70 ) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     bonferroni_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>    H1    H2    H3  #>  TRUE FALSE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"holm-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Holm Procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Holm (Bonferroni-Holm) procedures improve Bonferroni tests allowing propagation. words, transition weights hypotheses may zero. uniformly powerful Bonferroni tests.","code":"set.seed(1234) alpha <- 0.025 m <- 3 transitions <- matrix(1 / (m - 1), m, m) diag(transitions) <- 0 holm_graph <- graph_create(rep(1 / m, m), transitions)  plot(holm_graph,   layout = igraph::layout_in_circle(     as_igraph(holm_graph),     order = c(2, 1, 3)   ),   vertex.size = 70 ) p_values <- runif(m, 0, alpha)  test_results <- graph_test_shortcut(holm_graph, p = p_values, alpha = alpha)  test_results$outputs$rejected #>    H1    H2    H3  #>  TRUE FALSE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"fixed-sequence-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Fixed sequence procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Fixed sequence (hierarchical) procedures pre-specify order testing. example, procedure test \\(H_1\\) first. rejected, test \\(H_2\\); otherwise testing stops. \\(H_2\\) rejected, test \\(H_3\\); otherwise testing stops. hypothesis, tested full \\(\\alpha\\) level, can tested.","code":"set.seed(1234) alpha <- 0.025 m <- 3  transitions <- rbind(   c(0, 1, 0),   c(0, 0, 1),   c(0, 0, 0) )  fixed_sequence_graph <- graph_create(c(1, 0, 0), transitions) plot(fixed_sequence_graph, nrow = 1, asp = .05, vertex.size = 40) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     fixed_sequence_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>   H1   H2   H3  #> TRUE TRUE TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"fallback-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Fallback procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Fallback procedures one-way propagation (like fixed sequence procedures) allow hypotheses tested different significance levels.  can improved allow propagation later hypotheses earlier hypotheses, possible later hypothesis rejected earlier hypothesis can rejected.","code":"set.seed(1234) alpha <- 0.025 m <- 3  # Wiens (2003) transitions <- rbind(   c(0, 1, 0),   c(0, 0, 1),   c(0, 0, 0) )  fallback_graph_2003 <- graph_create(rep(1 / m, m), transitions) plot(fallback_graph_2003, nrow = 1, asp = .05, vertex.size = 40) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     fallback_graph_2003,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>   H1   H2   H3  #> TRUE TRUE TRUE set.seed(1234) alpha <- 0.025 m <- 3  # Wiens and Dmitrienko (2005) transitions <- rbind(   c(0, 1, 0),   c(0, 0, 1),   c(0.5, 0.5, 0) )  fallback_graph_2005 <- graph_create(rep(1 / m, m), transitions)  plot(   fallback_graph_2005,   nrow = 1,   asp = .05,   vertex.size = 40,   edge_curves = c(\"pairs\" = 7, \"H3|H1\" = -10) ) # Hommel and Bretz (2008) epsilon <- 0.0001  transitions <- rbind(   c(0, 1, 0),   c(1 - epsilon, 0, epsilon),   c(1, 0, 0) )  fallback_graph_2008 <- graph_create(rep(1 / m, m), transitions)  plot(   fallback_graph_2008,   nrow = 1,   asp = .05,   eps = .0001,   edge_curves = c(\"pairs\" = 7, \"H3|H1\" = -10),   vertex.size = 40 ) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     fallback_graph_2008,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>   H1   H2   H3  #> TRUE TRUE TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"serial-gatekeeping-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Serial gatekeeping procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Serial gatekeeping procedures involve ordered multiple families hypotheses, hypotheses family hypotheses must rejected proceeding test sequence. example considers primary family consisting two hypotheses \\(H_1\\) \\(H_2\\) secondary family consisting single hypothesis \\(H_3\\). primary family, Holm procedure applied. \\(H_1\\) \\(H_2\\) rejected, \\(H_3\\) can tested level \\(\\alpha\\); otherwise \\(H_3\\) rejected. allow conditional propagation \\(H_3\\), \\(\\varepsilon\\) edge used \\(H_2\\) \\(H_3\\). small transition weight \\(H_2\\) propagates hypothesis weight \\(H_1\\) (already rejected) retains small (non-zero) weight \\(H_3\\) \\(H_1\\) rejected, hypothesis weight \\(H_2\\) propagated \\(H_3\\). \\(\\varepsilon\\) assigned 0.0001 practice, value adjusted much smaller smallest p-value observed.","code":"set.seed(1234) alpha <- 0.025 m <- 3 epsilon <- 0.0001  transitions <- rbind(   c(0, 1, 0),   c(1 - epsilon, 0, epsilon),   c(0, 0, 0) )  serial_gatekeeping_graph <- graph_create(c(0.5, 0.5, 0), transitions)  plot(   serial_gatekeeping_graph,   nrow = 1,   asp = .05,   eps = .0001,   edge_curves = c(\"pairs\" = 7, \"H3|H1\" = -10),   vertex.size = 40 ) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     serial_gatekeeping_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>   H1   H2   H3  #> TRUE TRUE TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"parallel-gatekeeping-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Parallel gatekeeping procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Parallel gatekeeping procedures also involves multiple ordered families hypotheses, null hypotheses family hypotheses must rejected proceeding test sequence. example considers primary family consisting two hypotheses \\(H_1\\) \\(H_2\\) secondary family consisting two hypotheses \\(H_3\\) \\(H_4\\). primary family, Bonferroni test applied. \\(H_1\\) \\(H_2\\) rejected, \\(H_3\\) \\(H_4\\) can tested level \\(\\alpha/2\\) using Holm procedure; \\(H_1\\) \\(H_2\\) rejected, \\(H_3\\) \\(H_4\\) can tested level \\(\\alpha\\) using Holm procedure; otherwise \\(H_3\\) \\(H_4\\) rejected.  parallel gatekeeping procedure can improved adding \\(\\varepsilon\\) edges secondary hypotheses primary hypotheses, possible secondary hypotheses rejected still remaining primary hypothesis rejected.","code":"set.seed(1234) alpha <- 0.025 m <- 4  transitions <- rbind(   c(0, 0, 0.5, 0.5),   c(0, 0, 0.5, 0.5),   c(0, 0, 0, 1),   c(0, 0, 1, 0) )  parallel_gatekeeping_graph <- graph_create(c(0.5, 0.5, 0, 0), transitions)  plot(parallel_gatekeeping_graph, vertex.size = 70) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     parallel_gatekeeping_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE FALSE FALSE FALSE set.seed(1234) alpha <- 0.025 m <- 4 epsilon <- 0.0001  transitions <- rbind(   c(0, 0, 0.5, 0.5),   c(0, 0, 0.5, 0.5),   c(epsilon, 0, 0, 1 - epsilon),   c(0, epsilon, 1 - epsilon, 0) )  parallel_gatekeeping_improved_graph <-   graph_create(c(0.5, 0.5, 0, 0), transitions)  plot(parallel_gatekeeping_improved_graph, eps = .0001, vertex.size = 70) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     parallel_gatekeeping_improved_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE FALSE FALSE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"successive-procedure","dir":"Articles","previous_headings":"Bonferroni-based procedures","what":"Successive procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Successive procedures incorporate successive relationships hypotheses. example, secondary hypothesis tested primary hypothesis rejected. similar using fixed sequence procedure component graph. example considers two primary hypotheses \\(H_1\\) \\(H_2\\) two secondary hypotheses \\(H_3\\) \\(H_4\\). Primary hypotheses \\(H_1\\) \\(H_2\\) receive equal hypothesis weight 0.5; secondary hypotheses \\(H_3\\) \\(H_4\\) receive hypothesis weight 0. secondary hypothesis \\(H_3 (H_4)\\) can tested corresponding primary hypothesis \\(H_1 (H_2)\\) rejected. represents successive relationships \\(H_1\\) \\(H_3\\), \\(H_2\\) \\(H_4\\), respectively. \\(H_1\\) \\(H_3\\) rejected, hypothesis weights propagated \\(H_2\\) \\(H_4\\), vice versa.  graph generalized allow propagation primary hypotheses. general successive graph illustrate variable determine propagation \\(H_1\\) \\(H_2\\).","code":"set.seed(1234) alpha <- 0.025 m <- 4  transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  #  Maurer et al. (2011) simple_successive_graph <- graph_create(c(0.5, 0.5, 0, 0), transitions)  plot(simple_successive_graph, layout = \"grid\", nrow = 2, vertex.size = 70) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     simple_successive_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE FALSE FALSE FALSE set.seed(1234) alpha <- 0.025 m <- 4  #  Maurer et al. (2011) successive_var <- simple_successive_var <- function(gamma) {   graph_create(     c(.5, .5, 0, 0),     rbind(       c(0, gamma, 1 - gamma, 0),       c(gamma, 0, 0, 1 - gamma),       c(0, 1, 0, 0),       c(1, 0, 0, 0)     )   ) }  successive_var_graph <- successive_var(0.5) plot(successive_var_graph, layout = \"grid\", nrow = 2, vertex.size = 70) p_values <- runif(m, 0, alpha)  test_results <-   graph_test_shortcut(     successive_var_graph,     p = p_values,     alpha = alpha   )  test_results$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE FALSE"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"hommel-procedure","dir":"Articles","previous_headings":"Simes-based procedures","what":"Hommel procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Hommel (1988) procedure closed test procedure uses Simes tests every intersection hypothesis. According Xi Bretz (2019), graph Hommel procedures graph Holm procedures. Thus perform Hommel procedure, just need specify test_type simes.","code":"set.seed(1234) alpha <- 0.025 m <- 3 transitions <- matrix(1 / (m - 1), m, m) diag(transitions) <- 0 hommel_graph <- graph_create(rep(1 / m, m), transitions)  plot(   hommel_graph,   layout = igraph::layout_in_circle(     as_igraph(hommel_graph),     order = c(2, 1, 3)   ),   vertex.size = 70 ) p_values <- runif(m, 0, alpha)  test_results <- graph_test_closure(   hommel_graph,   p = p_values,   alpha = alpha,   test_types = \"simes\" )  test_results$outputs$rejected #>   H1   H2   H3  #> TRUE TRUE TRUE"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graph-examples.html","id":"dunnett-procedure","dir":"Articles","previous_headings":"Parametric procedures","what":"Dunnett procedure","title":"Common multiple comparison procedures illustrated using graphicalMCP","text":"Step-Dunnett procedures closed test procedure improvement Holm procedures incorporating correlation structure test statistics. Thus graph Holm procedures. Assume equi-correlated case, correlation pair test statistics , e.g., 0.5. can perform step-Dunnett procedure specifying test_type parametric providing correlation matrix.","code":"set.seed(1234) alpha <- 0.025 m <- 3 transitions <- matrix(1 / (m - 1), m, m) diag(transitions) <- 0 dunnett_graph <- graph_create(rep(1 / m, m), transitions)  plot(   dunnett_graph,   layout = igraph::layout_in_circle(     as_igraph(dunnett_graph),     order = c(2, 1, 3)   ),   vertex.size = 70 ) p_values <- runif(m, 0, alpha) corr <- matrix(0.5, m, m) diag(corr) <- 1  test_results <- graph_test_closure(   dunnett_graph,   p = p_values, alpha = alpha,   test_types = \"parametric\",   test_corr = list(corr) )  test_results$outputs$rejected #>    H1    H2    H3  #>  TRUE FALSE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get started","text":"Graphical approaches multiple comparison procedures (MCPs) general framework control familywise error rate strongly pre-specified significance level \\(0<\\alpha<1\\). approach includes many commonly used MCPs special cases transparent visualizing MCPs better communications. graphicalMCP designed design analyze graphical MCPs flexible, informative efficient way.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"initial-graph","dir":"Articles","previous_headings":"Basic usage","what":"Initial graph","title":"Get started","text":"base object graphicalMCP initial_graph, consists vector hypothesis weights matrix transition weights (Bretz et al. 2009). graphical representation, hypotheses denoted nodes (vertices) associated hypothesis weights. directed edge hypothesis another indicates direction propagation hypothesis weight origin hypothesis end hypothesis. edge weighted transition weight indicating proportion propagation.","code":"library(graphicalMCP) # A graph of two primary hypotheses (H1 and H2) and two secondary hypotheses (H3 and H4) hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\") example_graph <- graph_create(hypotheses, transitions, hyp_names) example_graph plot(example_graph, vertex.size = 60)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"update-graph","dir":"Articles","previous_headings":"Basic usage","what":"Update graph","title":"Get started","text":"hypothesis removed graph, hypothesis transition weights remaining hypotheses updated according Algorithm 1 Bretz et al. (2011). example, assume hypotheses H1, H2 H4 removed graph. updated graph removing three hypotheses .","code":"updated_example <- graph_update(   example_graph,   delete = c(TRUE, TRUE, FALSE, TRUE) )  updated_example plot(updated_example, vertex.size = 60)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"perform-graphical-mcps","dir":"Articles","previous_headings":"","what":"Perform graphical MCPs","title":"Get started","text":"Given set p-values hypotheses, graphical MCPs can performed using graph_test_shortcut() determine hypotheses can rejected significance level alpha. Assume p-values 0.01, 0.005, 0.03, 0.01 hypotheses H1-H4. one-sided significance level alpha = 0.025, rejected hypotheses H1, H2, H4. details shortcut testing can found vignette(\"shortcut-testing\"). similar testing procedure can performed using closure principle. allow tests intersection hypotheses, e.g., Simes, parametric mixture . test type Bonferroni, resulting closed procedure equivalent shortcut procedure . Additional details closed testing can found vignette(\"closed-testing\").","code":"test_results <- graph_test_shortcut(   example_graph,   p = c(.01, .005, .03, .01),   alpha = .025) test_results$outputs$rejected test_results_closed <- graph_test_closure(   example_graph,   p = c(.01, .005, .03, .01),   alpha = .025,   test_types = \"bonferroni\",   test_groups = list(1:4) ) test_results_closed$outputs$rejected"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/graphicalMCP.html","id":"power-simulations","dir":"Articles","previous_headings":"","what":"Power simulations","title":"Get started","text":"multiplicity adjustment, graphical MCPs, “power” reject hypothesis affected, compared marginal power. latter power rejected hypothesis significance level alpha without multiplicity adjustment. marginal power usually obtained pieces statistical software. graph_calculate_power performs power simulations assess power adjusting graphical MCP. Assume marginal power reject H1-H4 90%, 90%, 80%, 80% test statistics independent . local power multiplicity adjustment 87.7%, 87.7, 67.2%, 67.2% respectively H1-H4. Additional details closed testing can found vignette(\"shortcut-testing\") vignette(\"closed-testing\").","code":"set.seed(1234) power_results <- graph_calculate_power(   example_graph,   sim_n = 1e6,   power_marginal = c(.9, .9, .8, .8) ) power_results$power$power_local"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"motivating-example","dir":"Articles","previous_headings":"","what":"Motivating example","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Consider confirmatory clinical trial comparing test treatment (treatment) control treatment (control) disease. two doses treatment: low dose high dose. two endpoints included multiplicity adjustment strategy, primary endpoint (PE) secondary endpoint (SE). total, four null hypotheses: \\(H_1\\) \\(H_3\\) primary secondary hypotheses respectively low dose versus control; \\(H_2\\) \\(H_4\\) primary secondary hypotheses respectively high dose versus control. clinical considerations constrain structure multiple comparison procedures, can flexibly incorporated using graphical approaches. First, low high doses considered equally important, means rejecting primary hypothesis either dose versus control leads successful trial. Regarding secondary hypotheses, one tested corresponding primary hypothesis rejected. means \\(H_3\\) tested \\(H_1\\) rejected; \\(H_4\\) tested \\(H_2\\) rejected. addition, statistical considerations complete graph. primary hypotheses \\(H_1\\) \\(H_2\\) equal hypothesis weight 0.5. secondary hypotheses hypothesis weight 0. primary hypothesis rejected, weight propagated along two outgoing edges: One primary hypothesis one descendant secondary hypothesis. two edges equal transition weight 0.5. primary secondary hypotheses rejected dose-control comparison, hypothesis weights propagated primary hypothesis dose-control comparison. specifications, can create following graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"create-the-graph","dir":"Articles","previous_headings":"","what":"Create the graph","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0.5, 0.5, 0),   c(0.5, 0, 0, 0.5),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H1\", \"H2\", \"H3\", \"H4\")  g <- graph_create(hypotheses, transitions, hyp_names)  plot(g, vertex.size = 60)"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"adjusted-p-values-and-rejections","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Adjusted p-values and rejections","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Given set p-values \\(H_1, \\ldots, H_4\\), graphical multiple comparison procedure can performed control familywise error rate (FWER) significance level alpha. graph_test_shortcut function agnostic one-sided two-sided tests. one-sided p-values, alpha often set 0.025 (default); two-sided p-values, alpha often set 0.05. consider one-sided tests . hypothesis rejected adjusted p-value less equal alpha. running procedure, hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\) rejected adjusted p-value calculated.","code":"p_values <- c(.018, .01, .105, .006) test_results <- graph_test_shortcut(g, p = p_values, alpha = 0.025)  test_results$outputs$adjusted_p # Adjusted p-values #>    H1    H2    H3    H4  #> 0.024 0.020 0.105 0.024 test_results$outputs$rejected # Rejections #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE  TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"obtain-final-and-intermediate-graphs-after-rejections","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain final and intermediate graphs after rejections","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"final graph graph removing rejected hypotheses \\(H_1\\), \\(H_2\\), \\(H_4\\). can obtained via test_results$outputs$graph. Rejected hypotheses get hypothesis weight NA transition weight NA. based printing method print.updated_graph. can also obtain non-NA graph calling hypothesis weights transition weights separately via test_results$outputs$graph$hypotheses test_results$outputs$graph$transitions. Note case, rejected hypotheses get 0 hypothesis weight 0 transition weight. mainly internal calculation updating graphs. also interested intermediate graphs - example, graph \\(H_2\\) \\(H_1\\) rejected - can specify verbose = TRUE graph_test_shortcut. Note intermediate graphs depend order rejections, .e., sequence hypotheses rejected. default order defined increasing adjusted p-values, followed earlier hypothesis numbering case ties. example, default order rejection \\(H_2\\rightarrow H_1\\rightarrow H_4\\). obtain intermediate graphs based order rejection, one can specify test_results_verbose$details$results. example, graph \\(H_2\\) \\(H_1\\) rejected given test_results_verbose$details$results[[3]].","code":"test_results$outputs$graph # Final graph after H1, H2 and H4 rejected (as NA's) #> Updated graph #>  #> --- Hypothesis weights --- #> H1: NA #> H2: NA #> H3:  1 #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA NA NA NA #>  H3 NA NA  0 NA #>  H4 NA NA NA NA test_results$outputs$graph$hypotheses # Hypothesis weights of the final graph #> H1 H2 H3 H4  #>  0  0  1  0 test_results$outputs$graph$transitions # Transition weights of the final graph #>    H1 H2 H3 H4 #> H1  0  0  0  0 #> H2  0  0  0  0 #> H3  0  0  0  0 #> H4  0  0  0  0  test_results_verbose <- graph_test_shortcut(   g,   p = p_values,   alpha = 0.025,   verbose = TRUE )  # Intermediate graph after H1 and H2 rejected test_results_verbose$details$results[[3]] #> Updated graph #>  #> --- Hypothesis weights --- #> H1:  NA #> H2:  NA #> H3: 0.5 #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA NA NA NA #>  H3 NA NA  0  1 #>  H4 NA NA  1  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"obtain-possible-orders-of-rejections","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain possible orders of rejections","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"order rejections may unique orders valid. example, rejected hypotheses \\(H_1\\), \\(H_2\\) \\(H_4\\). default order rejections \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\). Another valid order rejections \\(H_2 \\rightarrow H_4 \\rightarrow H_1\\). However, first rejected hypothesis can \\(H_1\\) \\(H_4\\). obtain possible rejection orders, one can use function graph_rejection_orderings. intermediate final graphs can obtained using function graph_update particular order rejections.","code":"# Obtain all valid orders of rejections orders <- graph_rejection_orderings(test_results)$valid_orderings  orders #> [[1]] #> H2 H1 H4  #>  2  1  4  #>  #> [[2]] #> H2 H4 H1  #>  2  4  1  # Intermediate graphs following the order of H2 and H4 graph_update(g, delete = orders[[2]])$intermediate_graphs[[3]] #> Updated graph #>  #> --- Hypothesis weights --- #> H1:  1 #> H2: NA #> H3:  0 #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0 NA  1 NA #>  H2 NA NA NA NA #>  H3  1 NA  0 NA #>  H4 NA NA NA NA"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"obtain-adjusted-significance-levels","dir":"Articles","previous_headings":"Perform the graphical multiple comparison procedure","what":"Obtain adjusted significance levels","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"equivalent way obtain rejections adjusting significance levels. hypothesis rejected p-value less equal adjusted significance level. adjusted significance levels calculated order adjusted p-values: \\(H_2 \\rightarrow H_1 \\rightarrow H_4\\), four steps checking rejections. First, \\(H_2\\) rejected adjusted significance level 0.5 * alpha. Second, \\(H_1\\) rejected adjusted significance level 0.75 * alpha, \\(H_2\\) rejected. Third, \\(H_4\\) rejected adjusted significance level 0.5 * alpha, \\(H_1\\) \\(H_2\\) rejected. Fourth finally, \\(H_3\\) rejected adjusted significance level alpha, \\(H_1\\), \\(H_2\\) \\(H_4\\) rejected. results can obtained specifying test_values = TRUE.","code":"test_results_test_values <- graph_test_shortcut(   g,   p = p_values,   alpha = 0.025,   test_values = TRUE )  test_results_test_values$test_values$results #>    Step Hypothesis     p <= Weight * Alpha Inequality_holds #> H2    1         H2 0.010 <=   0.50 * 0.025             TRUE #> H1    2         H1 0.018 <=   0.75 * 0.025             TRUE #> H4    3         H4 0.006 <=   0.50 * 0.025             TRUE #> H3    4         H3 0.105 <=   1.00 * 0.025            FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"power-simulation","dir":"Articles","previous_headings":"","what":"Power simulation","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Given graph, interested “power” trial. single null hypothesis, power probability true positive - , rejecting null hypothesis significance level alpha alternative hypothesis true. multiple null hypotheses, multiple versions “power”. example, power reject least one hypothesis vs power reject hypotheses, given alternative hypotheses true. graphical multiple comparison procedures, also important understand power reject hypothesis, given multiplicity adjustment. Sometimes, may want customize definitions power define success. Thus power calculation important aspect trial design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"input-marginal-power-for-primary-hypotheses","dir":"Articles","previous_headings":"Power simulation","what":"Input: Marginal power for primary hypotheses","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Assume primary endpoint occurrence unfavorable clinical event. evaluate treatment effect, proportion patients event calculated, lower proportion preferred. Assume proportions 0.181 low high doses, 0.3 control. Using equal randomization among three treatment groups, clinical trial team chooses total sample size 600 200 per group. leads marginal power 80% \\(H_1\\) \\(H_2\\), respectively, using two-sample test difference proportions unpooled variance one-sided significance level 0.025. calculation, use marginal power combine information treatment effect, nuisance parameter, sample sizes hypothesis. Note significance level used marginal power calculation must alpha, used significance level FWER control. addition, marginal power one--one relationship noncentrality parameter, illustrated .","code":"alpha <- 0.025 prop <- c(0.3, 0.181, 0.181) sample_size <- rep(200, 3)  unpooled_variance <-   prop[-1] * (1 - prop[-1]) / sample_size[-1] +   prop[1]  * (1 - prop[1] ) / sample_size[1]  noncentrality_parameter_primary <-   -(prop[-1] - prop[1]) / sqrt(unpooled_variance)  power_marginal_primary <- pnorm(   qnorm(alpha, lower.tail = FALSE),   mean = noncentrality_parameter_primary,   sd = 1,   lower.tail = FALSE )  names(power_marginal_primary) <- c(\"H1\", \"H2\") power_marginal_primary #>        H1        H2  #> 0.8028315 0.8028315"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"input-marginal-power-for-secondary-hypotheses","dir":"Articles","previous_headings":"Power simulation","what":"Input: Marginal power for secondary hypotheses","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Assume secondary endpoint change total medication score baseline, continuous outcome. evaluate treatment effect, mean change calculated, greater reduction preferred. Assume mean change baseline reduction 7.5 8.25, respectively low high doses, 5 control. assume known common standard deviation 10. Given sample size 200 per treatment group, marginal power 71% 90% \\(H_3\\) \\(H_4\\), respectively, using two-sample \\(z\\)-test difference means one-sided significance level 0.025.","code":"mean_change <- c(5, 7.5, 8.25) sd <- rep(10, 3) variance <- sd[-1]^2 / sample_size[-1] + sd[1]^2 / sample_size[1]  noncentrality_parameter_secondary <-   (mean_change[-1] - mean_change[1]) / sqrt(variance)  power_marginal_secondary <- pnorm(   qnorm(alpha, lower.tail = FALSE),   mean = noncentrality_parameter_secondary,   sd = 1,   lower.tail = FALSE )  names(power_marginal_secondary) <- c(\"H3\", \"H4\") power_marginal_secondary #>        H3        H4  #> 0.7054139 0.9014809"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"input-correlation-structure-to-simulate-test-statistics","dir":"Articles","previous_headings":"Power simulation","what":"Input: Correlation structure to simulate test statistics","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"addition marginal power, also need make assumptions joint distribution test statistics. example, assume follow multivariate normal distribution means defined noncentrality parameters correlation matrix \\(R\\). obtain correlations, helpful understand two types correlations example. correlation two dose-control comparisons endpoint correlation endpoints. former correlation can calculated function sample size. example, correlation test statistics \\(H_1\\) \\(H_2\\) \\(\\rho_{12}=\\left(\\frac{n_1}{n_1+n_0}\\right)^{1/2}\\left(\\frac{n_2}{n_3+n_0}\\right)^{1/2}\\). equal randomization, correlation 0.5. correlation test statistics \\(H_3\\) \\(H_4\\) . hand, correlation endpoints dose-control comparison often estimated based prior knowledge previous trials. Without information, assume \\(\\rho_{13}=\\rho_{24}=0.5\\). practice, one set correlation parameter try multiple values assess sensitivity assumption. Regarding correlation test statistics \\(H_1\\) \\(H_4\\) \\(H_2\\) \\(H_3\\), even difficult estimate. use simple product rule, means correlation product correlations two previously assumed correlations. example, \\(\\rho_{14}=\\rho_{12}*\\rho_{24}\\) \\(\\rho_{23}=\\rho_{12}*\\rho_{13}\\). practice, one may make assumptions instead using product rule.","code":"corr <- matrix(0, nrow = 4, ncol = 4)  corr[1, 2] <-   corr[3, 4] <-   sqrt(     sample_size[2] / sum(sample_size[1:2]) *       sample_size[3] / sum(sample_size[c(1, 3)])   )  rho <- 0.5 corr[1, 3] <- corr[2, 4] <- rho corr[1, 4] <- corr[2, 3] <- corr[1, 2] * rho corr <- corr + t(corr) diag(corr) <- 1 colnames(corr) <- hyp_names rownames(corr) <- hyp_names corr #>      H1   H2   H3   H4 #> H1 1.00 0.50 0.50 0.25 #> H2 0.50 1.00 0.25 0.50 #> H3 0.50 0.25 1.00 0.50 #> H4 0.25 0.50 0.50 1.00"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"user-defined-success-criteria","dir":"Articles","previous_headings":"Power simulation","what":"User-defined success criteria","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"mentioned earlier, multiple versions “power” multiple hypotheses. Commonly used “power” definitions include: Local power: probability hypothesis rejected (multiplicity adjustment) Expected . rejections: expected number rejections Power reject 1 : probability reject least one hypothesis Power reject : probability reject hypotheses default outputs graph_calculate_power function. addition, user can customize success criteria define versions “power”.","code":"success_fns <- list(   # Probability to reject H1   H1 = function(x) x[1],      # Expected number of rejections   `Expected no. of rejections` = function(x) x[1] + x[2] + x[3] + x[4],    # Probability to reject at least one hypothesis   `AtLeast1` = function(x) x[1] | x[2] | x[3] | x[4],      # Probability to reject all hypotheses   `All` = function(x) x[1] & x[2] & x[3] & x[4],      # Probability to reject both H1 and H2   `H1andH2` = function(x) x[1] & x[2],      # Probability to reject both hypotheses for the low dose or the high dose   `(H1andH3)or(H2andH4)` = function(x) (x[1] & x[3]) | (x[2] & x[4]) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/shortcut-testing.html","id":"output-simulate-power","dir":"Articles","previous_headings":"Power simulation","what":"Output: Simulate power","title":"Sequentially rejective graphical multiple comparison procedures based on Bonferroni tests","text":"Given inputs, can estimate “power” via simulation graphical multiple comparison procedure one-sided significance level alpha = 0.025 using sim_n = 1e5 simulations random seed 1234. local power 0.758, 0.765, 0.689, 0.570, respectively \\(H_1, \\ldots, H_4\\). Note local power lower marginal power former adjusted multiplicity. power reject least one hypothesis 0.856 power reject hypotheses 0.512. expected number rejections 2.782. last two user-defined success criteria, probability reject \\(H_1\\) \\(H_2\\) 0.667, probability reject least one pair \\((H_1\\) \\(H_3)\\) \\((H_2\\) \\(H_4)\\) 0.747. see detailed outputs simulated p-values rejection decisions hypotheses, specify verbose = TRUE. produce lot outputs. allow flexible printing functions, user can change following: indented space default setting indent = 2 precision numeric values (.e., number significant digits) default setting precision = 4","code":"set.seed(1234) power_output <- graph_calculate_power(   g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(power_marginal_primary, power_marginal_secondary),   sim_success = success_fns )  power_output$power #> $power_local #>      H1      H2      H3      H4  #> 0.76396 0.75887 0.56767 0.69133  #>  #> $power_expected #> [1] 2.78183 #>  #> $power_at_least_1 #> [1] 0.85557 #>  #> $power_all #> [1] 0.51205 #>  #> $power_success #>                         H1 Expected no. of rejections  #>                    0.76396                    2.78183  #>                   AtLeast1                        All  #>                    0.85557                    0.51205  #>                    H1andH2       (H1andH3)or(H2andH4)  #>                    0.66726                    0.74695 set.seed(1234) power_verbose_output <- graph_calculate_power(   g,   alpha = .025,   sim_corr = corr,   sim_n = 1e5,   power_marginal = c(power_marginal_primary, power_marginal_secondary),   sim_success = success_fns,   verbose = TRUE )  head(power_verbose_output$details$p_sim, 10) #>                 H1           H2           H3           H4 #>  [1,] 0.0308204265 0.0120653993 0.0041185823 9.324338e-02 #>  [2,] 0.0007933716 0.0006499046 0.0245177515 2.965604e-03 #>  [3,] 0.0302991819 0.0595395828 0.0543082956 2.625834e-02 #>  [4,] 0.0097433244 0.0033185711 0.0007417213 4.024688e-04 #>  [5,] 0.0197134942 0.0086161835 0.0164182765 2.418325e-07 #>  [6,] 0.0031206572 0.0067023099 0.0137441457 2.751703e-04 #>  [7,] 0.0302208038 0.1423757994 0.0060382838 2.117403e-02 #>  [8,] 0.0024975725 0.0294025573 0.0004142729 2.207786e-03 #>  [9,] 0.0618994292 0.0387257108 0.3166125781 5.699791e-02 #> [10,] 0.3677921053 0.1895975134 0.0702264885 1.189651e-02  print(power_verbose_output, indent = 4, precision = 6) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>     Initial graph #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2: 0.5 #>     H3: 0.0 #>     H4: 0.0 #>  #>     --- Transition weights --- #>         H1  H2  H3  H4 #>     H1 0.0 0.5 0.5 0.0 #>     H2 0.5 0.0 0.0 0.5 #>     H3 0.0 1.0 0.0 0.0 #>     H4 1.0 0.0 0.0 0.0 #>  #>     Alpha = 0.025 #>  #>     Test types #>     bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>     Testing 100,000 simulations with multivariate normal params: #>  #>                           H1       H2       H3       H4 #>     Marginal power: 0.802831 0.802831 0.705414 0.901481 #>  #>     Correlation:      H1   H2   H3   H4 #>                  H1 1.00 0.50 0.50 0.25 #>                  H2 0.50 1.00 0.25 0.50 #>                  H3 0.50 0.25 1.00 0.50 #>                  H4 0.25 0.50 0.50 1.00 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                      H1      H2      H3      H4 #>                    Local power: 0.76396 0.75887 0.56767 0.69133 #>  #>     Expected no. of rejections: 2.78183 #>      Power to reject 1 or more: 0.85557 #>            Power to reject all: 0.51205 #>  #>                Success measure   Power #>                             H1 0.76396 #>     Expected no. of rejections 2.78183 #>                       AtLeast1 0.85557 #>                            All 0.51205 #>                        H1andH2 0.66726 #>           (H1andH3)or(H2andH4) 0.74695 #>  #> Simulation details ($details) -------------------------------------------------- #>         p_sim_H1    p_sim_H2    p_sim_H3    p_sim_H4 rej_H1 rej_H2 rej_H3 rej_H4 #>      3.08204e-02 1.20654e-02 4.11858e-03 9.32434e-02  FALSE   TRUE  FALSE  FALSE #>      7.93372e-04 6.49905e-04 2.45178e-02 2.96560e-03   TRUE   TRUE   TRUE   TRUE #>      3.02992e-02 5.95396e-02 5.43083e-02 2.62583e-02  FALSE  FALSE  FALSE  FALSE #>      9.74332e-03 3.31857e-03 7.41721e-04 4.02469e-04   TRUE   TRUE   TRUE   TRUE #>      1.97135e-02 8.61618e-03 1.64183e-02 2.41833e-07   TRUE   TRUE   TRUE   TRUE #>      3.12066e-03 6.70231e-03 1.37441e-02 2.75170e-04   TRUE   TRUE   TRUE   TRUE #>      3.02208e-02 1.42376e-01 6.03828e-03 2.11740e-02  FALSE  FALSE  FALSE  FALSE #>      2.49757e-03 2.94026e-02 4.14273e-04 2.20779e-03   TRUE  FALSE   TRUE  FALSE #>      6.18994e-02 3.87257e-02 3.16613e-01 5.69979e-02  FALSE  FALSE  FALSE  FALSE #>      3.67792e-01 1.89598e-01 7.02265e-02 1.18965e-02  FALSE  FALSE  FALSE  FALSE #>     ... (Use `print(x, rows = <nn>)` for more)"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Validation of methods against existing packages","text":"graphicalMCP seeks comprehensive flexible R package graphical MCPs, first. packages gMCP lrstat cover portions graphical MCPs. provide bit validation existing packages.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"Validation of methods against existing packages","text":"simple successive graph used demonstrate equivalence packages.","code":"hypotheses <- c(.5, .5, 0, 0) transitions <- rbind(   c(0, .5, .5, 0),   c(.5, 0, 0, .5),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  ss_graph <- graph_create(hypotheses, transitions)  plot(ss_graph, vertex.size = 60)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"gmcp","dir":"Articles","previous_headings":"Validation","what":"gMCP","title":"Validation of methods against existing packages","text":"gMCP pioneer R package graphical MCPs, covers many common use cases. ’ll compare graphicalMCP generating weights closure, testing Bonferroni parametric testing, power calculations using Bonferroni testing.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"generate-weights","dir":"Articles","previous_headings":"Validation > gMCP","what":"Generate weights","title":"Validation of methods against existing packages","text":"Weights closure identical, besides different order different names.","code":"graphicalmcp_weights <- graph_generate_weights(ss_graph) dimnames(graphicalmcp_weights) <- list(NULL, NULL)  gmcp_weights <- generateWeights(ss_graph$transitions, ss_graph$hypotheses)  all.equal(gmcp_weights, graphicalmcp_weights[15:1, ]) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"bonferroni-adjusted-p-values","dir":"Articles","previous_headings":"Validation > gMCP","what":"Bonferroni adjusted p-values","title":"Validation of methods against existing packages","text":"","code":"p <- c(.001, .019, .01, .05)  graphicalmcp_test_bonf <- graph_test_shortcut(ss_graph, p)  gmcp_test_bonf <- gMCP(as_graphMCP(ss_graph), p, alpha = .025)  all.equal(graphicalmcp_test_bonf$outputs$adjusted_p, gmcp_test_bonf@adjPValues) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"parametric-adjusted-p-values","dir":"Articles","previous_headings":"Validation > gMCP","what":"Parametric adjusted p-values","title":"Validation of methods against existing packages","text":"Parametric adjusted p-values calculated different precision packages.","code":"test_corr <- rbind(   c(1, .5, NA, NA),   c(.5, 1, NA, NA),   c(NA, NA, 1, NA),   c(NA, NA, NA, 1) )  graphicalmcp_test_para <-   graph_test_closure(     ss_graph,     p,     test_groups = list(1:2, 3:4),     test_types = c(\"p\", \"b\"),     test_corr = list(test_corr[1:2, 1:2], NA)   )  gmcp_test_para <-   gMCP(     as_graphMCP(ss_graph),     p,     alpha = .025,     correlation = test_corr   )  all.equal(   round(graphicalmcp_test_para$outputs$adjusted_p, 10),   round(gmcp_test_para@adjPValues, 10) ) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"bonferroni-power","dir":"Articles","previous_headings":"Validation > gMCP","what":"Bonferroni power","title":"Validation of methods against existing packages","text":"packages use slightly different simulation methods, leads slight differences power.","code":"marginal_power <- c(.8, .8, .7, .7)  noncentrality_parameter <-   qnorm(1 - .025, lower.tail = TRUE) -   qnorm(1 - marginal_power, lower.tail = TRUE)  sim_corr <- matrix(.5, 4, 4) diag(sim_corr) <- 1  set.seed(92123) graphicalmcp_power <-   graph_calculate_power(     ss_graph,     power_marginal = marginal_power,     sim_corr = sim_corr,     sim_n = 2^17   )  set.seed(92123) gmcp_power <-   calcPower(     ss_graph$hypotheses,     .025,     ss_graph$transitions,     mean = noncentrality_parameter,     corr.sim = sim_corr,     n.sim = 2^17   )  print(\"Power differences\") #> [1] \"Power differences\" structure(   lapply(     seq_along(gmcp_power),     function(index) gmcp_power[[index]] - graphicalmcp_power$power[[index]]   ),   names = names(graphicalmcp_power$power)[1:4] ) #> $power_local #>            H1            H2            H3            H4  #> -5.340576e-05 -6.637573e-04 -2.136230e-03 -2.143860e-03  #>  #> $power_expected #> [1] -0.004997253 #>  #> $power_at_least_1 #> [1] 0.0002670288 #>  #> $power_all #> [1] -0.002151489"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"parametric-power","dir":"Articles","previous_headings":"Validation > gMCP","what":"Parametric power","title":"Validation of methods against existing packages","text":"","code":"set.seed(92123) graphicalmcp_power_para <-   graph_calculate_power(     ss_graph,     test_groups = list(1:2, 3:4),     test_types = c(\"p\", \"b\"),     test_corr = list(test_corr[1:2, 1:2], NA),     power_marginal = marginal_power,     sim_corr = sim_corr,     sim_n = 2^13   )  set.seed(92123) gmcp_power_para <-   calcPower(     ss_graph$hypotheses,     .025,     ss_graph$transitions,     corr.test = test_corr,     mean = noncentrality_parameter,     corr.sim = sim_corr,     n.sim = 2^13   )  print(\"Power differences\") #> [1] \"Power differences\" structure(   lapply(     seq_along(gmcp_power_para),     function(index) {       gmcp_power_para[[index]] - graphicalmcp_power_para$power[[index]]     }   ),   names = names(graphicalmcp_power_para$power)[1:4] ) #> $power_local #>            H1            H2            H3            H4  #>  0.0048828125 -0.0012207031  0.0039062500  0.0003662109  #>  #> $power_expected #> [1] 0.00793457 #>  #> $power_at_least_1 #> [1] 0.002563477 #>  #> $power_all #> [1] 0.001220703"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"lrstat","dir":"Articles","previous_headings":"Validation","what":"lrstat","title":"Validation of methods against existing packages","text":"lrstat primarily focused graphical MCPs, include functions generate weights run Simes testing, makes good validation complement gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"generate-weights-1","dir":"Articles","previous_headings":"Validation > lrstat","what":"Generate weights","title":"Validation of methods against existing packages","text":"","code":"graphicalmcp_weights <- graph_generate_weights(ss_graph)  lrstat_weights <- fwgtmat(ss_graph$hypotheses, ss_graph$transitions)  all.equal(lrstat_weights, unname(graphicalmcp_weights[, 5:8])) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"simes-adjusted-p-values","dir":"Articles","previous_headings":"Validation > lrstat","what":"Simes adjusted p-values","title":"Validation of methods against existing packages","text":"","code":"graphicalmcp_test_simes <-   graph_test_closure(     ss_graph,     p,     test_groups = list(1:2, 3:4),     test_types = c(\"s\", \"b\")   )  family <- rbind(   c(1, 1, 0, 0),   c(0, 0, 1, 0),   c(0, 0, 0, 1) )  lrstat_test_simes <-   fadjpsim(     fwgtmat(ss_graph$hypotheses, ss_graph$transitions),     p,     family   )  all.equal(   unname(graphicalmcp_test_simes$outputs$adjusted_p),   lrstat_test_simes ) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/articles/validation.html","id":"simes-power","dir":"Articles","previous_headings":"Validation > lrstat","what":"Simes power","title":"Validation of methods against existing packages","text":"lrstat doesn’t built-MCP power function, can calculate many adjusted p-values quickly given matrix p-values. simulate p-values way graph_calculate_power() demonstrate results .","code":"set.seed(92123) graphicalmcp_power_simes <-   graph_calculate_power(     ss_graph,     power_marginal = marginal_power,     test_groups = list(1:2, 3:4),     test_types = c(\"s\", \"b\"),     sim_corr = sim_corr,     sim_n = 1e5   )  noncentrality_parameter <-   qnorm(1 - .025, lower.tail = TRUE) -   qnorm(1 - marginal_power, lower.tail = TRUE)  # Simulate p-values the same way as graph_calculate_power() set.seed(92123) p_sim <- pnorm(   mvtnorm::rmvnorm(     1e5,     noncentrality_parameter,     sigma = sim_corr   ),   lower.tail = FALSE )  lrstat_p_adj_simes <-   fadjpsim(     fwgtmat(ss_graph$hypotheses, ss_graph$transitions),     p_sim,     family   )  lrstat_power_simes <- colSums(lrstat_p_adj_simes <= .025) / 1e5  all.equal(   lrstat_power_simes,   unname(graphicalmcp_power_simes$power$power_local) ) #> [1] TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dong Xi. Author, maintainer. Ethan Brockmann. Author. Gilead Biostatistics. Copyright holder, funder. Atorus Research LLC. Copyright holder.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xi, D.; Brockmann, E. (2023). graphicalMCP: Graph-based multiple comparison procedures. version 0.1.0. Gilead Sciences, Inc. Foster City, California. https://github.com/Gilead-BioStats/graphicalMCP Frank Bretz, Martin Posch, Ekkehard Glimm, Florian Klinglmueller, Willi Maurer, Kornelius Rohmeyer (2011), Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes parametric tests. Biometrical Journal 53 (6), pages 894--913, Wiley.","code":"@Manual{,   title = {{graphicalMCP}: Graph-based multiple comparison procedures.},   author = {Dong Xi and Ethan Brockmann},   organization = {Gilead Sciences, Inc},   note = {version 0.1.0},   year = {2023},   url = {https://github.com/Gilead-BioStats/graphicalMCP}, } @Article{,   title = {Graphical approaches for multiple comparison procedures using weighted Bonferroni, Simes or parametric tests},   author = {Frank Bretz and Martin Posch and Ekkehard Glimm and Florian Klinglmueller and Willi Maurer and Kornelius Rohmeyer},   journal = {Biometrical Journal},   year = {2011},   publisher = {Wiley},   volume = {53},   number = {6},   pages = {894--913},   url = {http://onlinelibrary.wiley.com/doi/10.1002/bimj.201000239/full}, }"},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Graphical Approach for Multiple Comparison Procedures","text":"Graphical approaches multiple comparison procedures (MCPs) general framework control family-wise error rate strongly pre-specified significance level 0 < α < 1. approach includes many commonly used MCPs special cases transparent visualizing MCPs better communications. graphicalMCP designed design analyze graphical MCPs flexible, informative efficient way.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphical Approach for Multiple Comparison Procedures","text":"graphicalMCP currently CRAN can installed GitHub using following code:","code":"# install.packages(\"pak\") pak::pak(\"Gilead-BioStats/graphicalMCP@dev\")"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Graphical Approach for Multiple Comparison Procedures","text":"basic usage instructions, see vignette(\"graphicalMCP\") become familiar graphical MCP terminology, see vignette(\"glossary\") see vignette(\"shortcut-testing\") sequentially rejective graphical multiple comparison procedures based Bonferroni tests see vignette(\"closed-testing\") graphical multiple comparison procedures based closure principle see vignette(\"graph-examples\") common multiple comparison procedures illustrated using graphicalMCP see vignette(\"generate-closure\") rationales generate closure weighting strategy graph see vignette(\"validation\") comparisons R packages","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"related-work","dir":"","previous_headings":"","what":"Related work","title":"Graphical Approach for Multiple Comparison Procedures","text":"Graphical MCPs - gMCP Lighter version gMCP removes rJava dependency - gMCPLite Graphical MCPs Simes tests - lrstat Built upon packages, hope implement graphical MCPs general framework, fewer dependencies simpler S3 classes, without losing computational efficiency.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Graphical Approach for Multiple Comparison Procedures","text":"","code":"citation(\"graphicalMCP\") #>  #> To cite graphicalMCP in publications use: #>  #>   Xi, D.; Brockmann, E. (2023). graphicalMCP: Graph-based multiple #>   comparison procedures. version 0.1.0. Gilead Sciences, Inc. Foster #>   City, California. https://github.com/Gilead-BioStats/graphicalMCP #>  #>   Frank Bretz, Martin Posch, Ekkehard Glimm, Florian Klinglmueller, #>   Willi Maurer, Kornelius Rohmeyer (2011), Graphical approaches for #>   multiple comparison procedures using weighted Bonferroni, Simes or #>   parametric tests. Biometrical Journal 53 (6), pages 894--913, Wiley. #>  #> To see these entries in BibTeX format, use 'print(<citation>, #> bibtex=TRUE)', 'toBibtex(.)', or set #> 'options(citation.bibtex.max=999)'."},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Graphical Approach for Multiple Comparison Procedures","text":"Along authors contributors, thanks following people suggestions inspirations package: Frank Bretz, Willi Maurer, Ekkehard Glimm, Ron Yu owe debt gratitude authors gMCP pioneering work, without package nearly extensive .","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate adjusted p-values — adjust_p_bonferroni","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Calculate adjusted p-values","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"adjust_p_bonferroni(p, hypotheses)  adjust_p_parametric(p, hypotheses, test_corr = NULL)  adjust_p_simes(p, hypotheses)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"p numeric vector p-values hypotheses numeric vector hypothesis weights test_corr (Optional) numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"single adjusted p-value given group","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjust_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate adjusted p-values — adjust_p_bonferroni","text":"","code":"set.seed(22723)  w <- c(\"H1\" = .75, \"H2\" = .25, \"H3\" = 0) p <- c(\"H1\" = .019, \"H2\" = .025, \"H3\" = .05)  graphicalMCP:::adjust_p_bonferroni(p, w) #> [1] 0.02533333 graphicalMCP:::adjust_p_simes(p, w) #> [1] 0.025  corr1 <- diag(3) corr2 <- corr1 corr2[lower.tri(corr2)] <- corr2[upper.tri(corr2)] <- runif(3, -1, 1)  # No correlation graphicalMCP:::adjust_p_parametric(p, w, corr1) #> [1] 0.025213  # Uniform random pairwise correlations graphicalMCP:::adjust_p_parametric(p, w, corr2) #> [1] 0.02196006"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"weights created graph_generate_weights() work immediately Bonferroni testing, parametric Simes testing require additional calculations. adjust_weights_*() functions apply parametric Simes weight increases get updated weights testing. also subset weights columns appropriate groups","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"adjust_weights_parametric(   matrix_weights,   matrix_intersections,   test_corr,   alpha,   test_groups )  adjust_weights_simes(matrix_weights, p, groups)  c_value_function(x, hypotheses, test_corr, alpha)  solve_c_parametric(hypotheses, test_corr, alpha)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"matrix_weights second half columns graph_generate_weights() output, indicating weights intersection matrix_intersections first half columns graph_generate_weights() output, indicating hypotheses contained intersection test_corr numeric matrix correlations hypotheses' test statistics alpha numeric scalar specifying global significance level testing test_groups list numeric vectors specifying hypotheses test together p numeric vector p-values x root solve stats::uniroot() hypotheses numeric vector hypothesis weights","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Outputs: adjust_weights_*(), matrix shape weighting_strategy, weights adjusted according specified adjustment method c_value_function(), \\(c_{J_h}\\) value given group, according Formula 6 Xi et al. (2017).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/adjusted-weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate updated hypothesis weights for the closure of a graph — adjust_weights_parametric","text":"","code":"p <- 1:6 / 200  g <- bonferroni_holm(6) gw_large <- graph_generate_weights(g)  gw_0 <- gw_large[, 7:12] gw <- ifelse(gw_large[, 1:6], gw_0, NA)  graphicalMCP:::adjust_weights_parametric(   gw_0,   gw_large[, 1:6],   diag(6),   .05,   list(1:3) ) #>           H1        H2        H3 #> 1  0.1680752 0.1680752 0.1680752 #> 2  0.2020340 0.2020340 0.2020340 #> 3  0.2020340 0.2020340 0.2020340 #> 4  0.2531918 0.2531918 0.2531918 #> 5  0.2020340 0.2020340 0.2020340 #> 6  0.2531918 0.2531918 0.2531918 #> 7  0.2531918 0.2531918 0.2531918 #> 8  0.3390485 0.3390485 0.3390485 #> 9  0.2010082 0.2010082 0.0000000 #> 10 0.2515823 0.2515823 0.0000000 #> 11 0.2515823 0.2515823 0.0000000 #> 12 0.3361584 0.3361584 0.0000000 #> 13 0.2515823 0.2515823 0.0000000 #> 14 0.3361584 0.3361584 0.0000000 #> 15 0.3361584 0.3361584 0.0000000 #> 16 0.5064113 0.5064113 0.0000000 #> 17 0.2010082 0.0000000 0.2010082 #> 18 0.2515823 0.0000000 0.2515823 #> 19 0.2515823 0.0000000 0.2515823 #> 20 0.3361584 0.0000000 0.3361584 #> 21 0.2515823 0.0000000 0.2515823 #> 22 0.3361584 0.0000000 0.3361584 #> 23 0.3361584 0.0000000 0.3361584 #> 24 0.5064113 0.0000000 0.5064113 #> 25 0.2500000 0.0000000 0.0000000 #> 26 0.3333333 0.0000000 0.0000000 #> 27 0.3333333 0.0000000 0.0000000 #> 28 0.5000000 0.0000000 0.0000000 #> 29 0.3333333 0.0000000 0.0000000 #> 30 0.5000000 0.0000000 0.0000000 #> 31 0.5000000 0.0000000 0.0000000 #> 32 1.0000000 0.0000000 0.0000000 #> 33 0.0000000 0.2010082 0.2010082 #> 34 0.0000000 0.2515823 0.2515823 #> 35 0.0000000 0.2515823 0.2515823 #> 36 0.0000000 0.3361584 0.3361584 #> 37 0.0000000 0.2515823 0.2515823 #> 38 0.0000000 0.3361584 0.3361584 #> 39 0.0000000 0.3361584 0.3361584 #> 40 0.0000000 0.5064113 0.5064113 #> 41 0.0000000 0.2500000 0.0000000 #> 42 0.0000000 0.3333333 0.0000000 #> 43 0.0000000 0.3333333 0.0000000 #> 44 0.0000000 0.5000000 0.0000000 #> 45 0.0000000 0.3333333 0.0000000 #> 46 0.0000000 0.5000000 0.0000000 #> 47 0.0000000 0.5000000 0.0000000 #> 48 0.0000000 1.0000000 0.0000000 #> 49 0.0000000 0.0000000 0.2500000 #> 50 0.0000000 0.0000000 0.3333333 #> 51 0.0000000 0.0000000 0.3333333 #> 52 0.0000000 0.0000000 0.5000000 #> 53 0.0000000 0.0000000 0.3333333 #> 54 0.0000000 0.0000000 0.5000000 #> 55 0.0000000 0.0000000 0.5000000 #> 56 0.0000000 0.0000000 1.0000000 #> 57 0.0000000 0.0000000 0.0000000 #> 58 0.0000000 0.0000000 0.0000000 #> 59 0.0000000 0.0000000 0.0000000 #> 60 0.0000000 0.0000000 0.0000000 #> 61 0.0000000 0.0000000 0.0000000 #> 62 0.0000000 0.0000000 0.0000000 #> 63 0.0000000 0.0000000 0.0000000  graphicalMCP:::adjust_weights_simes(gw_0, p, list(4:6)) #>           H4        H5        H6 #> 1  0.1666667 0.3333333 0.5000000 #> 2  0.2000000 0.4000000 0.4000000 #> 3  0.2000000 0.2000000 0.4000000 #> 4  0.2500000 0.2500000 0.2500000 #> 5  0.0000000 0.2000000 0.4000000 #> 6  0.0000000 0.2500000 0.2500000 #> 7  0.0000000 0.0000000 0.2500000 #> 8  0.0000000 0.0000000 0.0000000 #> 9  0.2000000 0.4000000 0.6000000 #> 10 0.2500000 0.5000000 0.5000000 #> 11 0.2500000 0.2500000 0.5000000 #> 12 0.3333333 0.3333333 0.3333333 #> 13 0.0000000 0.2500000 0.5000000 #> 14 0.0000000 0.3333333 0.3333333 #> 15 0.0000000 0.0000000 0.3333333 #> 16 0.0000000 0.0000000 0.0000000 #> 17 0.2000000 0.4000000 0.6000000 #> 18 0.2500000 0.5000000 0.5000000 #> 19 0.2500000 0.2500000 0.5000000 #> 20 0.3333333 0.3333333 0.3333333 #> 21 0.0000000 0.2500000 0.5000000 #> 22 0.0000000 0.3333333 0.3333333 #> 23 0.0000000 0.0000000 0.3333333 #> 24 0.0000000 0.0000000 0.0000000 #> 25 0.2500000 0.5000000 0.7500000 #> 26 0.3333333 0.6666667 0.6666667 #> 27 0.3333333 0.3333333 0.6666667 #> 28 0.5000000 0.5000000 0.5000000 #> 29 0.0000000 0.3333333 0.6666667 #> 30 0.0000000 0.5000000 0.5000000 #> 31 0.0000000 0.0000000 0.5000000 #> 32 0.0000000 0.0000000 0.0000000 #> 33 0.2000000 0.4000000 0.6000000 #> 34 0.2500000 0.5000000 0.5000000 #> 35 0.2500000 0.2500000 0.5000000 #> 36 0.3333333 0.3333333 0.3333333 #> 37 0.0000000 0.2500000 0.5000000 #> 38 0.0000000 0.3333333 0.3333333 #> 39 0.0000000 0.0000000 0.3333333 #> 40 0.0000000 0.0000000 0.0000000 #> 41 0.2500000 0.5000000 0.7500000 #> 42 0.3333333 0.6666667 0.6666667 #> 43 0.3333333 0.3333333 0.6666667 #> 44 0.5000000 0.5000000 0.5000000 #> 45 0.0000000 0.3333333 0.6666667 #> 46 0.0000000 0.5000000 0.5000000 #> 47 0.0000000 0.0000000 0.5000000 #> 48 0.0000000 0.0000000 0.0000000 #> 49 0.2500000 0.5000000 0.7500000 #> 50 0.3333333 0.6666667 0.6666667 #> 51 0.3333333 0.3333333 0.6666667 #> 52 0.5000000 0.5000000 0.5000000 #> 53 0.0000000 0.3333333 0.6666667 #> 54 0.0000000 0.5000000 0.5000000 #> 55 0.0000000 0.0000000 0.5000000 #> 56 0.0000000 0.0000000 0.0000000 #> 57 0.3333333 0.6666667 1.0000000 #> 58 0.5000000 1.0000000 1.0000000 #> 59 0.5000000 0.5000000 1.0000000 #> 60 1.0000000 1.0000000 1.0000000 #> 61 0.0000000 0.5000000 1.0000000 #> 62 0.0000000 1.0000000 1.0000000 #> 63 0.0000000 0.0000000 1.0000000"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"Graphs handled different object graphicalMCP, gMCP, igraph. functions convert minimally different classes.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"","code":"as_initial_graph(graph)  # S3 method for graphMCP as_initial_graph(graph)  # S3 method for igraph as_initial_graph(graph)  as_graphMCP(graph)  # S3 method for initial_graph as_graphMCP(graph)  as_igraph(graph)  # S3 method for initial_graph as_igraph(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"graph initial_graph object graphicalMCP, graphMCP object gMCP, igraph object igraph, depending conversion type","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"as_graphMCP(), gMCP graph object, as_igraph(), igraph object, as_initial_graph(), graphicalMCP graph object","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"Note igraph gMCP can set various attributes vertices, edges, graph . conversion functions handle attributes related names weights. attributes dropped converting.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/as-graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between graphicalMCP, gMCP, and igraph graph classes — as_initial_graph","text":"","code":"g1 <- random_graph(5)  if (requireNamespace(\"gMCP\", quietly = TRUE)) {   g2 <- as_graphMCP(g1)    all.equal(g1, as_initial_graph(g2)) } #> [1] TRUE  if (requireNamespace(\"igraph\", quietly = TRUE)) {   g3 <- as_igraph(g1)    all.equal(g1, as_initial_graph(g3)) } #> igraph method #>  [1] \"names for target but not for current\"                              #>  [2] \"Attributes: < Length mismatch: comparison on first 1 components >\" #>  [3] \"Attributes: < Component “class”: 1 string mismatch >\"              #>  [4] \"Length mismatch: comparison on first 2 components\"                 #>  [5] \"Component 1: names for target but not for current\"                 #>  [6] \"Component 1: Numeric: lengths (5, 1) differ\"                       #>  [7] \"Component 2: Modes: numeric, logical\"                              #>  [8] \"Component 2: Lengths: 25, 1\"                                       #>  [9] \"Component 2: Attributes: < Modes: list, NULL >\"                    #> [10] \"Component 2: Attributes: < Lengths: 2, 0 >\"                        #> [11] \"Component 2: Attributes: < names for target but not for current >\" #> [12] \"Component 2: Attributes: < current is not list-like >\"             #> [13] \"Component 2: target is matrix, current is logical\""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Test hypotheses with the adjusted significance method — test_values_bonferroni","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Test hypotheses adjusted significance method","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"test_values_bonferroni(p, hypotheses, alpha, intersection = NA)  test_values_parametric(p, hypotheses, alpha, intersection = NA, test_corr)  test_values_simes(p, hypotheses, alpha, intersection = NA)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"p numeric vector p-values hypotheses numeric vector hypothesis hypotheses alpha numeric scalar specifying global significance level testing intersection numeric scalar used track intersection test values test_corr numeric matrix correlations hypotheses' test statistics","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"data frame columns specifying values used calculate hypothesis test","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/calc-test_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test hypotheses with the adjusted significance method — test_values_bonferroni","text":"","code":"w <- c(H1 = .5, H2 = .5, H3 = 0, H4 = 0)  p <- c(.024, .01, .026, .027)  graphicalMCP:::test_values_bonferroni(p, w, .05) #>    Intersection Hypothesis       Test     p <= c_value * Weight * Alpha #> H1           NA         H1 bonferroni 0.024 <=              0.5 *  0.05 #> H2           NA         H2 bonferroni 0.010 <=              0.5 *  0.05 #> H3           NA         H3 bonferroni 0.026 <=              0.0 *  0.05 #> H4           NA         H4 bonferroni 0.027 <=              0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_parametric(p, w, .05, test_corr = diag(4)) #>    Intersection Hypothesis       Test     p <=  c_value * Weight * Alpha #> H1           NA         H1 parametric 0.024 <= 1.012823 *    0.5 *  0.05 #> H2           NA         H2 parametric 0.010 <= 1.012823 *    0.5 *  0.05 #> H3           NA         H3 parametric 0.026 <= 1.012823 *    0.0 *  0.05 #> H4           NA         H4 parametric 0.027 <= 1.012823 *    0.0 *  0.05 #>    Inequality_holds #> H1             TRUE #> H2             TRUE #> H3            FALSE #> H4            FALSE graphicalMCP:::test_values_simes(p, w, .05) #>   Intersection Hypothesis  Test     p <= c_value * Weight * Alpha #> 1           NA         H1 simes 0.024 <=              1.0 *  0.05 #> 2           NA         H2 simes 0.010 <=              0.5 *  0.05 #> 3           NA         H3 simes 0.026 <=              1.0 *  0.05 #> 4           NA         H4 simes 0.027 <=              1.0 *  0.05 #>   Inequality_holds #> 1             TRUE #> 2             TRUE #> 3             TRUE #> 4             TRUE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":null,"dir":"Reference","previous_headings":"","what":"Example graphs from a selection of papers — bonferroni_holm","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Example graphs selection papers","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(num_hyps, hyp_names = NULL)  bonferroni_holm(num_hyps, hyp_names = NULL)  huque_alosh_bhore_2011(hyp_names = NULL)  wiens_dmitrienko_2005(hyp_names = NULL)  fixed_sequence(num_hyps = 3, hyp_names = NULL)  fallback(hypotheses = c(1, 0, 0), hyp_names = NULL)  simple_successive_1(hyp_names = NULL)  simple_successive_2(hyp_names = NULL)  random_graph(num_hyps, hyp_names = NULL)  complex_example_1(hyp_names = NULL)  complex_example_2(hyp_names = NULL)  complex_example_2(hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example graphs from a selection of papers — bonferroni_holm","text":"num_hyps Number vertices graph hyp_names (Optional) character vector hypothesis names. names specified, hypotheses named sequentially H1, H2, ... hypotheses Hypothesis weights fallback procedure","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example graphs from a selection of papers — bonferroni_holm","text":"S3 object returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example graphs from a selection of papers — bonferroni_holm","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/example-graphs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example graphs from a selection of papers — bonferroni_holm","text":"","code":"bonferroni_holm(3, hyp_names = paste(\"dose\", letters[1:3])) #> Initial graph #>  #> --- Hypothesis weights --- #> dose a: 0.3333 #> dose b: 0.3333 #> dose c: 0.3333 #>  #> --- Transition weights --- #>         dose a dose b dose c #>  dose a    0.0    0.5    0.5 #>  dose b    0.5    0.0    0.5 #>  dose c    0.5    0.5    0.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain hypothesis rejection probabilities — graph_calculate_power","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"often difficult tell likely given hypothesis rejected. power simulations useful. set distribution parameters, many p-values generated, graph tested one. testing strategy can used. probabilities calculated hypothesis rejected, well additional probabilities expected rejections probability rejecting hypothesis","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"graph_calculate_power(   graph,   alpha = 0.025,   power_marginal = rep(alpha, length(graph$hypotheses)),   test_groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   test_corr = rep(list(NA), length(test_types)),   sim_n = 100,   sim_corr = diag(length(graph$hypotheses)),   sim_success = NULL,   verbose = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"graph initial graph returned graph_create() alpha numeric scalar specifying global significance level testing power_marginal numeric vector mean values use simulating p-values. Exactly one mean per hypothesis needed, p-values sampled multivariate normal distribution. See Details test_groups list numeric vectors specifying hypotheses test together test_types character vector tests apply given groups test_corr Optional test_types parametric. numeric matrix correlations hypotheses' test statistics sim_n integer scalar specifying many simulations run sim_corr numeric matrix correlations hypotheses used sample multivariate normal distribution generate p-values sim_success list user-defined functions apply power results. Functions must take one simulation's logical vector results input, return length-one logical vector. instance, \"success\" means rejecting hypotheses 1 2, use sim_success = list(\"1 2\" = function(x) x[1] && x[2]). list named, function body used name. Lambda functions also work starting R 4.1, e.g. sim_success = list(\\(x) x[3] || x[4]) verbose logical scalar specifying whether full matrix simulations test results included output ","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"list five elements power_local - rejection proportion hypothesis individually power_expected - average number hypotheses rejected single simulation power_at_least_1 - proportion simulations reject hypothesis power_all - proportion simulations reject hypotheses power_success - proportion simulations reject hypotheses specified sim_success","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"parameters normal distribution set power_marginal (means) sim_corr (correlation test statistics). mean hypothesis set marginal power $$d_i=P_{\\xi_i}(p_i\\leq\\alpha)$$ \\(\\xi_i\\) non-centrality parameter. correlation test statistics induced study design.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"success","dir":"Reference","previous_headings":"","what":"Success","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Success mean something different trial, lot flexibility sim_success parameter. However, flexibility means little validation inputs. user make sure function(s) passed mean think. implementation perspective, function applied row-wise matrix test results simulation, resulting sim_n length vector. mean vector returned \"Probability success\"","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_calculate_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain hypothesis rejection probabilities — graph_calculate_power","text":"","code":"par_gate <- simple_successive_1()  # The default is to test all hypotheses with: Bonferroni testing at alpha # level .025, 0 mean under the alternative, and 0 correlation between # hypotheses under the alternative # The default of 100 simulations will usually need to be increased graph_calculate_power(par_gate, sim_n = 1e5) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01201 0.01166 0.00016 0.00019 #>  #>   Expected no. of rejections: 0.02402 #>    Power to reject 1 or more: 0.02349 #>          Power to reject all: 0 #>   # But any test group/type combination that works for [graph_test_closure()] # can be used graph_calculate_power(   par_gate,   alpha = .025,   test_groups = list(1:2, 3:4),   test_types = c(\"s\", \"p\"),   test_corr = list(NA, diag(2)),   sim_n = 1e5,   sim_success = list(     function(.) .[1] || .[2],     function(.) .[1] && .[2]   ) ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>   Parametric testing correlation:    H3 H4 #>                                   H3  1  0 #>                                   H4  0  1 #>  #>   Test types #>        simes: (H1, H2) #>   parametric: (H3, H4) #>  #> Simulation parameters ($inputs) ------------------------------------------------ #>   Testing 100,000 simulations with multivariate normal params: #>  #>                      H1    H2    H3    H4 #>   Marginal power: 0.025 0.025 0.025 0.025 #>  #>   Correlation:    H1 H2 H3 H4 #>                H1  1  0  0  0 #>                H2  0  1  0  0 #>                H3  0  0  1  0 #>                H4  0  0  0  1 #>  #> Power calculation ($power) ----------------------------------------------------- #>                                    H1      H2      H3      H4 #>                  Local power: 0.01203 0.01215 0.00018 0.00021 #>  #>   Expected no. of rejections: 0.02457 #>    Power to reject 1 or more: 0.02403 #>          Power to reject all: 0 #>  #>   Success measure   Power #>      .[1] || .[2] 0.02403 #>      .[1] && .[2] 0.00015 #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a graph representing a multiple comparison procedure — graph_create","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"multiple comparison procedure graph can represented 1) vector initial hypothesis weights, 2) matrix initial transition weights. function creates initial graph object using vector matrix. also validates inputs make sure combine form valid graph.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"graph_create(hypotheses, transitions, hyp_names = NULL)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"hypotheses numeric vector hypothesis weights graphical multiple comparison procedure. Must vector values 0 & 1 (inclusive). length match row column lengths transitions. sum hypothesis weights exceed 1 transitions numeric matrix transition weights hypotheses graphical multiple comparison procedure. Must square matrix values 0 & 1 (inclusive). row column lengths match length hypotheses. row (Transition weights leaving hypothesis) can sum 1. diagonal (Transition weights hypothesis ) must 0s hyp_names (Optional) character vector hypothesis names. provided, names hypotheses transitions used. names specified, hypotheses named sequentially H1, H2, ...","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"S3 object class initial_graph. underlying structure list elements hypotheses transitions","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"validations performed : Weights numeric Length hypotheses dimensions transitions match Explicit hyp_names override names hypotheses transitions Hypothesis weights must non-negative sum 1 Transition weights matrix: Diagonal must 0 Rows must sum 1 Values must non-negative","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_create.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a graph representing a multiple comparison procedure — graph_create","text":"","code":"# A graphical multiple comparison procedure with two primary hypotheses (H1 # and H2) and two secondary hypotheses (H3 and H4) # See Figure 1 in Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, # W., & Rohmeyer, K. (2011). Graphical approaches for multiple comparison # procedures using weighted Bonferroni, Simes, or parametric tests. # Biometrical Journal, 53(6), 894-913. hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) hyp_names <- c(\"H11\", \"H12\", \"H21\", \"H22\") g <- graph_create(hypotheses, transitions, hyp_names) g #> Initial graph #>  #> --- Hypothesis weights --- #> H11: 0.5 #> H12: 0.5 #> H21: 0.0 #> H22: 0.0 #>  #> --- Transition weights --- #>      H11 H12 H21 H22 #>  H11   0   0   1   0 #>  H12   0   0   0   1 #>  H21   0   1   0   0 #>  H22   1   0   0   0  # Explicit names override names in `hypotheses` (with a warning) hypotheses <- c(h1 = 0.5, h2 = 0.5, h3 = 0, h4 = 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> h1: 0.5 #> h2: 0.5 #> h3: 0.0 #> h4: 0.0 #>  #> --- Transition weights --- #>     h1 h2 h3 h4 #>  h1  0  0  1  0 #>  h2  0  0  0  1 #>  h3  0  1  0  0 #>  h4  1  0  0  0  # Use names in `transitions` hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   H1 = c(0, 0, 1, 0),   H2 = c(0, 0, 0, 1),   H3 = c(0, 1, 0, 0),   H4 = c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0  # When names are not specified, hypotheses are numbered sequentially as # H1, H2, ... hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions) g #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weights for the closure of a graph — graph_generate_weights","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"closure graph set sub-graphs, intersections hypotheses, graph. Weights sub-graph calculated using weighting strategy defined Bretz et al (2011).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"graph_generate_weights(graph)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"graph initial graph returned graph_create()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"numeric matrix intersection hypothesis weights. row corresponds single intersection hypothesis. first half columns indicate hypotheses included given intersection hypothesis, second half columns weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"performance","dir":"Reference","previous_headings":"","what":"Performance","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Much thought given performance code, memory time usage can grow quickly graph size grows. systems used testing, size 10 graph median run time 20-60 ms. Run time increases rate O(2 ^ n), e.g. size 5 graph takes approximately twice long run size 4 graph. See vignette(\"generate-closure\") information using closure, including performance metrics.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_generate_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate weights for the closure of a graph — graph_generate_weights","text":"","code":"par_gate <- graph_create(   hypotheses = c(.5, .5, 0, 0),   transitions = rbind(     c(0, 0, 1, 0),     c(0, 0, 0, 1),     c(0, 1, 0, 0),     c(1, 0, 0, 0)   ) )  graph_generate_weights(par_gate) #>    H1 H2 H3 H4  H1  H2  H3  H4 #> 1   1  1  1  1 0.5 0.5 0.0 0.0 #> 2   1  1  1  0 0.5 0.5 0.0 0.0 #> 3   1  1  0  1 0.5 0.5 0.0 0.0 #> 4   1  1  0  0 0.5 0.5 0.0 0.0 #> 5   1  0  1  1 0.5 0.0 0.0 0.5 #> 6   1  0  1  0 1.0 0.0 0.0 0.0 #> 7   1  0  0  1 0.5 0.0 0.0 0.5 #> 8   1  0  0  0 1.0 0.0 0.0 0.0 #> 9   0  1  1  1 0.0 0.5 0.5 0.0 #> 10  0  1  1  0 0.0 0.5 0.5 0.0 #> 11  0  1  0  1 0.0 1.0 0.0 0.0 #> 12  0  1  0  0 0.0 1.0 0.0 0.0 #> 13  0  0  1  1 0.0 0.0 0.5 0.5 #> 14  0  0  1  0 0.0 0.0 1.0 0.0 #> 15  0  0  0  1 0.0 0.0 0.0 1.0"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":null,"dir":"Reference","previous_headings":"","what":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"using graph_test_shortcut(), may multiple hypotheses can rejected step. specific hypothesis chosen decided based minimum adjusted p-value, final results change rejection order changes. function shows every order deletes hypotheses, hypothesis still valid rejection step deleted.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"","code":"graph_rejection_orderings(shortcut_test_result)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"shortcut_test_result graph_report object returned graph_test_shortcut()","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"modified graph_report object containing valid orderings deleting significant hypotheses","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_rejection_orderings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find alternate rejection orderings for shortcut testing — graph_rejection_orderings","text":"","code":"graph <- simple_successive_2()  short_res <- graph_test_shortcut(graph, c(.018, .01, .03, .004))  # Reject H1, H2, and H4 short_res$outputs$rejected #>    H1    H2    H3    H4  #>  TRUE  TRUE FALSE  TRUE   # But these cannot be rejected in any order - For instance, H4 has 0 weight # in the initial graph and cannot be rejected first graph_rejection_orderings(short_res) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.018 0.010 0.030 0.004 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1         0.02   TRUE #>           H2         0.02   TRUE #>           H3         0.03  FALSE #>           H4         0.02   TRUE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA #>  #> Alternate rejection orderings ($valid_rejection_orderings) --------------------- #> H2 H1 H4  #>  2  1  4  #>  #> H2 H4 H1  #>  2  4  1  #>   # Finally, intermediate graphs can be obtained by putting one of the # orderings outputs into `graph_update()` graph_update(graph, delete = c(2, 1, 4)) #> Initial and final graphs ------------------------------------------------------- #>  #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>      H1  H2  H3  H4 #>  H1 0.0 0.5 0.5 0.0 #>  H2 0.5 0.0 0.0 0.5 #>  H3 0.0 1.0 0.0 0.0 #>  H4 1.0 0.0 0.0 0.0 #>  #> Updated graph after deleting hypotheses 2, 1, 4 #>  #> --- Hypothesis weights --- #> H1: NA #> H2: NA #> H3:  1 #> H4: NA #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1 NA NA NA NA #>  H2 NA NA NA NA #>  H3 NA NA  0 NA #>  H4 NA NA NA NA #>  #> Deletion sequence ($intermediate_graphs) --------------------------------------- #>  #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>       H1  H2  H3  H4 #>   H1 0.0 0.5 0.5 0.0 #>   H2 0.5 0.0 0.0 0.5 #>   H3 0.0 1.0 0.0 0.0 #>   H4 1.0 0.0 0.0 0.0 #>  #>     Step 1: Updated graph after removing hypothesis 2 #>  #>     --- Hypothesis weights --- #>     H1: 0.75 #>     H2:   NA #>     H3: 0.00 #>     H4: 0.25 #>  #>     --- Transition weights --- #>              H1       H2       H3       H4 #>     H1 0.000000       NA 0.666667 0.333333 #>     H2       NA       NA       NA       NA #>     H3 0.500000       NA 0.000000 0.500000 #>     H4 1.000000       NA 0.000000 0.000000 #>  #>       Step 2: Updated graph after removing hypotheses 2, 1 #>  #>       --- Hypothesis weights --- #>       H1:  NA #>       H2:  NA #>       H3: 0.5 #>       H4: 0.5 #>  #>       --- Transition weights --- #>          H1 H2 H3 H4 #>       H1 NA NA NA NA #>       H2 NA NA NA NA #>       H3 NA NA  0  1 #>       H4 NA NA  1  0 #>  #>         Step 3: Updated graph after removing hypotheses 2, 1, 4 #>  #>         --- Hypothesis weights --- #>         H1: NA #>         H2: NA #>         H3:  1 #>         H4: NA #>  #>         --- Transition weights --- #>            H1 H2 H3 H4 #>         H1 NA NA NA NA #>         H2 NA NA NA NA #>         H3 NA NA  0 NA #>         H4 NA NA NA NA #>  #>   Final updated graph after removing deleted hypotheses #>  #>   --- Hypothesis weights --- #>   H1: NA #>   H2: NA #>   H3:  1 #>   H4: NA #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0 NA #>   H4 NA NA NA NA #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete hypotheses from a graph — graph_update","title":"Delete hypotheses from a graph — graph_update","text":"always obvious graph's weights look like deleting one hypotheses. graph_generate_weights() calculates sub-graphs' hypothesis weights, graph_update() gives detailed view single set deletions, including transition weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete hypotheses from a graph — graph_update","text":"","code":"graph_update(graph, delete)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete hypotheses from a graph — graph_update","text":"graph initial graph returned graph_create() delete logical integer vector, denoting hypotheses keep/delete. logical vector must match size graph, one entry per hypothesis, results \"unordered mode,\" selected hypotheses deleted sequential order. integer vector can length, must contain valid hypothesis numbers (greater 0, less equal size graph). trigger \"ordered mode,\" selected hypotheses deleted order appear delete","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete hypotheses from a graph — graph_update","text":"object class updated_graph 4 elements initial graph object updated graph object specified hypotheses deleted numeric vector indicating hypotheses deleted using ordered mode, list intermediate graphs deletion step","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete hypotheses from a graph — graph_update","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graph_update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete hypotheses from a graph — graph_update","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) ) g <- graph_create(hypotheses, transitions)  # Delete the second and third hypotheses in any order graph_update(g, c(FALSE, TRUE, TRUE, FALSE)) #> Initial and final graphs ------------------------------------------------------- #>  #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0 #>  #> Updated graph after deleting hypotheses 2, 3 #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2:  NA #> H3:  NA #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0 NA NA  1 #>  H2 NA NA NA NA #>  H3 NA NA NA NA #>  H4  1 NA NA  0  # Equivalent in ordered mode graph_update(g, 2:3) #> Initial and final graphs ------------------------------------------------------- #>  #> Initial graph #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2: 0.5 #> H3: 0.0 #> H4: 0.0 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0  0  1  0 #>  H2  0  0  0  1 #>  H3  0  1  0  0 #>  H4  1  0  0  0 #>  #> Updated graph after deleting hypotheses 2, 3 #>  #> --- Hypothesis weights --- #> H1: 0.5 #> H2:  NA #> H3:  NA #> H4: 0.5 #>  #> --- Transition weights --- #>     H1 H2 H3 H4 #>  H1  0 NA NA  1 #>  H2 NA NA NA NA #>  H3 NA NA NA NA #>  H4  1 NA NA  0 #>  #> Deletion sequence ($intermediate_graphs) --------------------------------------- #>  #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>     Step 1: Updated graph after removing hypothesis 2 #>  #>     --- Hypothesis weights --- #>     H1: 0.5 #>     H2:  NA #>     H3: 0.0 #>     H4: 0.5 #>  #>     --- Transition weights --- #>        H1 H2 H3 H4 #>     H1  0 NA  1  0 #>     H2 NA NA NA NA #>     H3  0 NA  0  1 #>     H4  1 NA  0  0 #>  #>       Step 2: Updated graph after removing hypotheses 2, 3 #>  #>       --- Hypothesis weights --- #>       H1: 0.5 #>       H2:  NA #>       H3:  NA #>       H4: 0.5 #>  #>       --- Transition weights --- #>          H1 H2 H3 H4 #>       H1  0 NA NA  1 #>       H2 NA NA NA NA #>       H3 NA NA NA NA #>       H4  1 NA NA  0 #>  #>   Final updated graph after removing deleted hypotheses #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2:  NA #>   H3:  NA #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0 NA NA  1 #>   H2 NA NA NA NA #>   H3 NA NA NA NA #>   H4  1 NA NA  0 #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"multiple comparison procedure (multiple test procedure) statistical analysis method determining efficacy multiple drugs, multiple doses drug, single clinical trial. (Bretz et al., 2011) laid graph-based approach multiple comparison procedures, weights vertices edges graph determined independently particular statistical test used assess results. low-dependency implementation methods described subsequent papers.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/graphicalMCP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"graphicalMCP: Graphical Approach for Multiple Comparison Procedures — graphicalMCP-package","text":"Maintainer: Dong Xi dong.xi@gilead.com Authors: Ethan Brockmann ethan.brockmann@atorusresearch.com contributors: Gilead Biostatistics [copyright holder, funder] Atorus Research LLC [copyright holder]","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 plot method for class initial_graph — plot.initial_graph","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"plot initial_graph translates hypotheses vertices transitions edges create network plot. Vertices labeled hypothesis names weights, edges labeled weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"","code":"# S3 method for initial_graph plot(   x,   ...,   layout = \"grid\",   nrow = NULL,   ncol = NULL,   edge_curves = NULL,   precision = 4,   eps = NULL,   background_color = \"white\",   margins = c(0, 0, 0, 0) )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"x initial graph returned graph_create() ... arguments passed igraph::plot.igraph() layout igraph layout specification (See ?igraph.plotting), \"grid\", lays hypotheses left--right top--bottom. nrow ncol control grid shape nrow integer scalar specifying number rows vertex grid. row column counts specified, vertices laid close square possible. ncol integer scalar specifying number columns vertex grid. row column counts specified, vertices laid close square possible. edge_curves named numeric vector specifying curvature  specific edges. Edge pairs (two vertices share edge possible direction) detected automatically get 0.25 curvature. Adjust edges adding entry name \"vertex1|vertex2, adjust default edge pairs curvature adding entry name \"pairs\" - edge_curves = c(\"pairs\" = .5, \"H1|H3\" = .25, \"H3|H4\" = .75) precision integer scalar specifying many significant figures displayed weights eps numeric scalar. Edge weights 0 eps displayed \\(\\epsilon\\), edge weights 1 - eps 1 displayed \\(1 - \\epsilon\\) background_color character scalar specifying background color whole plotting area. Passed directly graphics::par() (bg) margins length 4 numeric vector specifying margins plot. Defaults 0, since igraph plots tend large margins. passed directly graphics::par() (mar)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"NULL, plotting graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"values igraph::plot.igraph() get defaults changed graphicalMCP. values can still changed passing arguments plot.initial_graph(). new defaults: vertex.color = \"#e8c2ff\", vertex.label.color = \"black\", vertex.size = 20, edge.arrow.size = 1, edge.arrow.width = 1, asp = 0 Neither graphicalMCP igraph anything overlapping edge labels. run problem, vertices practically moved enough avoid collisions edge labels, using edge curves can help. igraph puts edge labels closer tail edge edge straight, closer head edge curved. setting edge's curve small value, effectively straight edge can shifted new position.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.initial_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 plot method for class initial_graph — plot.initial_graph","text":"","code":"plot(simple_successive_2(), layout = \"grid\")   hypotheses <- c(0.5, 0.5, 0, 0, 0, 0)  epsilon <- 1e-5 transitions <- rbind(   c(0,       0.5,     0.25,        0,    0.25, 0),   c(0.5,     0,       0,           0.25, 0,    0.25),   c(0,       0,       0,           0,    1,    0),   c(epsilon, 0,       0,           0,    0,    1 - epsilon),   c(0,       epsilon, 1 - epsilon, 0,    0,    0),   c(0,       0,       0,           1,    0,    0) )  g <- graph_create(hypotheses, transitions)  plot_layout <- rbind(   c(.15, .5),   c(.65, .5),   c(  0,  0),   c( .5,  0),   c( .3,  0),   c( .8,  0) )  plot(g, layout = plot_layout, eps = epsilon, edge_curves = c(pairs = .5))"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 plot method for the class updated_graph — plot.updated_graph","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"Plotting updated graph light wrapper around plot.initial_graph(), changing default vertex color use gray deleted hypotheses.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"","code":"# S3 method for updated_graph plot(x, ...)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"x updated_graph object returned graph_update() ... Arguments passed plot.initial_graph layout igraph layout specification (See ?igraph.plotting), \"grid\", lays hypotheses left--right top--bottom. nrow ncol control grid shape nrow integer scalar specifying number rows vertex grid. row column counts specified, vertices laid close square possible. ncol integer scalar specifying number columns vertex grid. row column counts specified, vertices laid close square possible. edge_curves named numeric vector specifying curvature  specific edges. Edge pairs (two vertices share edge possible direction) detected automatically get 0.25 curvature. Adjust edges adding entry name \"vertex1|vertex2, adjust default edge pairs curvature adding entry name \"pairs\" - edge_curves = c(\"pairs\" = .5, \"H1|H3\" = .25, \"H3|H4\" = .75) precision integer scalar specifying many significant figures displayed weights eps numeric scalar. Edge weights 0 eps displayed \\(\\epsilon\\), edge weights 1 - eps 1 displayed \\(1 - \\epsilon\\) background_color character scalar specifying background color whole plotting area. Passed directly graphics::par() (bg) margins length 4 numeric vector specifying margins plot. Defaults 0, since igraph plots tend large margins. passed directly graphics::par() (mar)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"NULL, plotting graph","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/plot.updated_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 plot method for the class updated_graph — plot.updated_graph","text":"","code":"plot(   graph_update(     simple_successive_2(),     c(TRUE, FALSE, TRUE, TRUE)   ),   layout = \"grid\" )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class graph_report — print.graph_report","title":"S3 print method for class graph_report — print.graph_report","text":"graph report displays initial graph tested, p-values & significance level used tests, hypotheses can rejected, Optional detailed test results, vary depending whether shortcut closed testing used","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class graph_report — print.graph_report","text":"","code":"# S3 method for graph_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.graph_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class graph_report — print.graph_report","text":"x object class graph_report print ... values passed methods (currently unused) precision integer scalar indicating number significant figures include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose test values output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for the class initial_graph — print.initial_graph","title":"S3 print method for the class initial_graph — print.initial_graph","text":"printed initial_graph displays header stating object , hypothesis weights, transition weights.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for the class initial_graph — print.initial_graph","text":"","code":"# S3 method for initial_graph print(x, ..., precision = 4, indent = 0)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.initial_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for the class initial_graph — print.initial_graph","text":"x object class initial_graph print ... values passed methods (currently unused) precision integer scalar indicating number significant figures include numeric values indent integer scalar indicating many spaces indent results","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for class power_report — print.power_report","title":"S3 print method for class power_report — print.power_report","text":"power report displays: initial graph tested, Testing simulation options, Final power calculations, (Optionally) Detailed p-values test results simulation","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for class power_report — print.power_report","text":"","code":"# S3 method for power_report print(x, ..., precision = 4, indent = 2, rows = 10)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.power_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for class power_report — print.power_report","text":"x object class power_report print ... values passed methods (currently unused) precision integer scalar indicating number significant figures include numeric values indent integer scalar indicating many spaces indent results rows integer scalar indicating many rows verbose output print","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 print method for the class updated_graph — print.updated_graph","title":"S3 print method for the class updated_graph — print.updated_graph","text":"printed updated_graph displays initial graph, updated graph, sequence graphs two (available).","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 print method for the class updated_graph — print.updated_graph","text":"","code":"# S3 method for updated_graph print(x, ..., precision = 6, indent = 2)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/print.updated_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 print method for the class updated_graph — print.updated_graph","text":"x object class updated_graph print ... values passed methods (currently unused) precision integer scalar indicating number significant figures include numeric values indent integer scalar indicating many spaces indent results","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"insight nice reporting, prefer graph_test_closure() graph_test_shortcut() options. reasonably fast interactive use. However order minimize power run time, efficient testing functions available. power simulation can segmented certain parts, like generating weights calculating adjusted weights, can done single time. closure testing function stripped just vectorized lines efficiency. separate optimized function available testing graph Bonferroni sequential shortcut.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"graph_test_closure_fast(p, alpha, adjusted_weights, matrix_intersections)  graph_test_shortcut_fast(p, alpha, adjusted_weights)"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"p numeric vector p-values alpha numeric scalar specifying global significance level testing adjusted_weights weights (second half columns) graph_generate_weights() output, adjusted appropriate testing algorithm (Bonferroni, Simes, parametric) graph initial graph returned graph_create() intersections first half columns graph_generate_weights() output, indicating hypotheses contained intersection","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"logical integer vector results indicating whether hypothesis can accepted rejected globally.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":[]},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing-fast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate hypothesis rejection results efficiently — graph_test_closure_fast","text":"","code":"par_gate <- simple_successive_1() num_hyps <- length(par_gate$hypotheses)  p <- c(.001, .02, .002, .03)  weighting_strategy <- graph_generate_weights(par_gate) intersections <- weighting_strategy[, seq_len(num_hyps), drop = FALSE] adjusted_weights <-   weighting_strategy[, seq_len(num_hyps) + num_hyps, drop = FALSE]  graphicalMCP:::graph_test_closure_fast(   p,   .025,   adjusted_weights,   intersections ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE  graphicalMCP:::graph_test_shortcut_fast(   p,   .025,   adjusted_weights ) #>    H1    H2    H3    H4  #>  TRUE  TRUE  TRUE FALSE"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Report details of hypothesis rejections — graph_test_closure","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph testing functions apply specified test strategy graph set p-values, giving rich information hypotheses significant, . Results include hypothesis rejection decisions, also test values led final result. functions include options reporting details using adjusted p-value method adjusted significance method.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"graph_test_closure(   graph,   p,   alpha = 0.025,   test_groups = list(seq_along(graph$hypotheses)),   test_types = c(\"bonferroni\"),   test_corr = rep(list(NA), length(test_types)),   verbose = FALSE,   test_values = FALSE )  graph_test_shortcut(   graph,   p,   alpha = 0.025,   verbose = FALSE,   test_values = FALSE )"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph initial graph returned graph_create() p numeric vector p-values alpha numeric scalar specifying significance level testing test_groups list numeric vectors specifying hypotheses test together. Part 1 test specification. test_types character vector tests apply test groups. Part 2 test specification. test_corr (Optional) list numeric matrices. Part 3 test specification. test group must exactly one entry list: Bonferroni Simes test groups entries NULL, parametric test groups numeric matrices specifying (known estimated) pairwise correlations test statistics hypotheses group. verbose logical scalar specifying whether details adjusted p-value calculations included results test_values logical scalar specifying whether details adjusted significance calculations included results","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report details of hypothesis rejections — graph_test_closure","text":"graph_report object, list 4 elements: inputs, outputs, details, test_values Inputs - list input parameters used run test Outputs - list global test results Details - list detailed adjusted p-value calculations (graph deletion sequence shortcut testing) Test values - list hypothesis-level test details intersection using adjusted significance method (Details step taken shortcut testing)","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report details of hypothesis rejections — graph_test_closure","text":"test specification (test_groups, test_types, test_corr) can specified either named unnamed. unnamed, assumed 3 ordered way, .e. nth elements test_types test_corr apply nth group test_groups. Naming element consistent names across three vectors mean retain order, also may robust way keep track testing details.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Report details of hypothesis rejections — graph_test_closure","text":"Bretz, F., Maurer, W., Brannath, W., Posch, M. (2009). graphical approach sequentially rejective multiple test procedures. Statistics Medicine, 28(4), 586–604. https://doi.org/10.1002/sim.3495 Bretz, F., Maurer, W., Hommel, G. (2011). Test power considerations multiple endpoint analyses using sequentially rejective graphical procedures. Statistics Medicine, 30(13), 1489–1501. https://doi.org/10.1002/sim.3988 Bretz, F., Posch, M., Glimm, E., Klinglmueller, F., Maurer, W., Rohmeyer, K. (2011). Graphical approaches multiple comparison procedures using weighted Bonferroni, Simes, parametric tests. Biometrical Journal, 53(6), 894–913. https://doi.org/10.1002/bimj.201000239 Lu, K. (2016). Graphical approaches using Bonferroni mixture weighted Simes tests. Statistics Medicine, 35(22), 4041–4055. https://doi.org/10.1002/sim.6985 Xi, D., Glimm, E., Maurer, W., Bretz, F. (2017). unified framework weighted parametric multiple test procedures. Biometrical Journal, 59(5), 918–931. https://doi.org/10.1002/bimj.201600233 Xi, D., Bretz, F. (2019). Symmetric graphs equally weighted tests, application Hochberg procedure. Statistics Medicine, 38(27), 5268–5282. https://doi.org/10.1002/sim.8375 Rohmeyer K, Klinglmueller F (2020). gMCP: Graph Based Multiple Test Procedures. R package version 0.8-15, https://cran.r-project.org/package=gMCP.","code":""},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/reference/testing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report details of hypothesis rejections — graph_test_closure","text":"","code":"hypotheses <- c(0.5, 0.5, 0, 0) transitions <- rbind(   c(0, 0, 1, 0),   c(0, 0, 0, 1),   c(0, 1, 0, 0),   c(1, 0, 0, 0) )  g <- graph_create(hypotheses, transitions) p <- c(.01, .005, .015, .022)  corr_list <- list(NA, matrix(c(1, .5, .5, 1), nrow = 2, byrow = TRUE))  # The default is all Bonferroni with alpha = .025 graph_test_closure(g, p) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Test types #>   bonferroni: (H1, H2, H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1         0.02   TRUE #>           H2         0.01   TRUE #>           H3         0.03  FALSE #>           H4         0.03  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>   # But tests can be specified at the hypothesis-level graph_test_closure(   graph = g,   p = p,   alpha = .025,   test_groups = list(1:2, 3:4),   test_types = c(\"bonferroni\", \"parametric\"),   test_corr = corr_list ) #>  #> Test parameters ($inputs) ------------------------------------------------------ #>   Initial graph #>  #>   --- Hypothesis weights --- #>   H1: 0.5 #>   H2: 0.5 #>   H3: 0.0 #>   H4: 0.0 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1  0  0  1  0 #>   H2  0  0  0  1 #>   H3  0  1  0  0 #>   H4  1  0  0  0 #>  #>   Alpha = 0.025 #>  #>                           H1    H2    H3    H4 #>   Unadjusted p-values: 0.010 0.005 0.015 0.022 #>  #>   Correlation matrix:     H3  H4 #>                       H3 1.0 0.5 #>                       H4 0.5 1.0 #>  #>   Test types #>   bonferroni: (H1, H2) #>   parametric: (H3, H4) #>  #> Test summary ($outputs) -------------------------------------------------------- #>   Hypothesis Adj. P-value Reject #>           H1      0.02000   TRUE #>           H2      0.01000   TRUE #>           H3      0.02773  FALSE #>           H4      0.02773  FALSE #>  #>   Final updated graph after removing rejected hypotheses #>  #>   --- Hypothesis weights --- #>   H1:  NA #>   H2:  NA #>   H3: 0.5 #>   H4: 0.5 #>  #>   --- Transition weights --- #>      H1 H2 H3 H4 #>   H1 NA NA NA NA #>   H2 NA NA NA NA #>   H3 NA NA  0  1 #>   H4 NA NA  1  0 #>"},{"path":"https://urban-sniffle-p11zlpj.pages.github.io/news/index.html","id":"graphicalmcp-010","dir":"Changelog","previous_headings":"","what":"graphicalMCP 0.1.0","title":"graphicalMCP 0.1.0","text":"First internal release","code":""}]
