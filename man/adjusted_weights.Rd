% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjust_weights.R
\name{adjust_weights_parametric}
\alias{adjust_weights_parametric}
\alias{adjust_weights_simes}
\alias{c_value_function}
\alias{solve_c_parametric}
\title{Calculate adjusted hypothesis weights}
\usage{
adjust_weights_parametric(
  matrix_weights,
  matrix_intersections,
  test_corr,
  alpha,
  test_groups
)

adjust_weights_simes(matrix_weights, p, test_groups)

c_value_function(x, hypotheses, test_corr, alpha)

solve_c_parametric(hypotheses, test_corr, alpha)
}
\arguments{
\item{matrix_weights}{A matrix of hypothesis weights of all intersection
hypotheses. This can be obtained as the second half of columns from the
output of \code{\link[=graph_generate_weights]{graph_generate_weights()}}.}

\item{matrix_intersections}{A matrix of hypothesis indicators of all
intersection hypotheses. This can be obtained as the first half of columns
from the output of \code{\link[=graph_generate_weights]{graph_generate_weights()}}.}

\item{test_corr}{(Optional) A list of numeric correlation matrices. Each
entry in the list should correspond to each test group. For a test group
using Bonferroni or Simes tests, its corresponding entry in \code{test_corr}
should be \code{NA}. For a test group using parametric tests, its
corresponding entry in \code{test_corr} should be a numeric correlation matrix
specifying the correlation between test statistics for hypotheses in this
test group. The length should match the number of elements in
\code{test_groups}.}

\item{alpha}{A numeric value of the overall significance level, which should
be between 0 & 1. The default is 0.025 for one-sided hypothesis testing
problems; another common choice is 0.05 for two-sided hypothesis testing
problems. Note when parametric tests are used, only one-sided tests are
supported.}

\item{test_groups}{A list of numeric vectors specifying hypotheses to test
together. Grouping is needed to correctly perform Simes and parametric
tests.}

\item{p}{A numeric vector of p-values (unadjusted, raw), whose values should
be between 0 & 1. The length should match the number of hypotheses in
\code{graph}.}

\item{x}{The root to solve for with \code{\link[stats:uniroot]{stats::uniroot()}}.}

\item{hypotheses}{A numeric vector of hypothesis weights in a graphical
multiple comparison procedure. Must be a vector of values between 0 & 1
(inclusive). The length should match the row and column lengths of
\code{transitions}. The sum of hypothesis weights should not exceed 1.}
}
\value{
\itemize{
\item \code{adjust_weights_parametric()} returns a matrix with the same dimensions
as \code{weighting_strategy}, whose hypothesis weights have been adjusted
according to parametric tests.
\item \code{adjust_weights_simes()} returns a matrix with the same dimensions
as \code{weighting_strategy}, whose hypothesis weights have been adjusted
according to Simes tests.
\item \code{c_value_function()} returns the difference between \eqn{\alpha} and the
Type I error of the parametric test with the c value of \code{x}, adjusted for
the correlation between test statistics using parametric tests based on
equation (6) of \insertCite{xi-2017-unified}{graphicalMCP}.
\item \code{solve_c_parametric()} returns the c value adjusted for the correlation
between test statistics using parametric tests based on equation (6) of
\insertCite{xi-2017-unified}{graphicalMCP}.
}
}
\description{
An intersection hypothesis can be rejected if its p-values are less than or
equal to their adjusted significance levels, which are their adjusted
hypothesis weights times \eqn{\alpha}. For Bonferroni tests, their adjusted
hypothesis weights are their hypothesis weights of the intersection
hypothesis. Additional adjustment is needed for parametric and Simes tests:
\itemize{
\item Parametric tests \insertCite{xi-2017-unified}{graphicalMCP} for
\code{graphicalMCP:::adjust_weights_parametric()},
\itemize{
\item Note that one-sided tests are required for parametric tests.
}
\item Simes tests \insertCite{lu-2016-graphical}{graphicalMCP} for
\code{graphicalMCP:::adjust_weights_simes()}.
}
}
\examples{
set.seed(1234)
alpha <- 0.025
p <- c(0.018, 0.01, 0.105, 0.006)
num_hyps <- length(p)
g <- bonferroni_holm(rep(1 / 4, 4))
weighting_strategy <- graph_generate_weights(g)
matrix_intersections <- weighting_strategy[, seq_len(num_hyps)]
matrix_weights <- weighting_strategy[, -seq_len(num_hyps)]

set.seed(1234)
graphicalMCP:::adjust_weights_parametric(
  matrix_weights = matrix_weights,
  matrix_intersections = matrix_intersections,
  test_corr = diag(4),
  alpha = alpha,
  test_groups = list(1:4)
)

graphicalMCP:::adjust_weights_simes(
  matrix_weights = matrix_weights,
  p = p,
  test_groups = list(1:4)
)

graphicalMCP:::solve_c_parametric(
  hypotheses = matrix_weights[1, ],
  test_corr = diag(4),
  alpha = alpha
)
}
\references{
\itemize{
\item \insertRef{lu-2016-graphical}{graphicalMCP}
\item \insertRef{xi-2017-unified}{graphicalMCP}
}
}
\seealso{
Other graphical tests: 
\code{\link{adjust_p_bonferroni}()},
\code{\link{graph_rejection_orderings}()},
\code{\link{graph_test_closure_fast}()},
\code{\link{graph_test_closure}()},
\code{\link{graph_test_shortcut}()},
\code{\link{print.graph_report}()},
\code{\link{test_values_bonferroni}()}
}
\concept{graphical tests}
\keyword{internal}
