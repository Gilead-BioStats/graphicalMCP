% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_critical.R
\name{c_function}
\alias{c_function}
\alias{solve_c}
\alias{calculate_critical_parametric}
\alias{calculate_critical_simes}
\title{Calculate testing critical values for the closure of a graph}
\usage{
c_function(x, w, corr, alpha)

solve_c(w, corr, alpha)

calculate_critical_parametric(gw_small, corr, alpha, groups)

calculate_critical_simes(gw_small, p, groups)
}
\arguments{
\item{x}{The root to solve for with \code{uniroot()}}

\item{w}{A numeric vector of graph weights}

\item{corr}{A numeric matrix specifying the correlation between the test
statistics of hypotheses to be tested using parametric testing}

\item{alpha}{A numeric scalar specifying the global significance level for
parametric testing}

\item{gw_small}{A compact representation of \code{generate_weights()} output,
where missing hypotheses get a missing value for weights, and h-vectors are
dropped}

\item{groups}{A list of numeric vectors specifying hypotheses to test
together}

\item{p}{A numeric vector of hypothesis p-values}
}
\value{
Outputs:
\itemize{
\item For \code{calculate_critical_parametric()}, a matrix with the same shape as
gw_small, where the weights in the second half of columns have been
multiplied by the parametric critical value for the group they are in
\item For \code{c_function()}, the critical value for the given group
}
}
\description{
Calculate testing critical values for the closure of a graph
}
\examples{
p <- 1:6 / 200

g <- bonferroni_holm(6)
gw_large <- generate_weights(g)

gw <- ifelse(gw_large[, 1:6], gw_large[, 7:12], NA)

para_critical <- calculate_critical_parametric(gw, diag(6), .05, list(1:3))
simes_critical <- calculate_critical_simes(gw, p, list(4:6))
}
