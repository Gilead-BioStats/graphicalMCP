% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calculate_critical.R
\name{c_function}
\alias{c_function}
\alias{solve_c}
\alias{calculate_critical_parametric}
\alias{calculate_critical_simes}
\title{Calculate updated hypothesis weights for the closure of a graph}
\usage{
c_function(x, weights, corr, alpha)

solve_c(weights, corr, alpha)

calculate_critical_parametric(intersections, corr, alpha, groups)

calculate_critical_simes(intersections, p, groups)
}
\arguments{
\item{x}{The root to solve for with \code{\link[stats:uniroot]{stats::uniroot()}}}

\item{weights}{A numeric vector of hypothesis weights}

\item{corr}{A numeric matrix of correlations between hypotheses' test
statistics}

\item{alpha}{A numeric scalar specifying the global significance level for
testing}

\item{intersections}{For parametric, a compact representation of
\code{\link[=generate_weights]{generate_weights()}} output, where missing hypotheses get a missing value
for weights, and h-vectors are dropped. For Simes, just the weights from
\code{\link[=generate_weights]{generate_weights()}} output}

\item{groups}{A list of numeric vectors specifying hypotheses to test
together}

\item{p}{A numeric vector of p-values}
}
\value{
Outputs:
\itemize{
\item For \verb{calculate_critical_*()}, a matrix with the same shape as
\code{intersections}, where the weights have been adjusted according to the
specified adjustment method
\item For \code{c_function()}, the critical value for the given group
}
}
\description{
The weights created by \code{\link[=generate_weights]{generate_weights()}} work immediately for Bonferroni
testing, but parametric and Simes testing require additional calculations.
The \verb{calculate_critical_*()} functions apply parametric or Simes weight
increases to get updated weights for testing. They also subset the weights
columns by the appropriate groups
}
\examples{
p <- 1:6 / 200

g <- bonferroni_holm(6)
gw_large <- generate_weights(g)

gw_0 <- gw_large[, 7:12]
gw <- ifelse(gw_large[, 1:6], gw_0, NA)

graphicalMCP:::calculate_critical_parametric(gw, diag(6), .05, list(1:3))
graphicalMCP:::calculate_critical_simes(gw_0, p, list(4:6))
}
\keyword{internal}
