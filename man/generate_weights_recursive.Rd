% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_weights_recursive.R
\name{generate_weights_recursive}
\alias{generate_weights_recursive}
\title{Generate weights for the full closure tree of an MCP graph}
\usage{
generate_weights_recursive(graph, compact = TRUE)
}
\arguments{
\item{graph}{An MCP graph as created by \code{graph()}}

\item{compact}{Determines whether to return a dataframe of weights or a list
of full graph objects. Defaults to \code{TRUE}}
}
\value{
The compact return form is a dataframe of weights, where each row
corresponds to one subgraph. Hypotheses missing from a given subgraph get
\code{NA} for their weight.

The more verbose return form is a list, where each element is a subgraph in
the form of an \code{mcp_graph} object
}
\description{
Generate weights for the full closure tree of an MCP graph
}
\section{Performance}{

An evaluation of a few different methods to generate the weights of all
subgraphs according to Bretz et al. 2011 can be found in the perf-tests
directory. On a Workbench session with sufficient RAM (Not sure how much
CPU), the \code{gMCP::generateWeights()} method runs significantly faster for the
size 2 case, but it grows quickly
}

\examples{

ex_graph <- graph(
  hypotheses = c(.5, .5, 0, 0),
  transitions = rbind(
    c(0,0,1,0),
    c(0,0,0,1),
    c(0,1,0,0),
    c(1,0,0,0)
  )
)

generate_weights_recursive(ex_graph)

}
