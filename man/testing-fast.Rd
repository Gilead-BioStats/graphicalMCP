% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/power_tests.R
\name{test_graph_fast}
\alias{test_graph_fast}
\alias{bonferroni_sequential_cpp}
\title{Calculate hypothesis rejection results efficiently}
\usage{
test_graph_fast(p, alpha, intersections, inter_h)

bonferroni_sequential_cpp(graph, p, alpha = 0.05)
}
\arguments{
\item{p}{A numeric vector of p-values}

\item{alpha}{A numeric scalar specifying the global significance level for
testing}

\item{intersections}{A compact representation of \code{\link[=generate_weights]{generate_weights()}} output,
where missing hypotheses get a missing value for weights, and h-vectors are
dropped}

\item{graph}{An initial graph as returned by \code{\link[=create_graph]{create_graph()}}}
}
\value{
A logical or integer vector of results indicating whether each
hypothesis can be accepted or rejected globally.
}
\description{
For insight and nice reporting, prefer \code{\link[=test_graph]{test_graph()}} or
\code{\link[=bonferroni_sequential]{bonferroni_sequential()}} with all of their options. They are reasonably fast
for interactive use. However in order to minimize power run time, more
efficient testing functions are available. The power simulation can be
segmented so that certain parts, like generating weights and calculating some
critical values, can be done only a single time. The closure testing function
has been stripped down to just a few vectorized lines for efficiency. A
separate optimized function is available for testing a graph with the
Bonferroni sequential shortcut.
}
\examples{
par_gate <- simple_successive_1()
graph_size <- length(par_gate$hypotheses)

p <- c(.001, .02, .002, .03)

weights <- generate_weights(par_gate)
inter_h <- weights[, seq_len(graph_size), drop = FALSE]
compact_weights <- ifelse(
  inter_h,
  weights[, seq_len(graph_size) + graph_size, drop = FALSE],
  NA
)
compact_weights[is.na(compact_weights)] <- 0

graphicalMCP:::test_graph_fast(p, .025, compact_weights, inter_h)
graphicalMCP:::bonferroni_sequential_cpp(par_gate, p, .025)
}
\seealso{
\code{\link[=test_graph]{test_graph()}}, \code{\link[=bonferroni_sequential]{bonferroni_sequential()}}
}
\keyword{internal}
